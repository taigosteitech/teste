--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 17.2

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: auth; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA auth;


ALTER SCHEMA auth OWNER TO supabase_admin;

--
-- Name: extensions; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA extensions;


ALTER SCHEMA extensions OWNER TO postgres;

--
-- Name: graphql; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql;


ALTER SCHEMA graphql OWNER TO supabase_admin;

--
-- Name: graphql_public; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql_public;


ALTER SCHEMA graphql_public OWNER TO supabase_admin;

--
-- Name: pg_net; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_net WITH SCHEMA extensions;


--
-- Name: EXTENSION pg_net; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_net IS 'Async HTTP';


--
-- Name: pgbouncer; Type: SCHEMA; Schema: -; Owner: pgbouncer
--

CREATE SCHEMA pgbouncer;


ALTER SCHEMA pgbouncer OWNER TO pgbouncer;

--
-- Name: pgsodium; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA pgsodium;


ALTER SCHEMA pgsodium OWNER TO supabase_admin;

--
-- Name: pgsodium; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgsodium WITH SCHEMA pgsodium;


--
-- Name: EXTENSION pgsodium; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgsodium IS 'Pgsodium is a modern cryptography library for Postgres.';


--
-- Name: realtime; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA realtime;


ALTER SCHEMA realtime OWNER TO supabase_admin;

--
-- Name: storage; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA storage;


ALTER SCHEMA storage OWNER TO supabase_admin;

--
-- Name: supabase_functions; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA supabase_functions;


ALTER SCHEMA supabase_functions OWNER TO supabase_admin;

--
-- Name: vault; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA vault;


ALTER SCHEMA vault OWNER TO supabase_admin;

--
-- Name: http; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS http WITH SCHEMA extensions;


--
-- Name: EXTENSION http; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION http IS 'HTTP client for PostgreSQL, allows web page retrieval inside the database.';


--
-- Name: pg_graphql; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_graphql WITH SCHEMA graphql;


--
-- Name: EXTENSION pg_graphql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_graphql IS 'pg_graphql: GraphQL support';


--
-- Name: pg_stat_statements; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_stat_statements WITH SCHEMA extensions;


--
-- Name: EXTENSION pg_stat_statements; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_stat_statements IS 'track planning and execution statistics of all SQL statements executed';


--
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA extensions;


--
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- Name: pgjwt; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgjwt WITH SCHEMA extensions;


--
-- Name: EXTENSION pgjwt; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgjwt IS 'JSON Web Token API for Postgresql';


--
-- Name: supabase_vault; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS supabase_vault WITH SCHEMA vault;


--
-- Name: EXTENSION supabase_vault; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION supabase_vault IS 'Supabase Vault Extension';


--
-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA extensions;


--
-- Name: EXTENSION "uuid-ossp"; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';


--
-- Name: aal_level; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.aal_level AS ENUM (
    'aal1',
    'aal2',
    'aal3'
);


ALTER TYPE auth.aal_level OWNER TO supabase_auth_admin;

--
-- Name: code_challenge_method; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.code_challenge_method AS ENUM (
    's256',
    'plain'
);


ALTER TYPE auth.code_challenge_method OWNER TO supabase_auth_admin;

--
-- Name: factor_status; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_status AS ENUM (
    'unverified',
    'verified'
);


ALTER TYPE auth.factor_status OWNER TO supabase_auth_admin;

--
-- Name: factor_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_type AS ENUM (
    'totp',
    'webauthn',
    'phone'
);


ALTER TYPE auth.factor_type OWNER TO supabase_auth_admin;

--
-- Name: one_time_token_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.one_time_token_type AS ENUM (
    'confirmation_token',
    'reauthentication_token',
    'recovery_token',
    'email_change_token_new',
    'email_change_token_current',
    'phone_change_token'
);


ALTER TYPE auth.one_time_token_type OWNER TO supabase_auth_admin;

--
-- Name: support_ticket_status; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.support_ticket_status AS ENUM (
    'open',
    'in_progress',
    'resolved',
    'closed'
);


ALTER TYPE public.support_ticket_status OWNER TO postgres;

--
-- Name: action; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.action AS ENUM (
    'INSERT',
    'UPDATE',
    'DELETE',
    'TRUNCATE',
    'ERROR'
);


ALTER TYPE realtime.action OWNER TO supabase_admin;

--
-- Name: equality_op; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.equality_op AS ENUM (
    'eq',
    'neq',
    'lt',
    'lte',
    'gt',
    'gte',
    'in'
);


ALTER TYPE realtime.equality_op OWNER TO supabase_admin;

--
-- Name: user_defined_filter; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.user_defined_filter AS (
	column_name text,
	op realtime.equality_op,
	value text
);


ALTER TYPE realtime.user_defined_filter OWNER TO supabase_admin;

--
-- Name: wal_column; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.wal_column AS (
	name text,
	type_name text,
	type_oid oid,
	value jsonb,
	is_pkey boolean,
	is_selectable boolean
);


ALTER TYPE realtime.wal_column OWNER TO supabase_admin;

--
-- Name: wal_rls; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.wal_rls AS (
	wal jsonb,
	is_rls_enabled boolean,
	subscription_ids uuid[],
	errors text[]
);


ALTER TYPE realtime.wal_rls OWNER TO supabase_admin;

--
-- Name: email(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.email() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.email', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'email')
  )::text
$$;


ALTER FUNCTION auth.email() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION email(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.email() IS 'Deprecated. Use auth.jwt() -> ''email'' instead.';


--
-- Name: jwt(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.jwt() RETURNS jsonb
    LANGUAGE sql STABLE
    AS $$
  select 
    coalesce(
        nullif(current_setting('request.jwt.claim', true), ''),
        nullif(current_setting('request.jwt.claims', true), '')
    )::jsonb
$$;


ALTER FUNCTION auth.jwt() OWNER TO supabase_auth_admin;

--
-- Name: role(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.role() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.role', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'role')
  )::text
$$;


ALTER FUNCTION auth.role() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION role(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.role() IS 'Deprecated. Use auth.jwt() -> ''role'' instead.';


--
-- Name: uid(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.uid() RETURNS uuid
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.sub', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'sub')
  )::uuid
$$;


ALTER FUNCTION auth.uid() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION uid(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.uid() IS 'Deprecated. Use auth.jwt() -> ''sub'' instead.';


--
-- Name: grant_pg_cron_access(); Type: FUNCTION; Schema: extensions; Owner: postgres
--

CREATE FUNCTION extensions.grant_pg_cron_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_cron'
  )
  THEN
    grant usage on schema cron to postgres with grant option;

    alter default privileges in schema cron grant all on tables to postgres with grant option;
    alter default privileges in schema cron grant all on functions to postgres with grant option;
    alter default privileges in schema cron grant all on sequences to postgres with grant option;

    alter default privileges for user supabase_admin in schema cron grant all
        on sequences to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on tables to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on functions to postgres with grant option;

    grant all privileges on all tables in schema cron to postgres with grant option;
    revoke all on table cron.job from postgres;
    grant select on table cron.job to postgres with grant option;
  END IF;
END;
$$;


ALTER FUNCTION extensions.grant_pg_cron_access() OWNER TO postgres;

--
-- Name: FUNCTION grant_pg_cron_access(); Type: COMMENT; Schema: extensions; Owner: postgres
--

COMMENT ON FUNCTION extensions.grant_pg_cron_access() IS 'Grants access to pg_cron';


--
-- Name: grant_pg_graphql_access(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.grant_pg_graphql_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
DECLARE
    func_is_graphql_resolve bool;
BEGIN
    func_is_graphql_resolve = (
        SELECT n.proname = 'resolve'
        FROM pg_event_trigger_ddl_commands() AS ev
        LEFT JOIN pg_catalog.pg_proc AS n
        ON ev.objid = n.oid
    );

    IF func_is_graphql_resolve
    THEN
        -- Update public wrapper to pass all arguments through to the pg_graphql resolve func
        DROP FUNCTION IF EXISTS graphql_public.graphql;
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language sql
        as $$
            select graphql.resolve(
                query := query,
                variables := coalesce(variables, '{}'),
                "operationName" := "operationName",
                extensions := extensions
            );
        $$;

        -- This hook executes when `graphql.resolve` is created. That is not necessarily the last
        -- function in the extension so we need to grant permissions on existing entities AND
        -- update default permissions to any others that are created after `graphql.resolve`
        grant usage on schema graphql to postgres, anon, authenticated, service_role;
        grant select on all tables in schema graphql to postgres, anon, authenticated, service_role;
        grant execute on all functions in schema graphql to postgres, anon, authenticated, service_role;
        grant all on all sequences in schema graphql to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on tables to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on functions to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on sequences to postgres, anon, authenticated, service_role;

        -- Allow postgres role to allow granting usage on graphql and graphql_public schemas to custom roles
        grant usage on schema graphql_public to postgres with grant option;
        grant usage on schema graphql to postgres with grant option;
    END IF;

END;
$_$;


ALTER FUNCTION extensions.grant_pg_graphql_access() OWNER TO supabase_admin;

--
-- Name: FUNCTION grant_pg_graphql_access(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.grant_pg_graphql_access() IS 'Grants access to pg_graphql';


--
-- Name: grant_pg_net_access(); Type: FUNCTION; Schema: extensions; Owner: postgres
--

CREATE FUNCTION extensions.grant_pg_net_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
  BEGIN
    IF EXISTS (
      SELECT 1
      FROM pg_event_trigger_ddl_commands() AS ev
      JOIN pg_extension AS ext
      ON ev.objid = ext.oid
      WHERE ext.extname = 'pg_net'
    )
    THEN
      GRANT USAGE ON SCHEMA net TO supabase_functions_admin, postgres, anon, authenticated, service_role;

      ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;
      ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;

      ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;
      ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;

      REVOKE ALL ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;
      REVOKE ALL ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;

      GRANT EXECUTE ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
      GRANT EXECUTE ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
    END IF;
  END;
  $$;


ALTER FUNCTION extensions.grant_pg_net_access() OWNER TO postgres;

--
-- Name: FUNCTION grant_pg_net_access(); Type: COMMENT; Schema: extensions; Owner: postgres
--

COMMENT ON FUNCTION extensions.grant_pg_net_access() IS 'Grants access to pg_net';


--
-- Name: pgrst_ddl_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_ddl_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  cmd record;
BEGIN
  FOR cmd IN SELECT * FROM pg_event_trigger_ddl_commands()
  LOOP
    IF cmd.command_tag IN (
      'CREATE SCHEMA', 'ALTER SCHEMA'
    , 'CREATE TABLE', 'CREATE TABLE AS', 'SELECT INTO', 'ALTER TABLE'
    , 'CREATE FOREIGN TABLE', 'ALTER FOREIGN TABLE'
    , 'CREATE VIEW', 'ALTER VIEW'
    , 'CREATE MATERIALIZED VIEW', 'ALTER MATERIALIZED VIEW'
    , 'CREATE FUNCTION', 'ALTER FUNCTION'
    , 'CREATE TRIGGER'
    , 'CREATE TYPE', 'ALTER TYPE'
    , 'CREATE RULE'
    , 'COMMENT'
    )
    -- don't notify in case of CREATE TEMP table or other objects created on pg_temp
    AND cmd.schema_name is distinct from 'pg_temp'
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_ddl_watch() OWNER TO supabase_admin;

--
-- Name: pgrst_drop_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_drop_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  obj record;
BEGIN
  FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()
  LOOP
    IF obj.object_type IN (
      'schema'
    , 'table'
    , 'foreign table'
    , 'view'
    , 'materialized view'
    , 'function'
    , 'trigger'
    , 'type'
    , 'rule'
    )
    AND obj.is_temporary IS false -- no pg_temp objects
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_drop_watch() OWNER TO supabase_admin;

--
-- Name: set_graphql_placeholder(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.set_graphql_placeholder() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
    DECLARE
    graphql_is_dropped bool;
    BEGIN
    graphql_is_dropped = (
        SELECT ev.schema_name = 'graphql_public'
        FROM pg_event_trigger_dropped_objects() AS ev
        WHERE ev.schema_name = 'graphql_public'
    );

    IF graphql_is_dropped
    THEN
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language plpgsql
        as $$
            DECLARE
                server_version float;
            BEGIN
                server_version = (SELECT (SPLIT_PART((select version()), ' ', 2))::float);

                IF server_version >= 14 THEN
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql extension is not enabled.'
                            )
                        )
                    );
                ELSE
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql is only available on projects running Postgres 14 onwards.'
                            )
                        )
                    );
                END IF;
            END;
        $$;
    END IF;

    END;
$_$;


ALTER FUNCTION extensions.set_graphql_placeholder() OWNER TO supabase_admin;

--
-- Name: FUNCTION set_graphql_placeholder(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.set_graphql_placeholder() IS 'Reintroduces placeholder function for graphql_public.graphql';


--
-- Name: get_auth(text); Type: FUNCTION; Schema: pgbouncer; Owner: postgres
--

CREATE FUNCTION pgbouncer.get_auth(p_usename text) RETURNS TABLE(username text, password text)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    RAISE WARNING 'PgBouncer auth request: %', p_usename;

    RETURN QUERY
    SELECT usename::TEXT, passwd::TEXT FROM pg_catalog.pg_shadow
    WHERE usename = p_usename;
END;
$$;


ALTER FUNCTION pgbouncer.get_auth(p_usename text) OWNER TO postgres;

--
-- Name: debug_inter_credentials(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.debug_inter_credentials() RETURNS TABLE(id uuid, client_id_preview text, environment text, created_at timestamp without time zone)
    LANGUAGE sql
    AS $$
    SELECT 
        id, 
        substring(client_id from 1 for 10) as client_id_preview, 
        environment,
        created_at
    FROM inter_credentials
$$;


ALTER FUNCTION public.debug_inter_credentials() OWNER TO postgres;

--
-- Name: fc_check_inter_pix_status(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fc_check_inter_pix_status(p_transaction_id uuid) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_response JSON;
BEGIN
    -- TODO: Implementar chamada para API do Inter para consultar status
    -- GET /pix/v2/cob/{txid}
    
    RETURN v_response;
END;
$$;


ALTER FUNCTION public.fc_check_inter_pix_status(p_transaction_id uuid) OWNER TO postgres;

--
-- Name: fc_confirm_ticket_purchase(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fc_confirm_ticket_purchase(p_transaction_id uuid) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_user_id UUID;
    v_raffle_id UUID;
    v_quantity INT;
    v_total_tickets INT;
    v_existing_numbers bigint[];
    v_ticket_numbers bigint[];
    v_current_number bigint;
    v_inserted_count INT;
BEGIN
    -- Obter informações da transação
    SELECT user_id, raffle_id, quantity, r.total_tickets
    INTO v_user_id, v_raffle_id, v_quantity, v_total_tickets
    FROM transactions t
    JOIN raffles r ON r.id = t.raffle_id
    WHERE t.id = p_transaction_id AND t.status = 'pending';

    IF NOT FOUND THEN
        RAISE EXCEPTION 'Transação não encontrada ou não está pendente';
    END IF;

    -- Obter números existentes
    SELECT array_agg(ticket_number)
    INTO v_existing_numbers
    FROM tickets 
    WHERE raffle_id = v_raffle_id;
    
    IF v_existing_numbers IS NULL THEN
        v_existing_numbers := ARRAY[]::bigint[];
    END IF;

    -- Gerar números únicos dos tickets
    v_ticket_numbers := ARRAY[]::bigint[];
    FOR i IN 1..v_quantity LOOP
        LOOP
            v_current_number := floor(random() * v_total_tickets + 1)::bigint;
            IF NOT (v_current_number = ANY(v_existing_numbers)) AND 
               NOT (v_current_number = ANY(v_ticket_numbers)) THEN
                v_ticket_numbers := array_append(v_ticket_numbers, v_current_number);
                EXIT;
            END IF;
        END LOOP;
    END LOOP;

    -- Inserir tickets
    v_inserted_count := 0;
    FOREACH v_current_number IN ARRAY v_ticket_numbers
    LOOP
        INSERT INTO tickets (
            raffle_id,
            user_id,
            ticket_number,
            status,
            transaction_id,
            purchase_date
        ) VALUES (
            v_raffle_id,
            v_user_id,
            v_current_number,
            'paid',  -- Alterado para usar o status correto
            p_transaction_id,
            timezone('utc'::text, now())
        );
        
        v_inserted_count := v_inserted_count + 1;
    END LOOP;

    IF v_inserted_count < v_quantity THEN
        RAISE EXCEPTION 'Apenas % de % tickets foram inseridos', v_inserted_count, v_quantity;
    END IF;

    -- Atualizar status da transação
    UPDATE transactions 
    SET status = 'completed',
        updated_at = timezone('utc'::text, now())
    WHERE id = p_transaction_id;

EXCEPTION WHEN OTHERS THEN
    -- Em caso de erro, garantir que a transação permaneça como pending
    UPDATE transactions 
    SET status = 'pending',
        updated_at = timezone('utc'::text, now())
    WHERE id = p_transaction_id;
    
    RAISE;
END;
$$;


ALTER FUNCTION public.fc_confirm_ticket_purchase(p_transaction_id uuid) OWNER TO postgres;

--
-- Name: fc_create_inter_pix_charge(uuid, numeric, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fc_create_inter_pix_charge(p_transaction_id uuid, p_amount numeric, p_expiration integer DEFAULT 3600) RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_transaction_data RECORD;
    v_credentials RECORD;
    v_token TEXT;
    v_api_url TEXT;
    v_payload JSON;
BEGIN
    -- Buscar dados da transação
    SELECT 
        trans.id,
        trans.user_id,
        trans.raffle_id,
        u.name as user_name,
        COALESCE(u.vatnumber, '') as user_cpf
    INTO v_transaction_data
    FROM transactions trans
    JOIN users u ON u.id = trans.user_id
    WHERE trans.id = p_transaction_id;

    -- Validar CPF
    IF v_transaction_data.user_cpf = '' THEN
        RAISE EXCEPTION 'CPF do usuário é obrigatório para criar cobrança PIX';
    END IF;

    -- Buscar credenciais do Inter
    SELECT 
        client_id,
        client_secret,
        certificate,
        certificate_key,
        pix_key,
        environment
    INTO v_credentials
    FROM inter_credentials
    WHERE environment = CASE 
        WHEN current_setting('app.environment', TRUE) = 'production' THEN 'production'
        ELSE 'sandbox'
    END
    LIMIT 1;

    -- Definir URL da API baseado no ambiente
    v_api_url := CASE 
        WHEN v_credentials.environment = 'production' THEN 'https://cdpj.partners.bancointer.com.br'
        ELSE 'https://cdpj-h.partners.bancointer.com.br'
    END;

    -- Montar payload para o Inter
    v_payload := json_build_object(
        'calendario', json_build_object(
            'expiracao', p_expiration
        ),
        'devedor', json_build_object(
            'nome', v_transaction_data.user_name,
            'cpf', regexp_replace(v_transaction_data.user_cpf, '[^0-9]', '', 'g')
        ),
        'valor', json_build_object(
            'original', TRIM(TO_CHAR(p_amount, '999999999999D99'))
        ),
        'chave', v_credentials.pix_key,
        'solicitacaoPagador', 'Compra de tickets para rifa',
        '_metadata', json_build_object(
            'url', v_api_url || '/pix/v2/cob/',
            'transaction_id', p_transaction_id
        )
    );
    
    RETURN v_payload;
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE 'Erro ao criar payload PIX: %', SQLERRM;
        RAISE;
END;
$$;


ALTER FUNCTION public.fc_create_inter_pix_charge(p_transaction_id uuid, p_amount numeric, p_expiration integer) OWNER TO postgres;

--
-- Name: fc_generate_tickets(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fc_generate_tickets(p_transaction_id uuid) RETURNS TABLE(ticket_id uuid, raffle_id uuid, user_id uuid, ticket_number bigint)
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_transaction_data RECORD;
    v_raffle_data RECORD;
BEGIN
    -- Buscar detalhes da transação
    SELECT 
        trans.id AS transaction_id,
        trans.user_id,
        trans.raffle_id,
        trans.quantity
    INTO v_transaction_data
    FROM transactions trans
    WHERE trans.id = p_transaction_id;

    -- Buscar detalhes da rifa
    SELECT 
        raff.id AS raffle_id,
        raff.total_tickets,
        raff.available_tickets,
        raff.status
    INTO v_raffle_data
    FROM raffles raff
    WHERE raff.id = v_transaction_data.raffle_id;

    -- Verificar se a rifa existe
    IF v_raffle_data.raffle_id IS NULL THEN
        RAISE EXCEPTION 'Rifa não encontrada';
    END IF;

    -- Verificar status da rifa
    IF v_raffle_data.status != 'active' THEN
        RAISE EXCEPTION 'Rifa não está ativa';
    END IF;

    -- Verificar disponibilidade de tickets
    IF v_raffle_data.available_tickets < v_transaction_data.quantity THEN
        RAISE EXCEPTION 'Não há tickets suficientes disponíveis. Solicitados: %, Disponíveis: %', 
            v_transaction_data.quantity, v_raffle_data.available_tickets;
    END IF;

    -- Gerar e inserir tickets
    RETURN QUERY
    WITH 
    existing_ticket_numbers AS (
        SELECT tk.ticket_number 
        FROM tickets tk
        WHERE tk.raffle_id = v_raffle_data.raffle_id
    ),
    available_ticket_numbers AS (
        SELECT possible_number::BIGINT  -- Conversão para BIGINT
        FROM generate_series(1, v_raffle_data.total_tickets) possible_number
        WHERE possible_number NOT IN (
            SELECT existing_ticket_numbers.ticket_number 
            FROM existing_ticket_numbers
        )
        ORDER BY random()
        LIMIT v_transaction_data.quantity
    )
    INSERT INTO tickets AS t (
        id, 
        raffle_id, 
        user_id, 
        ticket_number, 
        status,
        transaction_id
    )
    SELECT 
        gen_random_uuid(), 
        v_transaction_data.raffle_id,
        v_transaction_data.user_id,
        possible_number,
        'pending',
        v_transaction_data.transaction_id
    FROM available_ticket_numbers
    RETURNING t.id, v_transaction_data.raffle_id, v_transaction_data.user_id, t.ticket_number;

    -- Atualizar status da transação para completa
    UPDATE transactions 
    SET status = 'completed'
    WHERE id = p_transaction_id;

    -- Atualizar tickets disponíveis na rifa
    UPDATE raffles 
    SET available_tickets = available_tickets - v_transaction_data.quantity
    WHERE id = v_transaction_data.raffle_id;

END;
$$;


ALTER FUNCTION public.fc_generate_tickets(p_transaction_id uuid) OWNER TO postgres;

--
-- Name: fc_generate_unique_ticket_numbers(bigint, integer, bigint[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fc_generate_unique_ticket_numbers(p_max_number bigint, p_quantity integer, p_existing_numbers bigint[] DEFAULT NULL::bigint[]) RETURNS bigint[]
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_ticket_numbers bigint[] := '{}';
    v_new_number bigint;
    v_attempt int := 0;
    v_max_attempts int := p_quantity * 10; -- Evita loop infinito
BEGIN
    -- Log inicial
    RAISE NOTICE 'Gerando % tickets. Número máximo permitido: %', p_quantity, p_max_number;
    
    -- Inicializa array de números existentes se for NULL
    IF p_existing_numbers IS NULL THEN
        p_existing_numbers := '{}';
    END IF;

    -- Loop para gerar números únicos
    WHILE array_length(v_ticket_numbers, 1) < p_quantity AND v_attempt < v_max_attempts LOOP
        v_attempt := v_attempt + 1;
        v_new_number := floor(random() * p_max_number + 1)::bigint;
        
        -- Verifica se o número é único
        IF v_new_number != ALL(p_existing_numbers) AND v_new_number != ALL(v_ticket_numbers) THEN
            v_ticket_numbers := array_append(v_ticket_numbers, v_new_number);
            RAISE NOTICE 'Ticket número % gerado (tentativa: %)', v_new_number, v_attempt;
        END IF;
    END LOOP;

    -- Verifica se conseguiu gerar todos os números necessários
    IF array_length(v_ticket_numbers, 1) < p_quantity THEN
        RAISE EXCEPTION 'Não foi possível gerar % números únicos de tickets', p_quantity;
    END IF;

    RETURN v_ticket_numbers;
END;
$$;


ALTER FUNCTION public.fc_generate_unique_ticket_numbers(p_max_number bigint, p_quantity integer, p_existing_numbers bigint[]) OWNER TO postgres;

--
-- Name: fc_get_inter_oauth_token(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fc_get_inter_oauth_token() RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_client_id TEXT;
    v_client_secret TEXT;
    v_token TEXT;
BEGIN
    -- Buscar credenciais
    SELECT 
        client_id, 
        client_secret 
    INTO 
        v_client_id, 
        v_client_secret
    FROM inter_credentials
    WHERE environment = 'sandbox'
    LIMIT 1;

    -- Simular geração de token
    v_token := 'token_simulado_' || md5(random()::text);

    -- Log para debug
    RAISE NOTICE 'Token gerado: %', v_token;

    RETURN v_token;
EXCEPTION 
    WHEN OTHERS THEN
        -- Log de erro
        RAISE NOTICE 'Erro ao obter token OAuth: %', SQLERRM;
        RETURN NULL;
END;
$$;


ALTER FUNCTION public.fc_get_inter_oauth_token() OWNER TO postgres;

--
-- Name: fc_handle_inter_pix_webhook(json); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fc_handle_inter_pix_webhook(p_webhook_data json) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_transaction_id UUID;
    v_status TEXT;
BEGIN
    -- Extrair dados relevantes do webhook
    v_transaction_id := (p_webhook_data->>'txid')::UUID;
    v_status := p_webhook_data->>'status';
    
    -- Atualizar status da transação
    IF v_status = 'CONCLUIDA' THEN
        UPDATE transactions 
        SET 
            status = 'completed',
            pix_response = p_webhook_data,
            updated_at = NOW()
        WHERE id = v_transaction_id;
    ELSIF v_status = 'DEVOLVIDA' THEN
        UPDATE transactions 
        SET 
            status = 'refunded',
            pix_response = p_webhook_data,
            updated_at = NOW()
        WHERE id = v_transaction_id;
    END IF;
END;
$$;


ALTER FUNCTION public.fc_handle_inter_pix_webhook(p_webhook_data json) OWNER TO postgres;

--
-- Name: fc_pix_payment_webhook(jsonb); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fc_pix_payment_webhook(p_transaction_data jsonb) RETURNS jsonb
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_txid TEXT;
    v_status TEXT;
    v_transaction_id UUID;
    v_ticket_numbers BIGINT[];
BEGIN
    -- Extrair dados do webhook
    v_txid := p_transaction_data->>'txid';
    v_status := p_transaction_data->>'status';

    -- Buscar transaction_id pelo txid
    SELECT id INTO v_transaction_id
    FROM transactions
    WHERE pix_txid = v_txid;

    -- Verificar se a transação existe
    IF v_transaction_id IS NULL THEN
        RETURN jsonb_build_object(
            'status', 'error',
            'message', 'Transação não encontrada'
        );
    END IF;

    -- Verificar status do pagamento
    IF v_status = 'CONFIRMED' THEN
        -- Gerar tickets usando a função existente
        INSERT INTO tickets (
            id, 
            raffle_id, 
            user_id, 
            ticket_number, 
            status,
            transaction_id
        )
        SELECT 
            ticket_id, 
            raffle_id, 
            user_id, 
            ticket_number, 
            'paid',
            v_transaction_id
        FROM fc_generate_tickets(v_transaction_id);

        -- Recuperar números de tickets gerados
        SELECT 
            ARRAY_AGG(ticket_number ORDER BY ticket_number)
        INTO v_ticket_numbers
        FROM tickets 
        WHERE transaction_id = v_transaction_id;

        -- Atualizar status da transação
        UPDATE transactions
        SET 
            status = 'completed', 
            completed_at = NOW()
        WHERE id = v_transaction_id;

        RETURN jsonb_build_object(
            'status', 'success',
            'message', 'Pagamento confirmado e tickets gerados',
            'transaction_id', v_transaction_id,
            'ticket_numbers', v_ticket_numbers
        );
    ELSE
        RETURN jsonb_build_object(
            'status', 'pending',
            'message', 'Pagamento ainda não confirmado',
            'current_status', v_status
        );
    END IF;

EXCEPTION 
    WHEN OTHERS THEN
        RETURN jsonb_build_object(
            'status', 'error',
            'message', SQLERRM,
            'detail', SQLSTATE
        );
END;
$$;


ALTER FUNCTION public.fc_pix_payment_webhook(p_transaction_data jsonb) OWNER TO postgres;

--
-- Name: fc_purchase_ticket_with_pix(uuid, uuid, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fc_purchase_ticket_with_pix(p_raffle_id uuid, p_user_id uuid, p_quantity integer) RETURNS TABLE(transaction_id uuid, amount numeric, pix_details jsonb, pix_qr_code text, pix_key text)
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_transaction_id UUID;
    v_amount NUMERIC(10,2);
    v_available_tickets INT;
    v_total_tickets INT;
    v_price_per_ticket_unit NUMERIC(10,2);
    v_minimum_ticket SMALLINT;
    v_package_quantity INT;
    v_package_price NUMERIC(10,2);
    v_max_package_quantity INT;
    v_max_package_price NUMERIC(10,2);
    v_unit_price_from_max_package NUMERIC(10,2);
    v_remaining_quantity INT;
    v_pix_key TEXT;
    v_pix_txid TEXT;
    v_pix_qr_code TEXT;
BEGIN
    -- Buscar pix_key da tabela inter_credentials
    SELECT ic.pix_key INTO v_pix_key
    FROM inter_credentials ic
    WHERE ic.environment = CASE 
        WHEN current_setting('app.environment', TRUE) = 'production' THEN 'production'
        ELSE 'sandbox'
    END
    LIMIT 1;

    -- Validações iniciais
    IF p_quantity <= 0 THEN
        RAISE EXCEPTION 'A quantidade de tickets deve ser maior que zero';
    END IF;

    -- Validar existência do usuário e sorteio
    IF NOT EXISTS (SELECT 1 FROM users WHERE id = p_user_id) THEN
        RAISE EXCEPTION 'Usuário não encontrado';
    END IF;

    -- Obtém informações do sorteio e total de tickets vendidos
    WITH sold_tickets AS (
        SELECT COUNT(*) as total_sold
        FROM tickets 
        WHERE raffle_id = p_raffle_id
    )
    SELECT 
        r.total_tickets,
        r.total_tickets - COALESCE(s.total_sold, 0) as available_tickets,
        r.price_per_ticket_unit::NUMERIC(10,2),
        COALESCE(r.minimum_ticket, 1)
    INTO 
        v_total_tickets,
        v_available_tickets,
        v_price_per_ticket_unit,
        v_minimum_ticket
    FROM raffles r
    CROSS JOIN sold_tickets s
    WHERE r.id = p_raffle_id AND r.status = 'active';

    -- Validações do sorteio
    IF NOT FOUND THEN
        RAISE EXCEPTION 'Sorteio não encontrado ou não está ativo';
    END IF;

    IF p_quantity > v_available_tickets THEN
        RAISE EXCEPTION 'Quantidade solicitada (%) maior que disponível (%)', p_quantity, v_available_tickets;
    END IF;

    IF p_quantity < v_minimum_ticket THEN
        RAISE EXCEPTION 'Quantidade mínima de tickets é %', v_minimum_ticket;
    END IF;

    -- Calcular valor total considerando pacotes
    BEGIN
        -- Primeiro, verificar se existe um pacote máximo e seu preço unitário
        SELECT quantity, price::NUMERIC(10,2), (price::NUMERIC(10,2) / quantity::NUMERIC(10,2))
        INTO v_max_package_quantity, v_max_package_price, v_unit_price_from_max_package
        FROM raffle_packages 
        WHERE raffle_id = p_raffle_id
        ORDER BY quantity DESC
        LIMIT 1;

        -- Se a quantidade é maior que o maior pacote, usa o preço proporcional
        IF p_quantity >= v_max_package_quantity THEN
            v_amount := (p_quantity * v_unit_price_from_max_package)::NUMERIC(10,2);
        ELSE
            -- Inicializar o valor total para quantidades menores
            v_amount := 0;
            v_remaining_quantity := p_quantity;

            -- Usar pacotes menores
            WHILE v_remaining_quantity > 0 LOOP
                -- Encontrar o maior pacote que cabe na quantidade restante
                SELECT quantity, price::NUMERIC(10,2)
                INTO v_package_quantity, v_package_price
                FROM raffle_packages 
                WHERE raffle_id = p_raffle_id
                  AND quantity <= v_remaining_quantity
                ORDER BY quantity DESC
                LIMIT 1;

                IF v_package_quantity IS NULL THEN
                    -- Se não há mais pacotes disponíveis, usa preço unitário para o restante
                    v_amount := v_amount + (v_remaining_quantity * v_price_per_ticket_unit);
                    v_remaining_quantity := 0;
                ELSE
                    -- Usa um pacote
                    v_amount := v_amount + v_package_price;
                    v_remaining_quantity := v_remaining_quantity - v_package_quantity;
                END IF;
            END LOOP;
        END IF;

    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE 'Erro ao calcular valor: %', SQLERRM;
        RAISE;
    END;

    -- Simular criação de cobrança PIX (substituir por lógica real)
    v_pix_txid := md5(random()::text);
    v_pix_qr_code := md5(random()::text);

    -- Criar transação com detalhes do PIX
    v_transaction_id := uuid_generate_v4();
    INSERT INTO transactions (
        id, user_id, raffle_id, amount, type, 
        status, created_at, quantity, pix_txid, pix_qr_code, pix_key
    )
    VALUES (
        v_transaction_id,
        p_user_id,
        p_raffle_id,
        v_amount,
        'purchase',
        'pending',
        timezone('utc'::text, now()),
        p_quantity,
        v_pix_txid,
        v_pix_qr_code,
        v_pix_key
    );

    -- Retornar resultado
    RETURN QUERY 
    SELECT 
        v_transaction_id,
        v_amount,
        jsonb_build_object('txid', v_pix_txid, 'qrcode', v_pix_qr_code),
        v_pix_qr_code,
        v_pix_key;
END;
$$;


ALTER FUNCTION public.fc_purchase_ticket_with_pix(p_raffle_id uuid, p_user_id uuid, p_quantity integer) OWNER TO postgres;

--
-- Name: fc_review_details(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fc_review_details(_firm_id text DEFAULT NULL::text, _influencer_id text DEFAULT NULL::text) RETURNS TABLE(firm_id uuid, average_rating numeric, total_reviews_1 integer, total_reviews_2 integer, total_reviews_3 integer, total_reviews_4 integer, total_reviews_5 integer, total_reviews integer, percent_reviews_1 numeric, percent_reviews_2 numeric, percent_reviews_3 numeric, percent_reviews_4 numeric, percent_reviews_5 numeric, reviews jsonb)
    LANGUAGE plpgsql
    AS $$
BEGIN
    -- Converte strings vazias para NULL
    _firm_id := NULLIF(_firm_id, '');
    _influencer_id := NULLIF(_influencer_id, '');

    -- Verifica se nenhum dos parâmetros foi fornecido
    IF _firm_id IS NULL AND _influencer_id IS NULL THEN
        RETURN;
    END IF;

    RETURN QUERY
    WITH review_summary AS (
        SELECT
            COALESCE(r.firm_id, r.influencer_id) AS entity_id,
            COUNT(*)::INTEGER AS total_reviews,
            AVG(r.rating) AS average_rating,
            SUM(CASE WHEN r.rating = 1 THEN 1 ELSE 0 END)::INTEGER AS total_reviews_1,
            SUM(CASE WHEN r.rating = 2 THEN 1 ELSE 0 END)::INTEGER AS total_reviews_2,
            SUM(CASE WHEN r.rating = 3 THEN 1 ELSE 0 END)::INTEGER AS total_reviews_3,
            SUM(CASE WHEN r.rating = 4 THEN 1 ELSE 0 END)::INTEGER AS total_reviews_4,
            SUM(CASE WHEN r.rating = 5 THEN 1 ELSE 0 END)::INTEGER AS total_reviews_5,
            CASE WHEN COUNT(*) > 0 THEN SUM(CASE WHEN r.rating = 1 THEN 1 ELSE 0 END)::NUMERIC / COUNT(*) ELSE 0 END AS percent_reviews_1,
            CASE WHEN COUNT(*) > 0 THEN SUM(CASE WHEN r.rating = 2 THEN 1 ELSE 0 END)::NUMERIC / COUNT(*) ELSE 0 END AS percent_reviews_2,
            CASE WHEN COUNT(*) > 0 THEN SUM(CASE WHEN r.rating = 3 THEN 1 ELSE 0 END)::NUMERIC / COUNT(*) ELSE 0 END AS percent_reviews_3,
            CASE WHEN COUNT(*) > 0 THEN SUM(CASE WHEN r.rating = 4 THEN 1 ELSE 0 END)::NUMERIC / COUNT(*) ELSE 0 END AS percent_reviews_4,
            CASE WHEN COUNT(*) > 0 THEN SUM(CASE WHEN r.rating = 5 THEN 1 ELSE 0 END)::NUMERIC / COUNT(*) ELSE 0 END AS percent_reviews_5
        FROM public.reviews r
        WHERE
            (_firm_id IS NULL OR r.firm_id = _firm_id::uuid) AND
            (_influencer_id IS NULL OR r.influencer_id = _influencer_id::uuid)
        GROUP BY COALESCE(r.firm_id, r.influencer_id)
    )
    SELECT
        rs.entity_id AS firm_id,
        COALESCE(rs.average_rating, 0) AS average_rating,
        COALESCE(rs.total_reviews_1, 0) AS total_reviews_1,
        COALESCE(rs.total_reviews_2, 0) AS total_reviews_2,
        COALESCE(rs.total_reviews_3, 0) AS total_reviews_3,
        COALESCE(rs.total_reviews_4, 0) AS total_reviews_4,
        COALESCE(rs.total_reviews_5, 0) AS total_reviews_5,
        COALESCE(rs.total_reviews, 0) AS total_reviews,
        COALESCE(rs.percent_reviews_1, 0) AS percent_reviews_1,
        COALESCE(rs.percent_reviews_2, 0) AS percent_reviews_2,
        COALESCE(rs.percent_reviews_3, 0) AS percent_reviews_3,
        COALESCE(rs.percent_reviews_4, 0) AS percent_reviews_4,
        COALESCE(rs.percent_reviews_5, 0) AS percent_reviews_5,
        (
            SELECT jsonb_agg(jsonb_build_object(
                'review_id', r.id,
                'feedback_text', r.feedback_text,
                'rating', r.rating,
                'created_at', to_char(r.created_at, 'DD/MM/YYYY'), -- Formata created_at como dd/mm/yyyy
                'client_id', u.id,
                'client_name', u.name,
                'client_image', u.image
            ))
            FROM public.reviews r
            JOIN public.users u ON r.client_id = u.id
            WHERE COALESCE(r.firm_id, r.influencer_id) = rs.entity_id
        ) AS reviews
    FROM review_summary rs
    ORDER BY rs.average_rating DESC NULLS LAST;
END;
$$;


ALTER FUNCTION public.fc_review_details(_firm_id text, _influencer_id text) OWNER TO postgres;

--
-- Name: fc_search_raffles(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fc_search_raffles(search_text text) RETURNS TABLE(id uuid, creator_id uuid, title text, description text, prize_description text, price_per_ticket_unit real, total_tickets integer, available_tickets integer, percentage_sold numeric, percentage_available numeric, draw_date timestamp with time zone, raffle_status text, image_url text, created_at timestamp with time zone, updated_at timestamp with time zone, unique_code text, raffle_url text, category_id uuid, susep text, headline text, minimum_ticket integer, minimum_package_price numeric, prizes json[], packages json[])
    LANGUAGE plpgsql
    AS $$
BEGIN
    RETURN QUERY
    SELECT 
        r.id,
        r.creator_id,
        r.title,
        r.description,
        r.prize_description,
        r.price_per_ticket_unit,
        r.total_tickets,
        (r.total_tickets - COALESCE(CAST(t.tickets_sold AS integer), 0)) AS available_tickets,
        ROUND(
            (COALESCE(CAST(t.tickets_sold AS numeric), 0) / NULLIF(r.total_tickets, 0)::numeric * 100)::numeric,
            2
        ) as percentage_sold,
        ROUND(
            ((r.total_tickets - COALESCE(CAST(t.tickets_sold AS integer), 0))::numeric / NULLIF(r.total_tickets, 0)::numeric * 100)::numeric,
            2
        ) as percentage_available,
        r.draw_date,
        r.raffle_status,  -- Corrigido de r.status para r.raffle_status
        r.image_url,
        r.created_at,
        r.updated_at,
        r.unique_code,
        r.raffle_url,
        r.category_id,
        r.susep,
        r.headline,
        COALESCE((
            SELECT MIN(rp_min.quantity)
            FROM public.raffle_packages rp_min
            WHERE rp_min.raffle_id = r.id
        ), 1) AS minimum_ticket,
        COALESCE((
            SELECT rp_price.price
            FROM public.raffle_packages rp_price
            WHERE rp_price.raffle_id = r.id
            ORDER BY rp_price.quantity ASC
            LIMIT 1
        ), r.price_per_ticket_unit::numeric(10,2)) AS minimum_package_price,
        ARRAY(
            SELECT json_build_object(
                'id', p.id,
                'name', p.name,
                'description', p.description,
                'image_url', p.image_url,
                'quantity', rp_prizes.quantity,
                'value', p.value,
                'created_at', p.created_at,
                'updated_at', p.updated_at
            )
            FROM public.raffle_prizes rp_prizes
            JOIN public.prizes p ON rp_prizes.prize_id = p.id
            WHERE rp_prizes.raffle_id = r.id
        ) AS prizes,
        ARRAY(
            SELECT json_build_object(
                'id', rp_pack.id,
                'raffle_id', rp_pack.raffle_id,
                'package_name', rp_pack.package_name,
                'quantity', rp_pack.quantity,
                'price', rp_pack.price
            )
            FROM public.raffle_packages rp_pack
            WHERE rp_pack.raffle_id = r.id
        ) AS packages
    FROM 
        public.raffles r
    LEFT JOIN (
        SELECT 
            raffle_id,
            COUNT(*)::integer AS tickets_sold
        FROM 
            public.transactions
        WHERE 
            type = 'purchase' AND status = 'completed'
        GROUP BY 
            raffle_id
    ) t ON r.id = t.raffle_id
    WHERE 
        r.title ILIKE ('%' || search_text || '%') 
        OR r.description ILIKE ('%' || search_text || '%') 
        OR r.susep ILIKE ('%' || search_text || '%') 
        OR r.headline ILIKE ('%' || search_text || '%')
        OR EXISTS (
            SELECT 1
            FROM public.raffle_prizes rp_search
            JOIN public.prizes p_search ON rp_search.prize_id = p_search.id
            WHERE rp_search.raffle_id = r.id
            AND (
                p_search.name ILIKE ('%' || search_text || '%')
                OR p_search.description ILIKE ('%' || search_text || '%')
            )
        );
END;
$$;


ALTER FUNCTION public.fc_search_raffles(search_text text) OWNER TO postgres;

--
-- Name: generate_inter_oauth_curl(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.generate_inter_oauth_curl() RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_client_id TEXT;
    v_client_secret TEXT;
    v_curl_command TEXT;
BEGIN
    -- Buscar credenciais
    SELECT 
        client_id, 
        client_secret 
    INTO 
        v_client_id, 
        v_client_secret
    FROM inter_credentials
    WHERE environment = 'sandbox'
    LIMIT 1;

    -- Construir comando curl
    v_curl_command := format(
        'curl -s -X POST ' ||
        '"https://cdpj.partners.bancointer.com.br/oauth/v2/token" ' ||
        '-H "Content-Type: application/x-www-form-urlencoded" ' ||
        '-d "grant_type=client_credentials&client_id=%s&client_secret=%s" ' ||
        '> /tmp/oauth_response.txt',
        v_client_id,
        v_client_secret
    );

    RETURN v_curl_command;
END;
$$;


ALTER FUNCTION public.generate_inter_oauth_curl() OWNER TO postgres;

--
-- Name: get_inter_token(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_inter_token() RETURNS json
    LANGUAGE plpgsql
    AS $$
DECLARE
    cert text;
    key text;
    response json;
    anon_key text := 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFsenZtaXFweGhubnR6YW16ZHBxIiwicm9sZSI6ImFub24iLCJpYXQiOjE2ODg1MTU0NTcsImV4cCI6MjAwNDA5MTQ1N30.wzTLB2yQOc9pPQE4T7wyiDGvz_xC0bHtUPLFB-vzH9g';
    project_ref text := 'alzvmiqpxhnntzamzdpq';
BEGIN
    -- Buscar certificados via API REST
    SELECT content::text INTO cert
    FROM http.get(
        format('https://%s.supabase.co/storage/v1/object/public/admin/images/API_Certificado.crt', project_ref),
        headers := jsonb_build_object(
            'Authorization', format('Bearer %s', anon_key),
            'apikey', anon_key
        )
    );

    SELECT content::text INTO key
    FROM http.get(
        format('https://%s.supabase.co/storage/v1/object/public/admin/images/API_Chave.key', project_ref),
        headers := jsonb_build_object(
            'Authorization', format('Bearer %s', anon_key),
            'apikey', anon_key
        )
    );

    IF cert IS NULL OR key IS NULL THEN
        RAISE EXCEPTION 'Certificados não encontrados';
    END IF;

    -- Log para debug
    RAISE NOTICE 'Certificado encontrado, tamanho: %', length(cert);
    RAISE NOTICE 'Chave encontrada, tamanho: %', length(key);

    -- Fazer requisição para o Banco Inter
    SELECT content::json INTO response
    FROM http.post(
        'https://cdpj.partners.bancointer.com.br/oauth/v2/token',
        headers := jsonb_build_object(
            'Content-Type', 'application/x-www-form-urlencoded'
        ),
        body := format(
            'client_id=%s&client_secret=%s&scope=%s&grant_type=client_credentials',
            '9ae4badc-2820-46e1-949a-21378228f73f',
            '610c88f9-8978-4237-81df-188bedaa1f8b',
            'pix.read pix.write cob.read'
        ),
        ssl_cert := cert,
        ssl_key := key
    );

    RETURN response;
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE 'Erro: %', SQLERRM;
        RAISE;
END;
$$;


ALTER FUNCTION public.get_inter_token() OWNER TO postgres;

--
-- Name: handle_updated_at(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.handle_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
    new.updated_at = timezone('utc'::text, now());
    return new;
end;
$$;


ALTER FUNCTION public.handle_updated_at() OWNER TO postgres;

--
-- Name: simulate_ticket_purchase(uuid, uuid, numeric, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.simulate_ticket_purchase(p_raffle_id uuid, p_user_id uuid, p_amount numeric, p_quantity integer) RETURNS TABLE(transaction_id uuid, tickets_generated integer, total_amount numeric, ticket_numbers bigint[])
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_transaction_id UUID;
    v_ticket_numbers BIGINT[];
    v_raffle_details RECORD;
BEGIN
    -- Buscar detalhes da rifa
    SELECT 
        id,
        total_tickets,
        available_tickets,
        status
    INTO v_raffle_details
    FROM raffles 
    WHERE id = p_raffle_id;

    -- Verificar se a rifa existe
    IF v_raffle_details.id IS NULL THEN
        RAISE EXCEPTION 'Rifa não encontrada';
    END IF;

    -- Verificar status da rifa
    IF v_raffle_details.status != 'active' THEN
        RAISE EXCEPTION 'Rifa não está ativa';
    END IF;

    -- Verificar disponibilidade de tickets
    IF v_raffle_details.available_tickets < p_quantity THEN
        RAISE EXCEPTION 'Não há tickets suficientes disponíveis. Solicitados: %, Disponíveis: %', 
            p_quantity, v_raffle_details.available_tickets;
    END IF;

    -- Criar transação
    INSERT INTO transactions (
        raffle_id, 
        user_id, 
        amount, 
        status, 
        type,
        quantity
    ) VALUES (
        p_raffle_id,
        p_user_id,
        p_amount,
        'pending',
        'purchase',
        p_quantity
    ) RETURNING id INTO v_transaction_id;

    -- Gerar tickets
    INSERT INTO tickets (
        id, 
        raffle_id, 
        user_id, 
        ticket_number, 
        status,
        transaction_id
    )
    SELECT 
        ticket_id, 
        raffle_id, 
        user_id, 
        ticket_number, 
        'pending',
        v_transaction_id
    FROM fc_generate_tickets(v_transaction_id);

    -- Recuperar números de tickets gerados
    SELECT 
        ARRAY_AGG(ticket_number ORDER BY ticket_number)
    INTO v_ticket_numbers
    FROM tickets 
    WHERE transaction_id = v_transaction_id;

    -- Atualizar status da transação para completa
    UPDATE transactions 
    SET status = 'completed'
    WHERE id = v_transaction_id;

    -- Atualizar tickets disponíveis na rifa
    UPDATE raffles 
    SET available_tickets = available_tickets - p_quantity
    WHERE id = p_raffle_id;

    -- Retornar resultados
    RETURN QUERY
    SELECT 
        v_transaction_id,
        p_quantity,
        p_amount,
        v_ticket_numbers;
END;
$$;


ALTER FUNCTION public.simulate_ticket_purchase(p_raffle_id uuid, p_user_id uuid, p_amount numeric, p_quantity integer) OWNER TO postgres;

--
-- Name: tf_generate_tickets_after_payment(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.tf_generate_tickets_after_payment() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    -- Verifica se o status mudou para 'completed'
    IF NEW.status = 'completed' AND OLD.status != 'completed' THEN
        -- Chama a função de geração de tickets
        PERFORM fc_generate_tickets(NEW.id);
    END IF;
    
    RETURN NEW;
END;
$$;


ALTER FUNCTION public.tf_generate_tickets_after_payment() OWNER TO postgres;

--
-- Name: apply_rls(jsonb, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer DEFAULT (1024 * 1024)) RETURNS SETOF realtime.wal_rls
    LANGUAGE plpgsql
    AS $$
declare
-- Regclass of the table e.g. public.notes
entity_ regclass = (quote_ident(wal ->> 'schema') || '.' || quote_ident(wal ->> 'table'))::regclass;

-- I, U, D, T: insert, update ...
action realtime.action = (
    case wal ->> 'action'
        when 'I' then 'INSERT'
        when 'U' then 'UPDATE'
        when 'D' then 'DELETE'
        else 'ERROR'
    end
);

-- Is row level security enabled for the table
is_rls_enabled bool = relrowsecurity from pg_class where oid = entity_;

subscriptions realtime.subscription[] = array_agg(subs)
    from
        realtime.subscription subs
    where
        subs.entity = entity_;

-- Subscription vars
roles regrole[] = array_agg(distinct us.claims_role::text)
    from
        unnest(subscriptions) us;

working_role regrole;
claimed_role regrole;
claims jsonb;

subscription_id uuid;
subscription_has_access bool;
visible_to_subscription_ids uuid[] = '{}';

-- structured info for wal's columns
columns realtime.wal_column[];
-- previous identity values for update/delete
old_columns realtime.wal_column[];

error_record_exceeds_max_size boolean = octet_length(wal::text) > max_record_bytes;

-- Primary jsonb output for record
output jsonb;

begin
perform set_config('role', null, true);

columns =
    array_agg(
        (
            x->>'name',
            x->>'type',
            x->>'typeoid',
            realtime.cast(
                (x->'value') #>> '{}',
                coalesce(
                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                    (x->>'type')::regtype
                )
            ),
            (pks ->> 'name') is not null,
            true
        )::realtime.wal_column
    )
    from
        jsonb_array_elements(wal -> 'columns') x
        left join jsonb_array_elements(wal -> 'pk') pks
            on (x ->> 'name') = (pks ->> 'name');

old_columns =
    array_agg(
        (
            x->>'name',
            x->>'type',
            x->>'typeoid',
            realtime.cast(
                (x->'value') #>> '{}',
                coalesce(
                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                    (x->>'type')::regtype
                )
            ),
            (pks ->> 'name') is not null,
            true
        )::realtime.wal_column
    )
    from
        jsonb_array_elements(wal -> 'identity') x
        left join jsonb_array_elements(wal -> 'pk') pks
            on (x ->> 'name') = (pks ->> 'name');

for working_role in select * from unnest(roles) loop

    -- Update `is_selectable` for columns and old_columns
    columns =
        array_agg(
            (
                c.name,
                c.type_name,
                c.type_oid,
                c.value,
                c.is_pkey,
                pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
            )::realtime.wal_column
        )
        from
            unnest(columns) c;

    old_columns =
            array_agg(
                (
                    c.name,
                    c.type_name,
                    c.type_oid,
                    c.value,
                    c.is_pkey,
                    pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
                )::realtime.wal_column
            )
            from
                unnest(old_columns) c;

    if action <> 'DELETE' and count(1) = 0 from unnest(columns) c where c.is_pkey then
        return next (
            jsonb_build_object(
                'schema', wal ->> 'schema',
                'table', wal ->> 'table',
                'type', action
            ),
            is_rls_enabled,
            -- subscriptions is already filtered by entity
            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
            array['Error 400: Bad Request, no primary key']
        )::realtime.wal_rls;

    -- The claims role does not have SELECT permission to the primary key of entity
    elsif action <> 'DELETE' and sum(c.is_selectable::int) <> count(1) from unnest(columns) c where c.is_pkey then
        return next (
            jsonb_build_object(
                'schema', wal ->> 'schema',
                'table', wal ->> 'table',
                'type', action
            ),
            is_rls_enabled,
            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
            array['Error 401: Unauthorized']
        )::realtime.wal_rls;

    else
        output = jsonb_build_object(
            'schema', wal ->> 'schema',
            'table', wal ->> 'table',
            'type', action,
            'commit_timestamp', to_char(
                ((wal ->> 'timestamp')::timestamptz at time zone 'utc'),
                'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"'
            ),
            'columns', (
                select
                    jsonb_agg(
                        jsonb_build_object(
                            'name', pa.attname,
                            'type', pt.typname
                        )
                        order by pa.attnum asc
                    )
                from
                    pg_attribute pa
                    join pg_type pt
                        on pa.atttypid = pt.oid
                where
                    attrelid = entity_
                    and attnum > 0
                    and pg_catalog.has_column_privilege(working_role, entity_, pa.attname, 'SELECT')
            )
        )
        -- Add "record" key for insert and update
        || case
            when action in ('INSERT', 'UPDATE') then
                jsonb_build_object(
                    'record',
                    (
                        select
                            jsonb_object_agg(
                                -- if unchanged toast, get column name and value from old record
                                coalesce((c).name, (oc).name),
                                case
                                    when (c).name is null then (oc).value
                                    else (c).value
                                end
                            )
                        from
                            unnest(columns) c
                            full outer join unnest(old_columns) oc
                                on (c).name = (oc).name
                        where
                            coalesce((c).is_selectable, (oc).is_selectable)
                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                    )
                )
            else '{}'::jsonb
        end
        -- Add "old_record" key for update and delete
        || case
            when action = 'UPDATE' then
                jsonb_build_object(
                        'old_record',
                        (
                            select jsonb_object_agg((c).name, (c).value)
                            from unnest(old_columns) c
                            where
                                (c).is_selectable
                                and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                        )
                    )
            when action = 'DELETE' then
                jsonb_build_object(
                    'old_record',
                    (
                        select jsonb_object_agg((c).name, (c).value)
                        from unnest(old_columns) c
                        where
                            (c).is_selectable
                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                            and ( not is_rls_enabled or (c).is_pkey ) -- if RLS enabled, we can't secure deletes so filter to pkey
                    )
                )
            else '{}'::jsonb
        end;

        -- Create the prepared statement
        if is_rls_enabled and action <> 'DELETE' then
            if (select 1 from pg_prepared_statements where name = 'walrus_rls_stmt' limit 1) > 0 then
                deallocate walrus_rls_stmt;
            end if;
            execute realtime.build_prepared_statement_sql('walrus_rls_stmt', entity_, columns);
        end if;

        visible_to_subscription_ids = '{}';

        for subscription_id, claims in (
                select
                    subs.subscription_id,
                    subs.claims
                from
                    unnest(subscriptions) subs
                where
                    subs.entity = entity_
                    and subs.claims_role = working_role
                    and (
                        realtime.is_visible_through_filters(columns, subs.filters)
                        or (
                          action = 'DELETE'
                          and realtime.is_visible_through_filters(old_columns, subs.filters)
                        )
                    )
        ) loop

            if not is_rls_enabled or action = 'DELETE' then
                visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
            else
                -- Check if RLS allows the role to see the record
                perform
                    -- Trim leading and trailing quotes from working_role because set_config
                    -- doesn't recognize the role as valid if they are included
                    set_config('role', trim(both '"' from working_role::text), true),
                    set_config('request.jwt.claims', claims::text, true);

                execute 'execute walrus_rls_stmt' into subscription_has_access;

                if subscription_has_access then
                    visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
                end if;
            end if;
        end loop;

        perform set_config('role', null, true);

        return next (
            output,
            is_rls_enabled,
            visible_to_subscription_ids,
            case
                when error_record_exceeds_max_size then array['Error 413: Payload Too Large']
                else '{}'
            end
        )::realtime.wal_rls;

    end if;
end loop;

perform set_config('role', null, true);
end;
$$;


ALTER FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) OWNER TO supabase_admin;

--
-- Name: broadcast_changes(text, text, text, text, text, record, record, text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text DEFAULT 'ROW'::text) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
    -- Declare a variable to hold the JSONB representation of the row
    row_data jsonb := '{}'::jsonb;
BEGIN
    IF level = 'STATEMENT' THEN
        RAISE EXCEPTION 'function can only be triggered for each row, not for each statement';
    END IF;
    -- Check the operation type and handle accordingly
    IF operation = 'INSERT' OR operation = 'UPDATE' OR operation = 'DELETE' THEN
        row_data := jsonb_build_object('old_record', OLD, 'record', NEW, 'operation', operation, 'table', table_name, 'schema', table_schema);
        PERFORM realtime.send (row_data, event_name, topic_name);
    ELSE
        RAISE EXCEPTION 'Unexpected operation type: %', operation;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION 'Failed to process the row: %', SQLERRM;
END;

$$;


ALTER FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) OWNER TO supabase_admin;

--
-- Name: build_prepared_statement_sql(text, regclass, realtime.wal_column[]); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) RETURNS text
    LANGUAGE sql
    AS $$
      /*
      Builds a sql string that, if executed, creates a prepared statement to
      tests retrive a row from *entity* by its primary key columns.
      Example
          select realtime.build_prepared_statement_sql('public.notes', '{"id"}'::text[], '{"bigint"}'::text[])
      */
          select
      'prepare ' || prepared_statement_name || ' as
          select
              exists(
                  select
                      1
                  from
                      ' || entity || '
                  where
                      ' || string_agg(quote_ident(pkc.name) || '=' || quote_nullable(pkc.value #>> '{}') , ' and ') || '
              )'
          from
              unnest(columns) pkc
          where
              pkc.is_pkey
          group by
              entity
      $$;


ALTER FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) OWNER TO supabase_admin;

--
-- Name: cast(text, regtype); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime."cast"(val text, type_ regtype) RETURNS jsonb
    LANGUAGE plpgsql IMMUTABLE
    AS $$
    declare
      res jsonb;
    begin
      execute format('select to_jsonb(%L::'|| type_::text || ')', val)  into res;
      return res;
    end
    $$;


ALTER FUNCTION realtime."cast"(val text, type_ regtype) OWNER TO supabase_admin;

--
-- Name: check_equality_op(realtime.equality_op, regtype, text, text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) RETURNS boolean
    LANGUAGE plpgsql IMMUTABLE
    AS $$
      /*
      Casts *val_1* and *val_2* as type *type_* and check the *op* condition for truthiness
      */
      declare
          op_symbol text = (
              case
                  when op = 'eq' then '='
                  when op = 'neq' then '!='
                  when op = 'lt' then '<'
                  when op = 'lte' then '<='
                  when op = 'gt' then '>'
                  when op = 'gte' then '>='
                  when op = 'in' then '= any'
                  else 'UNKNOWN OP'
              end
          );
          res boolean;
      begin
          execute format(
              'select %L::'|| type_::text || ' ' || op_symbol
              || ' ( %L::'
              || (
                  case
                      when op = 'in' then type_::text || '[]'
                      else type_::text end
              )
              || ')', val_1, val_2) into res;
          return res;
      end;
      $$;


ALTER FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) OWNER TO supabase_admin;

--
-- Name: is_visible_through_filters(realtime.wal_column[], realtime.user_defined_filter[]); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$
    /*
    Should the record be visible (true) or filtered out (false) after *filters* are applied
    */
        select
            -- Default to allowed when no filters present
            $2 is null -- no filters. this should not happen because subscriptions has a default
            or array_length($2, 1) is null -- array length of an empty array is null
            or bool_and(
                coalesce(
                    realtime.check_equality_op(
                        op:=f.op,
                        type_:=coalesce(
                            col.type_oid::regtype, -- null when wal2json version <= 2.4
                            col.type_name::regtype
                        ),
                        -- cast jsonb to text
                        val_1:=col.value #>> '{}',
                        val_2:=f.value
                    ),
                    false -- if null, filter does not match
                )
            )
        from
            unnest(filters) f
            join unnest(columns) col
                on f.column_name = col.name;
    $_$;


ALTER FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) OWNER TO supabase_admin;

--
-- Name: list_changes(name, name, integer, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) RETURNS SETOF realtime.wal_rls
    LANGUAGE sql
    SET log_min_messages TO 'fatal'
    AS $$
      with pub as (
        select
          concat_ws(
            ',',
            case when bool_or(pubinsert) then 'insert' else null end,
            case when bool_or(pubupdate) then 'update' else null end,
            case when bool_or(pubdelete) then 'delete' else null end
          ) as w2j_actions,
          coalesce(
            string_agg(
              realtime.quote_wal2json(format('%I.%I', schemaname, tablename)::regclass),
              ','
            ) filter (where ppt.tablename is not null and ppt.tablename not like '% %'),
            ''
          ) w2j_add_tables
        from
          pg_publication pp
          left join pg_publication_tables ppt
            on pp.pubname = ppt.pubname
        where
          pp.pubname = publication
        group by
          pp.pubname
        limit 1
      ),
      w2j as (
        select
          x.*, pub.w2j_add_tables
        from
          pub,
          pg_logical_slot_get_changes(
            slot_name, null, max_changes,
            'include-pk', 'true',
            'include-transaction', 'false',
            'include-timestamp', 'true',
            'include-type-oids', 'true',
            'format-version', '2',
            'actions', pub.w2j_actions,
            'add-tables', pub.w2j_add_tables
          ) x
      )
      select
        xyz.wal,
        xyz.is_rls_enabled,
        xyz.subscription_ids,
        xyz.errors
      from
        w2j,
        realtime.apply_rls(
          wal := w2j.data::jsonb,
          max_record_bytes := max_record_bytes
        ) xyz(wal, is_rls_enabled, subscription_ids, errors)
      where
        w2j.w2j_add_tables <> ''
        and xyz.subscription_ids[1] is not null
    $$;


ALTER FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) OWNER TO supabase_admin;

--
-- Name: quote_wal2json(regclass); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.quote_wal2json(entity regclass) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $$
      select
        (
          select string_agg('' || ch,'')
          from unnest(string_to_array(nsp.nspname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
        )
        || '.'
        || (
          select string_agg('' || ch,'')
          from unnest(string_to_array(pc.relname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
          )
      from
        pg_class pc
        join pg_namespace nsp
          on pc.relnamespace = nsp.oid
      where
        pc.oid = entity
    $$;


ALTER FUNCTION realtime.quote_wal2json(entity regclass) OWNER TO supabase_admin;

--
-- Name: send(jsonb, text, text, boolean); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean DEFAULT true) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  BEGIN
    -- Set the topic configuration
    EXECUTE format('SET LOCAL realtime.topic TO %L', topic);

    -- Attempt to insert the message
    INSERT INTO realtime.messages (payload, event, topic, private, extension)
    VALUES (payload, event, topic, private, 'broadcast');
  EXCEPTION
    WHEN OTHERS THEN
      -- Capture and notify the error
      PERFORM pg_notify(
          'realtime:system',
          jsonb_build_object(
              'error', SQLERRM,
              'function', 'realtime.send',
              'event', event,
              'topic', topic,
              'private', private
          )::text
      );
  END;
END;
$$;


ALTER FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) OWNER TO supabase_admin;

--
-- Name: subscription_check_filters(); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.subscription_check_filters() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    /*
    Validates that the user defined filters for a subscription:
    - refer to valid columns that the claimed role may access
    - values are coercable to the correct column type
    */
    declare
        col_names text[] = coalesce(
                array_agg(c.column_name order by c.ordinal_position),
                '{}'::text[]
            )
            from
                information_schema.columns c
            where
                format('%I.%I', c.table_schema, c.table_name)::regclass = new.entity
                and pg_catalog.has_column_privilege(
                    (new.claims ->> 'role'),
                    format('%I.%I', c.table_schema, c.table_name)::regclass,
                    c.column_name,
                    'SELECT'
                );
        filter realtime.user_defined_filter;
        col_type regtype;

        in_val jsonb;
    begin
        for filter in select * from unnest(new.filters) loop
            -- Filtered column is valid
            if not filter.column_name = any(col_names) then
                raise exception 'invalid column for filter %', filter.column_name;
            end if;

            -- Type is sanitized and safe for string interpolation
            col_type = (
                select atttypid::regtype
                from pg_catalog.pg_attribute
                where attrelid = new.entity
                      and attname = filter.column_name
            );
            if col_type is null then
                raise exception 'failed to lookup type for column %', filter.column_name;
            end if;

            -- Set maximum number of entries for in filter
            if filter.op = 'in'::realtime.equality_op then
                in_val = realtime.cast(filter.value, (col_type::text || '[]')::regtype);
                if coalesce(jsonb_array_length(in_val), 0) > 100 then
                    raise exception 'too many values for `in` filter. Maximum 100';
                end if;
            else
                -- raises an exception if value is not coercable to type
                perform realtime.cast(filter.value, col_type);
            end if;

        end loop;

        -- Apply consistent order to filters so the unique constraint on
        -- (subscription_id, entity, filters) can't be tricked by a different filter order
        new.filters = coalesce(
            array_agg(f order by f.column_name, f.op, f.value),
            '{}'
        ) from unnest(new.filters) f;

        return new;
    end;
    $$;


ALTER FUNCTION realtime.subscription_check_filters() OWNER TO supabase_admin;

--
-- Name: to_regrole(text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.to_regrole(role_name text) RETURNS regrole
    LANGUAGE sql IMMUTABLE
    AS $$ select role_name::regrole $$;


ALTER FUNCTION realtime.to_regrole(role_name text) OWNER TO supabase_admin;

--
-- Name: topic(); Type: FUNCTION; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE FUNCTION realtime.topic() RETURNS text
    LANGUAGE sql STABLE
    AS $$
select nullif(current_setting('realtime.topic', true), '')::text;
$$;


ALTER FUNCTION realtime.topic() OWNER TO supabase_realtime_admin;

--
-- Name: can_insert_object(text, text, uuid, jsonb); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  INSERT INTO "storage"."objects" ("bucket_id", "name", "owner", "metadata") VALUES (bucketid, name, owner, metadata);
  -- hack to rollback the successful insert
  RAISE sqlstate 'PT200' using
  message = 'ROLLBACK',
  detail = 'rollback successful insert';
END
$$;


ALTER FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) OWNER TO supabase_storage_admin;

--
-- Name: extension(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.extension(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
_filename text;
BEGIN
	select string_to_array(name, '/') into _parts;
	select _parts[array_length(_parts,1)] into _filename;
	-- @todo return the last part instead of 2
	return reverse(split_part(reverse(_filename), '.', 1));
END
$$;


ALTER FUNCTION storage.extension(name text) OWNER TO supabase_storage_admin;

--
-- Name: filename(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.filename(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[array_length(_parts,1)];
END
$$;


ALTER FUNCTION storage.filename(name text) OWNER TO supabase_storage_admin;

--
-- Name: foldername(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.foldername(name text) RETURNS text[]
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[1:array_length(_parts,1)-1];
END
$$;


ALTER FUNCTION storage.foldername(name text) OWNER TO supabase_storage_admin;

--
-- Name: get_size_by_bucket(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.get_size_by_bucket() RETURNS TABLE(size bigint, bucket_id text)
    LANGUAGE plpgsql
    AS $$
BEGIN
    return query
        select sum((metadata->>'size')::int) as size, obj.bucket_id
        from "storage".objects as obj
        group by obj.bucket_id;
END
$$;


ALTER FUNCTION storage.get_size_by_bucket() OWNER TO supabase_storage_admin;

--
-- Name: list_multipart_uploads_with_delimiter(text, text, text, integer, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, next_key_token text DEFAULT ''::text, next_upload_token text DEFAULT ''::text) RETURNS TABLE(key text, id text, created_at timestamp with time zone)
    LANGUAGE plpgsql
    AS $_$
BEGIN
    RETURN QUERY EXECUTE
        'SELECT DISTINCT ON(key COLLATE "C") * from (
            SELECT
                CASE
                    WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN
                        substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1)))
                    ELSE
                        key
                END AS key, id, created_at
            FROM
                storage.s3_multipart_uploads
            WHERE
                bucket_id = $5 AND
                key ILIKE $1 || ''%'' AND
                CASE
                    WHEN $4 != '''' AND $6 = '''' THEN
                        CASE
                            WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN
                                substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1))) COLLATE "C" > $4
                            ELSE
                                key COLLATE "C" > $4
                            END
                    ELSE
                        true
                END AND
                CASE
                    WHEN $6 != '''' THEN
                        id COLLATE "C" > $6
                    ELSE
                        true
                    END
            ORDER BY
                key COLLATE "C" ASC, created_at ASC) as e order by key COLLATE "C" LIMIT $3'
        USING prefix_param, delimiter_param, max_keys, next_key_token, bucket_id, next_upload_token;
END;
$_$;


ALTER FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, next_key_token text, next_upload_token text) OWNER TO supabase_storage_admin;

--
-- Name: list_objects_with_delimiter(text, text, text, integer, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, start_after text DEFAULT ''::text, next_token text DEFAULT ''::text) RETURNS TABLE(name text, id uuid, metadata jsonb, updated_at timestamp with time zone)
    LANGUAGE plpgsql
    AS $_$
BEGIN
    RETURN QUERY EXECUTE
        'SELECT DISTINCT ON(name COLLATE "C") * from (
            SELECT
                CASE
                    WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN
                        substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1)))
                    ELSE
                        name
                END AS name, id, metadata, updated_at
            FROM
                storage.objects
            WHERE
                bucket_id = $5 AND
                name ILIKE $1 || ''%'' AND
                CASE
                    WHEN $6 != '''' THEN
                    name COLLATE "C" > $6
                ELSE true END
                AND CASE
                    WHEN $4 != '''' THEN
                        CASE
                            WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN
                                substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1))) COLLATE "C" > $4
                            ELSE
                                name COLLATE "C" > $4
                            END
                    ELSE
                        true
                END
            ORDER BY
                name COLLATE "C" ASC) as e order by name COLLATE "C" LIMIT $3'
        USING prefix_param, delimiter_param, max_keys, next_token, bucket_id, start_after;
END;
$_$;


ALTER FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, start_after text, next_token text) OWNER TO supabase_storage_admin;

--
-- Name: operation(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.operation() RETURNS text
    LANGUAGE plpgsql STABLE
    AS $$
BEGIN
    RETURN current_setting('storage.operation', true);
END;
$$;


ALTER FUNCTION storage.operation() OWNER TO supabase_storage_admin;

--
-- Name: search(text, text, integer, integer, integer, text, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.search(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text) RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)
    LANGUAGE plpgsql STABLE
    AS $_$
declare
  v_order_by text;
  v_sort_order text;
begin
  case
    when sortcolumn = 'name' then
      v_order_by = 'name';
    when sortcolumn = 'updated_at' then
      v_order_by = 'updated_at';
    when sortcolumn = 'created_at' then
      v_order_by = 'created_at';
    when sortcolumn = 'last_accessed_at' then
      v_order_by = 'last_accessed_at';
    else
      v_order_by = 'name';
  end case;

  case
    when sortorder = 'asc' then
      v_sort_order = 'asc';
    when sortorder = 'desc' then
      v_sort_order = 'desc';
    else
      v_sort_order = 'asc';
  end case;

  v_order_by = v_order_by || ' ' || v_sort_order;

  return query execute
    'with folders as (
       select path_tokens[$1] as folder
       from storage.objects
         where objects.name ilike $2 || $3 || ''%''
           and bucket_id = $4
           and array_length(objects.path_tokens, 1) <> $1
       group by folder
       order by folder ' || v_sort_order || '
     )
     (select folder as "name",
            null as id,
            null as updated_at,
            null as created_at,
            null as last_accessed_at,
            null as metadata from folders)
     union all
     (select path_tokens[$1] as "name",
            id,
            updated_at,
            created_at,
            last_accessed_at,
            metadata
     from storage.objects
     where objects.name ilike $2 || $3 || ''%''
       and bucket_id = $4
       and array_length(objects.path_tokens, 1) = $1
     order by ' || v_order_by || ')
     limit $5
     offset $6' using levels, prefix, search, bucketname, limits, offsets;
end;
$_$;


ALTER FUNCTION storage.search(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text) OWNER TO supabase_storage_admin;

--
-- Name: update_updated_at_column(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.update_updated_at_column() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW; 
END;
$$;


ALTER FUNCTION storage.update_updated_at_column() OWNER TO supabase_storage_admin;

--
-- Name: http_request(); Type: FUNCTION; Schema: supabase_functions; Owner: supabase_functions_admin
--

CREATE FUNCTION supabase_functions.http_request() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    SET search_path TO 'supabase_functions'
    AS $$
    DECLARE
      request_id bigint;
      payload jsonb;
      url text := TG_ARGV[0]::text;
      method text := TG_ARGV[1]::text;
      headers jsonb DEFAULT '{}'::jsonb;
      params jsonb DEFAULT '{}'::jsonb;
      timeout_ms integer DEFAULT 1000;
    BEGIN
      IF url IS NULL OR url = 'null' THEN
        RAISE EXCEPTION 'url argument is missing';
      END IF;

      IF method IS NULL OR method = 'null' THEN
        RAISE EXCEPTION 'method argument is missing';
      END IF;

      IF TG_ARGV[2] IS NULL OR TG_ARGV[2] = 'null' THEN
        headers = '{"Content-Type": "application/json"}'::jsonb;
      ELSE
        headers = TG_ARGV[2]::jsonb;
      END IF;

      IF TG_ARGV[3] IS NULL OR TG_ARGV[3] = 'null' THEN
        params = '{}'::jsonb;
      ELSE
        params = TG_ARGV[3]::jsonb;
      END IF;

      IF TG_ARGV[4] IS NULL OR TG_ARGV[4] = 'null' THEN
        timeout_ms = 1000;
      ELSE
        timeout_ms = TG_ARGV[4]::integer;
      END IF;

      CASE
        WHEN method = 'GET' THEN
          SELECT http_get INTO request_id FROM net.http_get(
            url,
            params,
            headers,
            timeout_ms
          );
        WHEN method = 'POST' THEN
          payload = jsonb_build_object(
            'old_record', OLD,
            'record', NEW,
            'type', TG_OP,
            'table', TG_TABLE_NAME,
            'schema', TG_TABLE_SCHEMA
          );

          SELECT http_post INTO request_id FROM net.http_post(
            url,
            payload,
            params,
            headers,
            timeout_ms
          );
        ELSE
          RAISE EXCEPTION 'method argument % is invalid', method;
      END CASE;

      INSERT INTO supabase_functions.hooks
        (hook_table_id, hook_name, request_id)
      VALUES
        (TG_RELID, TG_NAME, request_id);

      RETURN NEW;
    END
  $$;


ALTER FUNCTION supabase_functions.http_request() OWNER TO supabase_functions_admin;

--
-- Name: secrets_encrypt_secret_secret(); Type: FUNCTION; Schema: vault; Owner: supabase_admin
--

CREATE FUNCTION vault.secrets_encrypt_secret_secret() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
		BEGIN
		        new.secret = CASE WHEN new.secret IS NULL THEN NULL ELSE
			CASE WHEN new.key_id IS NULL THEN NULL ELSE pg_catalog.encode(
			  pgsodium.crypto_aead_det_encrypt(
				pg_catalog.convert_to(new.secret, 'utf8'),
				pg_catalog.convert_to((new.id::text || new.description::text || new.created_at::text || new.updated_at::text)::text, 'utf8'),
				new.key_id::uuid,
				new.nonce
			  ),
				'base64') END END;
		RETURN new;
		END;
		$$;


ALTER FUNCTION vault.secrets_encrypt_secret_secret() OWNER TO supabase_admin;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: audit_log_entries; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.audit_log_entries (
    instance_id uuid,
    id uuid NOT NULL,
    payload json,
    created_at timestamp with time zone,
    ip_address character varying(64) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE auth.audit_log_entries OWNER TO supabase_auth_admin;

--
-- Name: TABLE audit_log_entries; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.audit_log_entries IS 'Auth: Audit trail for user actions.';


--
-- Name: flow_state; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.flow_state (
    id uuid NOT NULL,
    user_id uuid,
    auth_code text NOT NULL,
    code_challenge_method auth.code_challenge_method NOT NULL,
    code_challenge text NOT NULL,
    provider_type text NOT NULL,
    provider_access_token text,
    provider_refresh_token text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    authentication_method text NOT NULL,
    auth_code_issued_at timestamp with time zone
);


ALTER TABLE auth.flow_state OWNER TO supabase_auth_admin;

--
-- Name: TABLE flow_state; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.flow_state IS 'stores metadata for pkce logins';


--
-- Name: identities; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.identities (
    provider_id text NOT NULL,
    user_id uuid NOT NULL,
    identity_data jsonb NOT NULL,
    provider text NOT NULL,
    last_sign_in_at timestamp with time zone,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    email text GENERATED ALWAYS AS (lower((identity_data ->> 'email'::text))) STORED,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE auth.identities OWNER TO supabase_auth_admin;

--
-- Name: TABLE identities; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.identities IS 'Auth: Stores identities associated to a user.';


--
-- Name: COLUMN identities.email; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.identities.email IS 'Auth: Email is a generated column that references the optional email property in the identity_data';


--
-- Name: instances; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.instances (
    id uuid NOT NULL,
    uuid uuid,
    raw_base_config text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone
);


ALTER TABLE auth.instances OWNER TO supabase_auth_admin;

--
-- Name: TABLE instances; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.instances IS 'Auth: Manages users across multiple sites.';


--
-- Name: mfa_amr_claims; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_amr_claims (
    session_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    authentication_method text NOT NULL,
    id uuid NOT NULL
);


ALTER TABLE auth.mfa_amr_claims OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_amr_claims; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_amr_claims IS 'auth: stores authenticator method reference claims for multi factor authentication';


--
-- Name: mfa_challenges; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_challenges (
    id uuid NOT NULL,
    factor_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    verified_at timestamp with time zone,
    ip_address inet NOT NULL,
    otp_code text,
    web_authn_session_data jsonb
);


ALTER TABLE auth.mfa_challenges OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_challenges; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_challenges IS 'auth: stores metadata about challenge requests made';


--
-- Name: mfa_factors; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_factors (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    friendly_name text,
    factor_type auth.factor_type NOT NULL,
    status auth.factor_status NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    secret text,
    phone text,
    last_challenged_at timestamp with time zone,
    web_authn_credential jsonb,
    web_authn_aaguid uuid
);


ALTER TABLE auth.mfa_factors OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_factors; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_factors IS 'auth: stores metadata about factors';


--
-- Name: one_time_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.one_time_tokens (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    token_type auth.one_time_token_type NOT NULL,
    token_hash text NOT NULL,
    relates_to text NOT NULL,
    created_at timestamp without time zone DEFAULT now() NOT NULL,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    CONSTRAINT one_time_tokens_token_hash_check CHECK ((char_length(token_hash) > 0))
);


ALTER TABLE auth.one_time_tokens OWNER TO supabase_auth_admin;

--
-- Name: refresh_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.refresh_tokens (
    instance_id uuid,
    id bigint NOT NULL,
    token character varying(255),
    user_id character varying(255),
    revoked boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    parent character varying(255),
    session_id uuid
);


ALTER TABLE auth.refresh_tokens OWNER TO supabase_auth_admin;

--
-- Name: TABLE refresh_tokens; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.refresh_tokens IS 'Auth: Store of tokens used to refresh JWT tokens once they expire.';


--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE; Schema: auth; Owner: supabase_auth_admin
--

CREATE SEQUENCE auth.refresh_tokens_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE auth.refresh_tokens_id_seq OWNER TO supabase_auth_admin;

--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE OWNED BY; Schema: auth; Owner: supabase_auth_admin
--

ALTER SEQUENCE auth.refresh_tokens_id_seq OWNED BY auth.refresh_tokens.id;


--
-- Name: saml_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_providers (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    entity_id text NOT NULL,
    metadata_xml text NOT NULL,
    metadata_url text,
    attribute_mapping jsonb,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    name_id_format text,
    CONSTRAINT "entity_id not empty" CHECK ((char_length(entity_id) > 0)),
    CONSTRAINT "metadata_url not empty" CHECK (((metadata_url = NULL::text) OR (char_length(metadata_url) > 0))),
    CONSTRAINT "metadata_xml not empty" CHECK ((char_length(metadata_xml) > 0))
);


ALTER TABLE auth.saml_providers OWNER TO supabase_auth_admin;

--
-- Name: TABLE saml_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_providers IS 'Auth: Manages SAML Identity Provider connections.';


--
-- Name: saml_relay_states; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_relay_states (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    request_id text NOT NULL,
    for_email text,
    redirect_to text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    flow_state_id uuid,
    CONSTRAINT "request_id not empty" CHECK ((char_length(request_id) > 0))
);


ALTER TABLE auth.saml_relay_states OWNER TO supabase_auth_admin;

--
-- Name: TABLE saml_relay_states; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_relay_states IS 'Auth: Contains SAML Relay State information for each Service Provider initiated login.';


--
-- Name: schema_migrations; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE auth.schema_migrations OWNER TO supabase_auth_admin;

--
-- Name: TABLE schema_migrations; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.schema_migrations IS 'Auth: Manages updates to the auth system.';


--
-- Name: sessions; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sessions (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    factor_id uuid,
    aal auth.aal_level,
    not_after timestamp with time zone,
    refreshed_at timestamp without time zone,
    user_agent text,
    ip inet,
    tag text
);


ALTER TABLE auth.sessions OWNER TO supabase_auth_admin;

--
-- Name: TABLE sessions; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sessions IS 'Auth: Stores session data associated to a user.';


--
-- Name: COLUMN sessions.not_after; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sessions.not_after IS 'Auth: Not after is a nullable column that contains a timestamp after which the session should be regarded as expired.';


--
-- Name: sso_domains; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_domains (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    domain text NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    CONSTRAINT "domain not empty" CHECK ((char_length(domain) > 0))
);


ALTER TABLE auth.sso_domains OWNER TO supabase_auth_admin;

--
-- Name: TABLE sso_domains; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_domains IS 'Auth: Manages SSO email address domain mapping to an SSO Identity Provider.';


--
-- Name: sso_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_providers (
    id uuid NOT NULL,
    resource_id text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    CONSTRAINT "resource_id not empty" CHECK (((resource_id = NULL::text) OR (char_length(resource_id) > 0)))
);


ALTER TABLE auth.sso_providers OWNER TO supabase_auth_admin;

--
-- Name: TABLE sso_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_providers IS 'Auth: Manages SSO identity provider information; see saml_providers for SAML.';


--
-- Name: COLUMN sso_providers.resource_id; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sso_providers.resource_id IS 'Auth: Uniquely identifies a SSO provider according to a user-chosen resource ID (case insensitive), useful in infrastructure as code.';


--
-- Name: users; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.users (
    instance_id uuid,
    id uuid NOT NULL,
    aud character varying(255),
    role character varying(255),
    email character varying(255),
    encrypted_password character varying(255),
    email_confirmed_at timestamp with time zone,
    invited_at timestamp with time zone,
    confirmation_token character varying(255),
    confirmation_sent_at timestamp with time zone,
    recovery_token character varying(255),
    recovery_sent_at timestamp with time zone,
    email_change_token_new character varying(255),
    email_change character varying(255),
    email_change_sent_at timestamp with time zone,
    last_sign_in_at timestamp with time zone,
    raw_app_meta_data jsonb,
    raw_user_meta_data jsonb,
    is_super_admin boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    phone text DEFAULT NULL::character varying,
    phone_confirmed_at timestamp with time zone,
    phone_change text DEFAULT ''::character varying,
    phone_change_token character varying(255) DEFAULT ''::character varying,
    phone_change_sent_at timestamp with time zone,
    confirmed_at timestamp with time zone GENERATED ALWAYS AS (LEAST(email_confirmed_at, phone_confirmed_at)) STORED,
    email_change_token_current character varying(255) DEFAULT ''::character varying,
    email_change_confirm_status smallint DEFAULT 0,
    banned_until timestamp with time zone,
    reauthentication_token character varying(255) DEFAULT ''::character varying,
    reauthentication_sent_at timestamp with time zone,
    is_sso_user boolean DEFAULT false NOT NULL,
    deleted_at timestamp with time zone,
    is_anonymous boolean DEFAULT false NOT NULL,
    CONSTRAINT users_email_change_confirm_status_check CHECK (((email_change_confirm_status >= 0) AND (email_change_confirm_status <= 2)))
);


ALTER TABLE auth.users OWNER TO supabase_auth_admin;

--
-- Name: TABLE users; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.users IS 'Auth: Stores user login data within a secure schema.';


--
-- Name: COLUMN users.is_sso_user; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.users.is_sso_user IS 'Auth: Set this column to true when the account comes from SSO. These accounts can have duplicate emails.';


--
-- Name: banner; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.banner (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    title text,
    description text,
    image text,
    url text,
    location text,
    date_start timestamp with time zone,
    date_end timestamp with time zone,
    raffle_id uuid,
    influencer_id uuid,
    type text,
    "column" text,
    content text
);


ALTER TABLE public.banner OWNER TO postgres;

--
-- Name: cashback; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.cashback (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    user_id uuid,
    transaction_id uuid,
    amount numeric(10,2) NOT NULL,
    received_date timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


ALTER TABLE public.cashback OWNER TO postgres;

--
-- Name: contracts; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.contracts (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    influencer_id uuid,
    client_id uuid,
    service_plan_id uuid,
    start_date timestamp with time zone NOT NULL,
    end_date timestamp with time zone NOT NULL,
    status character varying(20) DEFAULT 'pending'::character varying,
    total_price numeric(10,2) NOT NULL,
    commission numeric(10,2) NOT NULL,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    CONSTRAINT contracts_status_check CHECK (((status)::text = ANY ((ARRAY['pending'::character varying, 'active'::character varying, 'completed'::character varying, 'cancelled'::character varying])::text[])))
);


ALTER TABLE public.contracts OWNER TO postgres;

--
-- Name: event; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.event (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name text,
    description text,
    image text,
    date_start timestamp with time zone,
    date_end timestamp with time zone,
    local text
);


ALTER TABLE public.event OWNER TO postgres;

--
-- Name: event_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.event ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.event_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: faq; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.faq (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    title text,
    content text
);


ALTER TABLE public.faq OWNER TO postgres;

--
-- Name: firms; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.firms (
    id uuid NOT NULL,
    name character varying NOT NULL,
    address text,
    contact_info text,
    created_at timestamp with time zone DEFAULT now(),
    start_time timestamp with time zone,
    end_time timestamp with time zone,
    description text,
    image text,
    image_cover text,
    phone text,
    whatsapp text,
    birthdate date,
    number_customers smallint,
    zipcode text,
    number text,
    complement text,
    district text,
    city text,
    state text,
    specialization_id uuid
);


ALTER TABLE public.firms OWNER TO postgres;

--
-- Name: influencer_payments; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.influencer_payments (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    influencer_id uuid,
    amount numeric(10,2) NOT NULL,
    payment_date timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


ALTER TABLE public.influencer_payments OWNER TO postgres;

--
-- Name: inter_credentials; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.inter_credentials (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    client_id text NOT NULL,
    client_secret text NOT NULL,
    certificate text,
    certificate_key text,
    created_at timestamp without time zone DEFAULT now(),
    environment text,
    pix_key text,
    ca_certificate text,
    cert_path text,
    key_path text
);


ALTER TABLE public.inter_credentials OWNER TO postgres;

--
-- Name: notification_recipients; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.notification_recipients (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    notification_id uuid,
    player_id text,
    external_user_id text
);


ALTER TABLE public.notification_recipients OWNER TO postgres;

--
-- Name: notification_recipients_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.notification_recipients ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.notification_recipients_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: notifications; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.notifications (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    title text,
    content text,
    big_image text,
    url text,
    paramname text,
    itemid text,
    read timestamp with time zone
);


ALTER TABLE public.notifications OWNER TO postgres;

--
-- Name: prizes; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.prizes (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    name text NOT NULL,
    description text NOT NULL,
    value numeric(10,2) NOT NULL,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    image_url text
);


ALTER TABLE public.prizes OWNER TO postgres;

--
-- Name: product_categories; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.product_categories (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    category_name character varying NOT NULL,
    firm_id uuid
);


ALTER TABLE public.product_categories OWNER TO postgres;

--
-- Name: products; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.products (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    category_id uuid,
    product_name character varying NOT NULL,
    product_description text,
    price numeric,
    created_at timestamp with time zone DEFAULT now(),
    image text
);


ALTER TABLE public.products OWNER TO postgres;

--
-- Name: raffle_categories; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.raffle_categories (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    name character varying(255) NOT NULL,
    description text,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


ALTER TABLE public.raffle_categories OWNER TO postgres;

--
-- Name: raffle_packages; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.raffle_packages (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    raffle_id uuid NOT NULL,
    package_name character varying(255) NOT NULL,
    quantity integer NOT NULL,
    price numeric(10,2) NOT NULL
);


ALTER TABLE public.raffle_packages OWNER TO postgres;

--
-- Name: raffle_prizes; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.raffle_prizes (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    raffle_id uuid,
    prize_id uuid,
    quantity integer NOT NULL,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


ALTER TABLE public.raffle_prizes OWNER TO postgres;

--
-- Name: raffles; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.raffles (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    creator_id uuid,
    title text NOT NULL,
    description text,
    prize_description text NOT NULL,
    price_per_ticket_unit real NOT NULL,
    total_tickets integer NOT NULL,
    available_tickets integer NOT NULL,
    draw_date timestamp with time zone NOT NULL,
    raffle_status text,
    image_url text,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    unique_code text NOT NULL,
    raffle_url text NOT NULL,
    category_id uuid,
    headline text,
    susep text,
    CONSTRAINT raffles_status_check CHECK ((raffle_status = ANY (ARRAY[('draft'::character varying)::text, ('active'::character varying)::text, ('completed'::character varying)::text, ('cancelled'::character varying)::text]))),
    CONSTRAINT valid_price CHECK ((price_per_ticket_unit > ((0)::numeric)::double precision)),
    CONSTRAINT valid_tickets CHECK (((total_tickets > 0) AND (available_tickets >= 0)))
);


ALTER TABLE public.raffles OWNER TO postgres;

--
-- Name: reviews; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.reviews (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    client_id uuid,
    influencer_id uuid,
    feedback_text text,
    rating smallint,
    firm_id uuid
);


ALTER TABLE public.reviews OWNER TO postgres;

--
-- Name: service_plans; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.service_plans (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    name character varying(255) NOT NULL,
    description text NOT NULL,
    price numeric(10,2) NOT NULL,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


ALTER TABLE public.service_plans OWNER TO postgres;

--
-- Name: shared_raffles; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.shared_raffles (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    raffle_id uuid,
    influencer_id uuid,
    shared_date timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


ALTER TABLE public.shared_raffles OWNER TO postgres;

--
-- Name: specializations; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.specializations (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name text,
    introduction text,
    image text
);


ALTER TABLE public.specializations OWNER TO postgres;

--
-- Name: support_tickets; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.support_tickets (
    id uuid NOT NULL,
    user_id uuid,
    subject character varying,
    description text,
    status public.support_ticket_status NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.support_tickets OWNER TO postgres;

--
-- Name: system_config; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.system_config (
    key text NOT NULL,
    value text NOT NULL
);


ALTER TABLE public.system_config OWNER TO postgres;

--
-- Name: tickets; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.tickets (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    raffle_id uuid NOT NULL,
    user_id uuid NOT NULL,
    ticket_number bigint NOT NULL,
    purchase_date timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    status text DEFAULT 'pending'::character varying,
    payment_intent_id text,
    transaction_id uuid,
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT tickets_status_check CHECK ((status = ANY (ARRAY[('pending'::character varying)::text, ('paid'::character varying)::text, ('cancelled'::character varying)::text])))
);


ALTER TABLE public.tickets OWNER TO postgres;

--
-- Name: TABLE tickets; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.tickets IS 'A tabela tickets armazena informações sobre cada ticket comprado para uma rifa específica. Ela permite rastrear quais usuários compraram quais tickets, em qual rifa, e o status desses tickets (por exemplo, se o pagamento foi concluído ou não).';


--
-- Name: transactions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.transactions (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    user_id uuid NOT NULL,
    raffle_id uuid NOT NULL,
    amount numeric NOT NULL,
    type character varying(20),
    status character varying(20) DEFAULT 'pending'::character varying,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    quantity integer,
    updated_at timestamp with time zone,
    pix_txid text,
    pix_qr_code text,
    pix_key text,
    CONSTRAINT transactions_status_check CHECK (((status)::text = ANY (ARRAY[('pending'::character varying)::text, ('completed'::character varying)::text, ('failed'::character varying)::text]))),
    CONSTRAINT transactions_type_check CHECK (((type)::text = ANY (ARRAY[('purchase'::character varying)::text, ('refund'::character varying)::text, ('withdrawal'::character varying)::text, ('deposit'::character varying)::text])))
);


ALTER TABLE public.transactions OWNER TO postgres;

--
-- Name: TABLE transactions; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.transactions IS 'A tabela transactions armazena informações detalhadas sobre todas as transações financeiras realizadas no aplicativo. Isso inclui compras de tickets, reembolsos, saques e depósitos. Ela permite rastrear todas as movimentações financeiras de cada usuário e garantir transparência e precisão no gerenciamento financeiro.';


--
-- Name: users; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.users (
    id uuid NOT NULL,
    name character varying(255),
    image text,
    phone text,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    balance numeric(10,2) DEFAULT 0.00,
    role text NOT NULL,
    unique_code text,
    profile_url text,
    vatnumber text,
    email text,
    gender text,
    birthdate date,
    biography text,
    sincejob date,
    zipcode text,
    address text,
    number text,
    complement text,
    district text,
    city text,
    state text,
    bank_type text,
    bank_name text,
    bank_agency text,
    bank_account text,
    bank_pix_type text,
    bank_pix_key text,
    rg text,
    cpf text,
    followers_youtube bigint,
    followers_insta bigint,
    followers_face bigint,
    followers_tiktok bigint,
    followers_kwai bigint,
    followers_linkedin smallint,
    url_youtube text,
    url_insta text,
    url_face text,
    url_tiktok text,
    url_kwai text,
    url_linkedin text,
    specialization_id uuid,
    CONSTRAINT profiles_user_type_check CHECK ((role = ANY (ARRAY[('client'::character varying)::text, ('influencer'::character varying)::text, ('establishment'::character varying)::text, ('admin'::character varying)::text])))
);


ALTER TABLE public.users OWNER TO postgres;

--
-- Name: vw_banner; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.vw_banner AS
 SELECT b.id,
    b.created_at,
    b.title AS banner_title,
    b.description AS banner_description,
    b.image AS banner_image,
    b.url AS banner_url,
    b.location,
    b.date_start,
    b.date_end,
    b.raffle_id,
    b.influencer_id,
    b.type,
    b."column",
    b.content AS banner_content,
    r.creator_id,
    r.title AS raffle_title,
    r.description AS raffle_description,
    r.prize_description,
    r.price_per_ticket_unit,
    r.total_tickets,
    r.available_tickets,
    round(((((r.total_tickets - r.available_tickets))::numeric / (NULLIF(r.total_tickets, 0))::numeric) * (100)::numeric), 2) AS percentage_sold,
    round((((r.available_tickets)::numeric / (NULLIF(r.total_tickets, 0))::numeric) * (100)::numeric), 2) AS percentage_available,
    r.draw_date,
    r.raffle_status,
    r.image_url AS raffle_image_url,
    r.created_at AS raffle_created_at,
    r.updated_at AS raffle_updated_at,
    r.unique_code,
    r.raffle_url,
    r.category_id,
    r.susep,
    r.headline AS raffle_headline,
    ( SELECT min(rp.quantity) AS min
           FROM public.raffle_packages rp
          WHERE (rp.raffle_id = r.id)) AS minimum_ticket,
    ( SELECT rp.price
           FROM public.raffle_packages rp
          WHERE (rp.raffle_id = r.id)
          ORDER BY rp.quantity
         LIMIT 1) AS minimum_package_price,
    COALESCE(( SELECT array_agg(json_build_object('id', p.id, 'name', p.name, 'description', p.description, 'image_url', p.image_url, 'quantity', rp.quantity, 'value', p.value, 'created_at', p.created_at, 'updated_at', p.updated_at)) AS array_agg
           FROM (public.raffle_prizes rp
             JOIN public.prizes p ON ((rp.prize_id = p.id)))
          WHERE (rp.raffle_id = r.id)), ARRAY[]::json[]) AS prizes,
    COALESCE(( SELECT array_agg(json_build_object('id', rp.id, 'raffle_id', rp.raffle_id, 'package_name', rp.package_name, 'quantity', rp.quantity, 'price', rp.price)) AS array_agg
           FROM public.raffle_packages rp
          WHERE (rp.raffle_id = r.id)), ARRAY[]::json[]) AS packages,
    u.name AS influencer_name,
    s.name AS influencer_specialization,
    u.image AS influencer_image
   FROM (((public.banner b
     LEFT JOIN public.raffles r ON ((b.raffle_id = r.id)))
     LEFT JOIN public.users u ON ((b.influencer_id = u.id)))
     LEFT JOIN public.specializations s ON ((u.specialization_id = s.id)));


ALTER VIEW public.vw_banner OWNER TO postgres;

--
-- Name: vw_firm_info; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.vw_firm_info AS
SELECT
    NULL::uuid AS firm_id,
    NULL::character varying AS firm_name,
    NULL::text AS firm_address,
    NULL::text AS firm_contact_info,
    NULL::timestamp with time zone AS firm_created_at,
    NULL::timestamp with time zone AS firm_start_time,
    NULL::timestamp with time zone AS firm_end_time,
    NULL::text AS firm_description,
    NULL::text AS firm_image,
    NULL::text AS firm_image_cover,
    NULL::text AS firm_phone,
    NULL::text AS firm_whatsapp,
    NULL::date AS firm_birthdate,
    NULL::smallint AS firm_number_customers,
    NULL::text AS firm_zipcode,
    NULL::text AS firm_number,
    NULL::text AS firm_complement,
    NULL::text AS firm_district,
    NULL::text AS firm_city,
    NULL::text AS firm_state,
    NULL::text AS default_specialization,
    NULL::text AS all_specializations,
    NULL::numeric AS years_since_birthdate,
    NULL::numeric AS average_rating,
    NULL::bigint AS review_count;


ALTER VIEW public.vw_firm_info OWNER TO postgres;

--
-- Name: vw_product_details; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.vw_product_details AS
 SELECT p.id AS product_id,
    p.product_name,
    p.product_description,
    p.price,
    p.created_at,
    p.image,
    c.id AS category_id,
    c.category_name
   FROM (public.products p
     JOIN public.product_categories c ON ((p.category_id = c.id)));


ALTER VIEW public.vw_product_details OWNER TO postgres;

--
-- Name: vw_raffles_details; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.vw_raffles_details AS
 SELECT r.id,
    r.creator_id,
    r.title,
    r.description,
    r.prize_description,
    r.price_per_ticket_unit,
    r.total_tickets,
    r.available_tickets,
    round(((((r.total_tickets - r.available_tickets))::numeric / (NULLIF(r.total_tickets, 0))::numeric) * (100)::numeric), 2) AS percentage_sold,
    round((((r.available_tickets)::numeric / (NULLIF(r.total_tickets, 0))::numeric) * (100)::numeric), 2) AS percentage_available,
    r.draw_date,
    r.raffle_status,
    r.image_url,
    r.created_at,
    r.updated_at,
    r.unique_code,
    r.raffle_url,
    r.category_id,
    r.susep,
    r.headline,
    ( SELECT min(rp.quantity) AS min
           FROM public.raffle_packages rp
          WHERE (rp.raffle_id = r.id)) AS minimum_ticket,
    ( SELECT rp.price
           FROM public.raffle_packages rp
          WHERE (rp.raffle_id = r.id)
          ORDER BY rp.quantity
         LIMIT 1) AS minimum_package_price,
    COALESCE(( SELECT array_agg(json_build_object('id', p.id, 'name', p.name, 'description', p.description, 'image_url', p.image_url, 'quantity', rp.quantity, 'value', p.value, 'created_at', p.created_at, 'updated_at', p.updated_at)) AS array_agg
           FROM (public.raffle_prizes rp
             JOIN public.prizes p ON ((rp.prize_id = p.id)))
          WHERE (rp.raffle_id = r.id)), ARRAY[]::json[]) AS prizes,
    COALESCE(( SELECT array_agg(json_build_object('id', rp.id, 'raffle_id', rp.raffle_id, 'package_name', rp.package_name, 'quantity', rp.quantity, 'price', rp.price)) AS array_agg
           FROM public.raffle_packages rp
          WHERE (rp.raffle_id = r.id)), ARRAY[]::json[]) AS packages
   FROM public.raffles r;


ALTER VIEW public.vw_raffles_details OWNER TO postgres;

--
-- Name: vw_user_info; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.vw_user_info AS
SELECT
    NULL::uuid AS user_id,
    NULL::character varying(255) AS user_name,
    NULL::text AS user_image,
    NULL::text AS role,
    NULL::numeric AS average_rating,
    NULL::text AS main_specialization,
    NULL::text AS biography,
    NULL::date AS sincejob,
    NULL::numeric AS years_of_experience,
    NULL::bigint AS followers_amount;


ALTER VIEW public.vw_user_info OWNER TO postgres;

--
-- Name: winners; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.winners (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    raffle_id uuid,
    ticket_id uuid,
    user_id uuid,
    draw_date timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    prize_claimed boolean DEFAULT false,
    claim_date timestamp with time zone
);


ALTER TABLE public.winners OWNER TO postgres;

--
-- Name: messages; Type: TABLE; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE TABLE realtime.messages (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
)
PARTITION BY RANGE (inserted_at);


ALTER TABLE realtime.messages OWNER TO supabase_realtime_admin;

--
-- Name: messages_2025_01_16; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.messages_2025_01_16 (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE realtime.messages_2025_01_16 OWNER TO supabase_admin;

--
-- Name: messages_2025_01_17; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.messages_2025_01_17 (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE realtime.messages_2025_01_17 OWNER TO supabase_admin;

--
-- Name: messages_2025_01_18; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.messages_2025_01_18 (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE realtime.messages_2025_01_18 OWNER TO supabase_admin;

--
-- Name: messages_2025_01_19; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.messages_2025_01_19 (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE realtime.messages_2025_01_19 OWNER TO supabase_admin;

--
-- Name: messages_2025_01_20; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.messages_2025_01_20 (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE realtime.messages_2025_01_20 OWNER TO supabase_admin;

--
-- Name: schema_migrations; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.schema_migrations (
    version bigint NOT NULL,
    inserted_at timestamp(0) without time zone
);


ALTER TABLE realtime.schema_migrations OWNER TO supabase_admin;

--
-- Name: subscription; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.subscription (
    id bigint NOT NULL,
    subscription_id uuid NOT NULL,
    entity regclass NOT NULL,
    filters realtime.user_defined_filter[] DEFAULT '{}'::realtime.user_defined_filter[] NOT NULL,
    claims jsonb NOT NULL,
    claims_role regrole GENERATED ALWAYS AS (realtime.to_regrole((claims ->> 'role'::text))) STORED NOT NULL,
    created_at timestamp without time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


ALTER TABLE realtime.subscription OWNER TO supabase_admin;

--
-- Name: subscription_id_seq; Type: SEQUENCE; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE realtime.subscription ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME realtime.subscription_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: buckets; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.buckets (
    id text NOT NULL,
    name text NOT NULL,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    public boolean DEFAULT false,
    avif_autodetection boolean DEFAULT false,
    file_size_limit bigint,
    allowed_mime_types text[],
    owner_id text
);


ALTER TABLE storage.buckets OWNER TO supabase_storage_admin;

--
-- Name: COLUMN buckets.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.buckets.owner IS 'Field is deprecated, use owner_id instead';


--
-- Name: migrations; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.migrations (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    hash character varying(40) NOT NULL,
    executed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE storage.migrations OWNER TO supabase_storage_admin;

--
-- Name: objects; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.objects (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    bucket_id text,
    name text,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    last_accessed_at timestamp with time zone DEFAULT now(),
    metadata jsonb,
    path_tokens text[] GENERATED ALWAYS AS (string_to_array(name, '/'::text)) STORED,
    version text,
    owner_id text,
    user_metadata jsonb
);


ALTER TABLE storage.objects OWNER TO supabase_storage_admin;

--
-- Name: COLUMN objects.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.objects.owner IS 'Field is deprecated, use owner_id instead';


--
-- Name: s3_multipart_uploads; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.s3_multipart_uploads (
    id text NOT NULL,
    in_progress_size bigint DEFAULT 0 NOT NULL,
    upload_signature text NOT NULL,
    bucket_id text NOT NULL,
    key text NOT NULL COLLATE pg_catalog."C",
    version text NOT NULL,
    owner_id text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    user_metadata jsonb
);


ALTER TABLE storage.s3_multipart_uploads OWNER TO supabase_storage_admin;

--
-- Name: s3_multipart_uploads_parts; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.s3_multipart_uploads_parts (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    upload_id text NOT NULL,
    size bigint DEFAULT 0 NOT NULL,
    part_number integer NOT NULL,
    bucket_id text NOT NULL,
    key text NOT NULL COLLATE pg_catalog."C",
    etag text NOT NULL,
    owner_id text,
    version text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE storage.s3_multipart_uploads_parts OWNER TO supabase_storage_admin;

--
-- Name: hooks; Type: TABLE; Schema: supabase_functions; Owner: supabase_functions_admin
--

CREATE TABLE supabase_functions.hooks (
    id bigint NOT NULL,
    hook_table_id integer NOT NULL,
    hook_name text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    request_id bigint
);


ALTER TABLE supabase_functions.hooks OWNER TO supabase_functions_admin;

--
-- Name: TABLE hooks; Type: COMMENT; Schema: supabase_functions; Owner: supabase_functions_admin
--

COMMENT ON TABLE supabase_functions.hooks IS 'Supabase Functions Hooks: Audit trail for triggered hooks.';


--
-- Name: hooks_id_seq; Type: SEQUENCE; Schema: supabase_functions; Owner: supabase_functions_admin
--

CREATE SEQUENCE supabase_functions.hooks_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE supabase_functions.hooks_id_seq OWNER TO supabase_functions_admin;

--
-- Name: hooks_id_seq; Type: SEQUENCE OWNED BY; Schema: supabase_functions; Owner: supabase_functions_admin
--

ALTER SEQUENCE supabase_functions.hooks_id_seq OWNED BY supabase_functions.hooks.id;


--
-- Name: migrations; Type: TABLE; Schema: supabase_functions; Owner: supabase_functions_admin
--

CREATE TABLE supabase_functions.migrations (
    version text NOT NULL,
    inserted_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE supabase_functions.migrations OWNER TO supabase_functions_admin;

--
-- Name: decrypted_secrets; Type: VIEW; Schema: vault; Owner: supabase_admin
--

CREATE VIEW vault.decrypted_secrets AS
 SELECT secrets.id,
    secrets.name,
    secrets.description,
    secrets.secret,
        CASE
            WHEN (secrets.secret IS NULL) THEN NULL::text
            ELSE
            CASE
                WHEN (secrets.key_id IS NULL) THEN NULL::text
                ELSE convert_from(pgsodium.crypto_aead_det_decrypt(decode(secrets.secret, 'base64'::text), convert_to(((((secrets.id)::text || secrets.description) || (secrets.created_at)::text) || (secrets.updated_at)::text), 'utf8'::name), secrets.key_id, secrets.nonce), 'utf8'::name)
            END
        END AS decrypted_secret,
    secrets.key_id,
    secrets.nonce,
    secrets.created_at,
    secrets.updated_at
   FROM vault.secrets;


ALTER VIEW vault.decrypted_secrets OWNER TO supabase_admin;

--
-- Name: messages_2025_01_16; Type: TABLE ATTACH; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2025_01_16 FOR VALUES FROM ('2025-01-16 00:00:00') TO ('2025-01-17 00:00:00');


--
-- Name: messages_2025_01_17; Type: TABLE ATTACH; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2025_01_17 FOR VALUES FROM ('2025-01-17 00:00:00') TO ('2025-01-18 00:00:00');


--
-- Name: messages_2025_01_18; Type: TABLE ATTACH; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2025_01_18 FOR VALUES FROM ('2025-01-18 00:00:00') TO ('2025-01-19 00:00:00');


--
-- Name: messages_2025_01_19; Type: TABLE ATTACH; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2025_01_19 FOR VALUES FROM ('2025-01-19 00:00:00') TO ('2025-01-20 00:00:00');


--
-- Name: messages_2025_01_20; Type: TABLE ATTACH; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages ATTACH PARTITION realtime.messages_2025_01_20 FOR VALUES FROM ('2025-01-20 00:00:00') TO ('2025-01-21 00:00:00');


--
-- Name: refresh_tokens id; Type: DEFAULT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens ALTER COLUMN id SET DEFAULT nextval('auth.refresh_tokens_id_seq'::regclass);


--
-- Name: hooks id; Type: DEFAULT; Schema: supabase_functions; Owner: supabase_functions_admin
--

ALTER TABLE ONLY supabase_functions.hooks ALTER COLUMN id SET DEFAULT nextval('supabase_functions.hooks_id_seq'::regclass);


--
-- Data for Name: audit_log_entries; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.audit_log_entries (instance_id, id, payload, created_at, ip_address) FROM stdin;
00000000-0000-0000-0000-000000000000	a75f92a5-9b66-46bf-9b08-e814c14b9268	{"action":"user_confirmation_requested","actor_id":"8a451279-f41d-4be9-bd1c-f4aff94c43bd","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-01-12 04:22:26.112649+00	
00000000-0000-0000-0000-000000000000	7360a2cf-6137-4077-9797-f1e0074a1bc5	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"jeslleypires@gmail.com","user_id":"8a451279-f41d-4be9-bd1c-f4aff94c43bd","user_phone":""}}	2025-01-12 04:24:35.214152+00	
00000000-0000-0000-0000-000000000000	403982b2-1b5a-420a-8353-128bf6b8a596	{"action":"user_signedup","actor_id":"76993796-b7e4-4020-a8c2-bbac81bd50c3","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2025-01-12 04:30:08.108391+00	
00000000-0000-0000-0000-000000000000	d1ec6006-507e-4c9b-9e57-f8681f5ab561	{"action":"login","actor_id":"76993796-b7e4-4020-a8c2-bbac81bd50c3","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-12 04:30:08.11225+00	
00000000-0000-0000-0000-000000000000	4c3df99d-da5b-4fa2-b7bc-e4d608e21bf2	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"jeslleypires@gmail.com","user_id":"76993796-b7e4-4020-a8c2-bbac81bd50c3","user_phone":""}}	2025-01-12 04:32:07.244939+00	
00000000-0000-0000-0000-000000000000	62cff110-d5fc-4297-8be6-0e0a172c3819	{"action":"user_signedup","actor_id":"59976773-2576-4683-83f1-13872e9c5a59","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2025-01-12 04:32:34.693505+00	
00000000-0000-0000-0000-000000000000	aafd634a-9337-4d9b-9c0b-781727bc31d9	{"action":"login","actor_id":"59976773-2576-4683-83f1-13872e9c5a59","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-12 04:32:34.697026+00	
00000000-0000-0000-0000-000000000000	f1dbc484-e54c-4b84-b93e-39e6313b9de6	{"action":"user_signedup","actor_id":"d1686294-96b1-45a9-b84a-1f03014a4be0","actor_username":"jade@teste.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2025-01-12 04:39:33.326562+00	
00000000-0000-0000-0000-000000000000	3d854b00-3cae-4c43-8edc-938c6140e205	{"action":"login","actor_id":"d1686294-96b1-45a9-b84a-1f03014a4be0","actor_username":"jade@teste.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-12 04:39:33.33158+00	
00000000-0000-0000-0000-000000000000	c13ec73a-b280-42dc-b858-5a17036f5bb7	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"jeslleypires@gmail.com","user_id":"59976773-2576-4683-83f1-13872e9c5a59","user_phone":""}}	2025-01-12 04:40:48.21659+00	
00000000-0000-0000-0000-000000000000	fd551809-53f9-4368-8301-63c9ee5f1a1c	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"jade@teste.com","user_id":"d1686294-96b1-45a9-b84a-1f03014a4be0","user_phone":""}}	2025-01-12 04:40:48.224029+00	
00000000-0000-0000-0000-000000000000	b7ecd867-c33e-43db-89c7-c34c320f8f03	{"action":"user_signedup","actor_id":"8971e972-c2c6-4d06-9ad5-0d06df07f448","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2025-01-12 04:48:43.310671+00	
00000000-0000-0000-0000-000000000000	5bd73587-4cf1-43cb-bf13-664618edd300	{"action":"login","actor_id":"8971e972-c2c6-4d06-9ad5-0d06df07f448","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-12 04:48:43.315462+00	
00000000-0000-0000-0000-000000000000	a47bdc13-a323-4c55-b256-5920c4aa6edc	{"action":"login","actor_id":"8971e972-c2c6-4d06-9ad5-0d06df07f448","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-12 05:13:38.263308+00	
00000000-0000-0000-0000-000000000000	f0b5e3f2-024a-4869-9c67-8749cd0b1769	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"jeslleypires@gmail.com","user_id":"8971e972-c2c6-4d06-9ad5-0d06df07f448","user_phone":""}}	2025-01-12 14:14:39.134245+00	
00000000-0000-0000-0000-000000000000	006597d5-af38-4cf9-bd2b-03ed08830783	{"action":"user_signedup","actor_id":"02018cb9-9848-46bd-b158-380c0ff9e351","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2025-01-12 14:27:48.901481+00	
00000000-0000-0000-0000-000000000000	d36393e2-db5f-4f07-9a8d-c8bfdaa0e433	{"action":"login","actor_id":"02018cb9-9848-46bd-b158-380c0ff9e351","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-12 14:27:48.908619+00	
00000000-0000-0000-0000-000000000000	18a4d15b-7a1a-4dfc-9d87-38ccb315b90e	{"action":"user_signedup","actor_id":"87edf2aa-f396-4e27-8e79-dabec8af553b","actor_username":"francisco@taigostei.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2025-01-12 14:33:34.644293+00	
00000000-0000-0000-0000-000000000000	280d62f6-9a13-4e02-bcf8-4298799ce09a	{"action":"login","actor_id":"87edf2aa-f396-4e27-8e79-dabec8af553b","actor_username":"francisco@taigostei.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-12 14:33:34.649772+00	
00000000-0000-0000-0000-000000000000	d15e98fb-8d83-48ac-9538-17e4d3fd0b44	{"action":"logout","actor_id":"87edf2aa-f396-4e27-8e79-dabec8af553b","actor_username":"francisco@taigostei.com","actor_via_sso":false,"log_type":"account"}	2025-01-12 14:38:31.400008+00	
00000000-0000-0000-0000-000000000000	4d41887e-bc97-40f7-a53b-13f870bbd9d4	{"action":"user_signedup","actor_id":"5f037798-a1e5-45d0-8434-500c23426fe1","actor_username":"ana@taigostei.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2025-01-12 14:39:37.413363+00	
00000000-0000-0000-0000-000000000000	59863aed-f5f4-472f-99fb-44d8a6ea815b	{"action":"login","actor_id":"5f037798-a1e5-45d0-8434-500c23426fe1","actor_username":"ana@taigostei.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-12 14:39:37.418019+00	
00000000-0000-0000-0000-000000000000	327106bb-e053-4acc-970e-3b4702f3482a	{"action":"user_signedup","actor_id":"2f93f68a-e959-45b5-85c3-f71e1e4184fa","actor_username":"raquel@taigostei.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2025-01-12 14:40:36.324774+00	
00000000-0000-0000-0000-000000000000	69de1d69-109b-4a69-9db1-1e18f52335a3	{"action":"login","actor_id":"2f93f68a-e959-45b5-85c3-f71e1e4184fa","actor_username":"raquel@taigostei.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-12 14:40:36.327712+00	
00000000-0000-0000-0000-000000000000	091e97aa-4efb-4fe5-8da3-37a14693a411	{"action":"user_signedup","actor_id":"412bbdd9-69da-434f-90c8-28e77dbc4e64","actor_username":"laura@taigostei.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2025-01-12 15:14:53.804675+00	
00000000-0000-0000-0000-000000000000	ba38c97f-b776-4fa9-856d-08bf7bf55beb	{"action":"login","actor_id":"412bbdd9-69da-434f-90c8-28e77dbc4e64","actor_username":"laura@taigostei.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-12 15:14:53.810138+00	
00000000-0000-0000-0000-000000000000	76f531d2-e32a-4b1d-8b77-8957ae0f0cbe	{"action":"token_refreshed","actor_id":"5f037798-a1e5-45d0-8434-500c23426fe1","actor_username":"ana@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-12 15:39:05.84638+00	
00000000-0000-0000-0000-000000000000	48827615-ec24-4ad4-b6b4-70e2d98c487a	{"action":"token_revoked","actor_id":"5f037798-a1e5-45d0-8434-500c23426fe1","actor_username":"ana@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-12 15:39:05.851022+00	
00000000-0000-0000-0000-000000000000	c7673a49-30ff-45b6-b7ad-7b1f30fa8c1a	{"action":"token_refreshed","actor_id":"5f037798-a1e5-45d0-8434-500c23426fe1","actor_username":"ana@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-12 16:38:33.951128+00	
00000000-0000-0000-0000-000000000000	8393a5ae-ccbd-4c50-9439-fdd57a772139	{"action":"token_revoked","actor_id":"5f037798-a1e5-45d0-8434-500c23426fe1","actor_username":"ana@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-12 16:38:33.952669+00	
00000000-0000-0000-0000-000000000000	9f573b08-113d-4f08-a863-be6e3c16e669	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"raquel@taigostei.com","user_id":"2f93f68a-e959-45b5-85c3-f71e1e4184fa","user_phone":""}}	2025-01-12 17:26:24.80336+00	
00000000-0000-0000-0000-000000000000	6220c6cc-cac6-40d7-a015-a6b6c16953de	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"jeslleypires@gmail.com","user_id":"02018cb9-9848-46bd-b158-380c0ff9e351","user_phone":""}}	2025-01-12 17:26:24.805803+00	
00000000-0000-0000-0000-000000000000	4a8f7541-4c52-4965-8c5b-c3b6bb2c3cd4	{"action":"token_refreshed","actor_id":"5f037798-a1e5-45d0-8434-500c23426fe1","actor_username":"ana@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-12 17:39:51.737529+00	
00000000-0000-0000-0000-000000000000	d1fc5ec4-d404-4237-9c57-8b336ffa9528	{"action":"token_revoked","actor_id":"5f037798-a1e5-45d0-8434-500c23426fe1","actor_username":"ana@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-12 17:39:51.738982+00	
00000000-0000-0000-0000-000000000000	f9f7b532-808c-497e-84d4-10a9df1f5742	{"action":"login","actor_id":"87edf2aa-f396-4e27-8e79-dabec8af553b","actor_username":"francisco@taigostei.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-12 18:03:29.036421+00	
00000000-0000-0000-0000-000000000000	a79e8954-c9dc-43f3-b481-8b9a88517975	{"action":"token_refreshed","actor_id":"5f037798-a1e5-45d0-8434-500c23426fe1","actor_username":"ana@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-12 18:43:11.934186+00	
00000000-0000-0000-0000-000000000000	f02ef376-179e-4645-8e3b-7e1207a56fec	{"action":"token_revoked","actor_id":"5f037798-a1e5-45d0-8434-500c23426fe1","actor_username":"ana@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-12 18:43:11.936473+00	
00000000-0000-0000-0000-000000000000	bdfb77d9-5b1b-44df-89c4-39c75ab5526a	{"action":"token_refreshed","actor_id":"5f037798-a1e5-45d0-8434-500c23426fe1","actor_username":"ana@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-12 19:42:32.122688+00	
00000000-0000-0000-0000-000000000000	6df92982-3b7b-4810-86cd-50c17a3fe7c0	{"action":"token_revoked","actor_id":"5f037798-a1e5-45d0-8434-500c23426fe1","actor_username":"ana@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-12 19:42:32.124082+00	
00000000-0000-0000-0000-000000000000	168620e5-bb6c-440c-9fd3-352946e5e485	{"action":"token_refreshed","actor_id":"5f037798-a1e5-45d0-8434-500c23426fe1","actor_username":"ana@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-12 20:47:45.099937+00	
00000000-0000-0000-0000-000000000000	fd6a03a7-e49b-4f1d-b385-79f1878cd896	{"action":"token_revoked","actor_id":"5f037798-a1e5-45d0-8434-500c23426fe1","actor_username":"ana@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-12 20:47:45.103365+00	
00000000-0000-0000-0000-000000000000	f9b49609-a934-4e9a-817a-f2715680cf9e	{"action":"token_refreshed","actor_id":"5f037798-a1e5-45d0-8434-500c23426fe1","actor_username":"ana@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-12 22:41:09.798693+00	
00000000-0000-0000-0000-000000000000	5001560c-bc34-49ab-9c3a-adbbdffc3798	{"action":"token_revoked","actor_id":"5f037798-a1e5-45d0-8434-500c23426fe1","actor_username":"ana@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-12 22:41:09.800151+00	
00000000-0000-0000-0000-000000000000	3028092e-c07f-4b29-9ce7-02d2e704466e	{"action":"token_refreshed","actor_id":"5f037798-a1e5-45d0-8434-500c23426fe1","actor_username":"ana@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-12 23:40:33.078285+00	
00000000-0000-0000-0000-000000000000	376d6e9f-189a-44cf-930a-7c700acb5c38	{"action":"token_revoked","actor_id":"5f037798-a1e5-45d0-8434-500c23426fe1","actor_username":"ana@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-12 23:40:33.0792+00	
00000000-0000-0000-0000-000000000000	83c3cd31-e934-42c1-809e-a3a9d6ec5823	{"action":"token_refreshed","actor_id":"5f037798-a1e5-45d0-8434-500c23426fe1","actor_username":"ana@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-12 23:52:03.124824+00	
00000000-0000-0000-0000-000000000000	04eda446-4d9e-4338-ac08-183851ea7dfc	{"action":"token_refreshed","actor_id":"5f037798-a1e5-45d0-8434-500c23426fe1","actor_username":"ana@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-13 00:39:53.740361+00	
00000000-0000-0000-0000-000000000000	86ed6267-0a7e-4463-9075-0faa334c52b5	{"action":"token_revoked","actor_id":"5f037798-a1e5-45d0-8434-500c23426fe1","actor_username":"ana@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-13 00:39:53.741224+00	
00000000-0000-0000-0000-000000000000	1e4ea27d-11a5-43fe-9672-b1ae8ce15df5	{"action":"token_refreshed","actor_id":"5f037798-a1e5-45d0-8434-500c23426fe1","actor_username":"ana@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-13 00:51:36.590927+00	
00000000-0000-0000-0000-000000000000	668894a8-d034-4745-91db-2cf694694df6	{"action":"token_refreshed","actor_id":"5f037798-a1e5-45d0-8434-500c23426fe1","actor_username":"ana@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-13 03:21:32.912759+00	
00000000-0000-0000-0000-000000000000	4fcb22ab-d907-445c-b62a-5f8a3709df76	{"action":"token_revoked","actor_id":"5f037798-a1e5-45d0-8434-500c23426fe1","actor_username":"ana@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-13 03:21:32.937385+00	
00000000-0000-0000-0000-000000000000	42058d2e-9c69-4bcf-85b8-d1eedf48d101	{"action":"token_refreshed","actor_id":"5f037798-a1e5-45d0-8434-500c23426fe1","actor_username":"ana@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-13 03:35:58.140876+00	
00000000-0000-0000-0000-000000000000	4aa33e98-0d51-4da1-8f1f-96dfd6030c02	{"action":"token_refreshed","actor_id":"5f037798-a1e5-45d0-8434-500c23426fe1","actor_username":"ana@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-13 03:50:07.034249+00	
00000000-0000-0000-0000-000000000000	583ca8bb-05e7-40a6-8817-96d6f3a458e6	{"action":"login","actor_id":"87edf2aa-f396-4e27-8e79-dabec8af553b","actor_username":"francisco@taigostei.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-13 03:57:38.673015+00	
00000000-0000-0000-0000-000000000000	cfb25f6e-6612-4245-be44-ff12e7233989	{"action":"token_refreshed","actor_id":"87edf2aa-f396-4e27-8e79-dabec8af553b","actor_username":"francisco@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-13 04:57:30.756141+00	
00000000-0000-0000-0000-000000000000	870a4fdb-4f0b-40bf-bf30-35caab7bf647	{"action":"token_revoked","actor_id":"87edf2aa-f396-4e27-8e79-dabec8af553b","actor_username":"francisco@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-13 04:57:30.758176+00	
00000000-0000-0000-0000-000000000000	c9662ee1-abcc-4e8c-964c-bd895c696c31	{"action":"token_refreshed","actor_id":"87edf2aa-f396-4e27-8e79-dabec8af553b","actor_username":"francisco@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-13 07:06:18.807319+00	
00000000-0000-0000-0000-000000000000	d17eb4e7-d017-48f1-9955-745d35abd874	{"action":"token_revoked","actor_id":"87edf2aa-f396-4e27-8e79-dabec8af553b","actor_username":"francisco@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-13 07:06:18.821124+00	
00000000-0000-0000-0000-000000000000	4e30381e-19fb-40eb-9fea-b72ed2b92931	{"action":"token_refreshed","actor_id":"87edf2aa-f396-4e27-8e79-dabec8af553b","actor_username":"francisco@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-13 13:02:34.153946+00	
00000000-0000-0000-0000-000000000000	188a01ec-a869-48a5-acf9-137ca97a9d62	{"action":"token_revoked","actor_id":"87edf2aa-f396-4e27-8e79-dabec8af553b","actor_username":"francisco@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-13 13:02:34.156617+00	
00000000-0000-0000-0000-000000000000	c2997a33-026a-4bce-832c-ecb559d00cf1	{"action":"token_refreshed","actor_id":"87edf2aa-f396-4e27-8e79-dabec8af553b","actor_username":"francisco@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-13 14:02:56.465413+00	
00000000-0000-0000-0000-000000000000	e105649d-8a46-47b8-a98c-ae278c27815f	{"action":"token_revoked","actor_id":"87edf2aa-f396-4e27-8e79-dabec8af553b","actor_username":"francisco@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-13 14:02:56.47367+00	
00000000-0000-0000-0000-000000000000	863dc476-05a0-40ed-a29c-9b7ef370f7f0	{"action":"user_updated_password","actor_id":"87edf2aa-f396-4e27-8e79-dabec8af553b","actor_username":"francisco@taigostei.com","actor_via_sso":false,"log_type":"user"}	2025-01-13 14:03:16.814613+00	
00000000-0000-0000-0000-000000000000	b34136da-c063-40a6-9e65-71212f63cf2e	{"action":"user_modified","actor_id":"87edf2aa-f396-4e27-8e79-dabec8af553b","actor_username":"francisco@taigostei.com","actor_via_sso":false,"log_type":"user"}	2025-01-13 14:03:16.816526+00	
00000000-0000-0000-0000-000000000000	0e9cfd32-7c50-4d8f-b3c0-1781d8132481	{"action":"logout","actor_id":"87edf2aa-f396-4e27-8e79-dabec8af553b","actor_username":"francisco@taigostei.com","actor_via_sso":false,"log_type":"account"}	2025-01-13 14:03:33.087872+00	
00000000-0000-0000-0000-000000000000	49605cd3-1498-4dd2-afcb-724682470f6b	{"action":"login","actor_id":"87edf2aa-f396-4e27-8e79-dabec8af553b","actor_username":"francisco@taigostei.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-13 14:03:54.390453+00	
00000000-0000-0000-0000-000000000000	cd410e94-ebf5-4c73-82ad-907aeec0d183	{"action":"logout","actor_id":"87edf2aa-f396-4e27-8e79-dabec8af553b","actor_username":"francisco@taigostei.com","actor_via_sso":false,"log_type":"account"}	2025-01-13 14:03:57.272231+00	
00000000-0000-0000-0000-000000000000	43fbb0f4-4286-436d-b08e-0530f0061b84	{"action":"user_signedup","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2025-01-13 14:04:44.063689+00	
00000000-0000-0000-0000-000000000000	60b638d6-3c99-444c-bed0-01465e576fb5	{"action":"login","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-13 14:04:44.066617+00	
00000000-0000-0000-0000-000000000000	3e7908a5-c97a-4c79-9cad-26a72b58e90e	{"action":"user_repeated_signup","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-01-13 14:04:44.090481+00	
00000000-0000-0000-0000-000000000000	cdd8a705-7cc6-4606-9a99-b67c304fe9bc	{"action":"logout","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-01-13 14:05:47.73774+00	
00000000-0000-0000-0000-000000000000	ddfe17dd-54b7-4d27-86fe-4061cbd218a1	{"action":"token_refreshed","actor_id":"5f037798-a1e5-45d0-8434-500c23426fe1","actor_username":"ana@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-13 22:11:19.10245+00	
00000000-0000-0000-0000-000000000000	b782cdb4-b5e4-4b14-99bd-48345ad6bab3	{"action":"token_revoked","actor_id":"5f037798-a1e5-45d0-8434-500c23426fe1","actor_username":"ana@taigostei.com","actor_via_sso":false,"log_type":"token"}	2025-01-13 22:11:19.112794+00	
00000000-0000-0000-0000-000000000000	1c0483b5-3826-47f7-87a2-04823e4141ef	{"action":"logout","actor_id":"5f037798-a1e5-45d0-8434-500c23426fe1","actor_username":"ana@taigostei.com","actor_via_sso":false,"log_type":"account"}	2025-01-13 22:44:21.650746+00	
00000000-0000-0000-0000-000000000000	a8324b56-fbc3-49f7-84db-47a281826213	{"action":"login","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-13 23:34:04.567879+00	
00000000-0000-0000-0000-000000000000	3e4f7739-ebaf-4a82-a0a8-652b703e6263	{"action":"token_refreshed","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-14 06:56:32.52373+00	
00000000-0000-0000-0000-000000000000	05288388-2edc-46d7-8afe-d2052f3d3d82	{"action":"token_revoked","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-14 06:56:32.537979+00	
00000000-0000-0000-0000-000000000000	459aa76d-fc0a-43c4-9fad-fd43f7dabcf0	{"action":"login","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-14 14:14:06.940758+00	
00000000-0000-0000-0000-000000000000	6de7b368-a2c0-4d7c-8520-284d4e738896	{"action":"token_refreshed","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-14 15:46:30.858583+00	
00000000-0000-0000-0000-000000000000	996fadbd-c88a-4f51-b27c-abd464f98f54	{"action":"token_revoked","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-14 15:46:30.860836+00	
00000000-0000-0000-0000-000000000000	680fb977-dfaf-4da8-b86f-eaf2deb9cc4f	{"action":"token_refreshed","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-14 16:45:57.071661+00	
00000000-0000-0000-0000-000000000000	4d32dcb2-a199-4f7b-9807-7addfe3d0560	{"action":"token_revoked","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-14 16:45:57.072612+00	
00000000-0000-0000-0000-000000000000	3bb8b82a-8a70-4349-bf76-019bbc805a80	{"action":"token_refreshed","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-14 17:45:27.324522+00	
00000000-0000-0000-0000-000000000000	05c49237-6b78-4cee-9288-4c94de8bf26b	{"action":"token_revoked","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-14 17:45:27.376248+00	
00000000-0000-0000-0000-000000000000	2cb43091-4fd8-4886-ab03-3f859c582c0c	{"action":"token_refreshed","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-14 18:44:56.983774+00	
00000000-0000-0000-0000-000000000000	1069c112-c36b-497e-942b-55ac05781602	{"action":"token_revoked","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-14 18:44:56.986049+00	
00000000-0000-0000-0000-000000000000	284752e4-01ad-48e6-b2da-925c95381c7b	{"action":"token_refreshed","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-14 19:44:17.04955+00	
00000000-0000-0000-0000-000000000000	60c1f483-5eaf-4f1d-b9d2-3e377a25e098	{"action":"token_revoked","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-14 19:44:17.052322+00	
00000000-0000-0000-0000-000000000000	d2566fc0-7cb7-4b93-93cd-d2d119737c4f	{"action":"token_refreshed","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-14 20:43:47.026739+00	
00000000-0000-0000-0000-000000000000	cd41ce6c-5bf4-4d22-bc39-f5a3ea542ac4	{"action":"token_revoked","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-14 20:43:47.028163+00	
00000000-0000-0000-0000-000000000000	1dc68624-f842-4361-8f7c-2430f0e522de	{"action":"token_refreshed","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-14 21:43:17.016433+00	
00000000-0000-0000-0000-000000000000	40e326b4-3edf-4727-90be-02096ca7e295	{"action":"token_revoked","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-14 21:43:17.018485+00	
00000000-0000-0000-0000-000000000000	d85381f5-82df-4252-b082-cab9ec0485a7	{"action":"token_refreshed","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-14 23:49:40.248616+00	
00000000-0000-0000-0000-000000000000	00586afb-8623-4341-b6a1-d01f817e1b67	{"action":"token_revoked","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-14 23:49:40.249473+00	
00000000-0000-0000-0000-000000000000	8ed823bf-8a8c-4c45-b68a-b6d3294dfb20	{"action":"token_refreshed","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-15 05:37:13.455523+00	
00000000-0000-0000-0000-000000000000	4edf2520-5efa-44ba-9c63-15acf9011fc6	{"action":"token_revoked","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-15 05:37:13.456871+00	
00000000-0000-0000-0000-000000000000	fb731f6d-bccd-4e54-bf75-d06a1765d9e0	{"action":"token_refreshed","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-16 16:04:05.858086+00	
00000000-0000-0000-0000-000000000000	e65a17ca-5ba6-491d-8d6c-62f5a10905e1	{"action":"token_revoked","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-16 16:04:05.876838+00	
00000000-0000-0000-0000-000000000000	f5d84a89-7d5a-4558-bc27-fddec1ec57af	{"action":"login","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-16 16:08:34.934718+00	
00000000-0000-0000-0000-000000000000	b1666879-7619-413e-b4f4-06a520709149	{"action":"token_refreshed","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-16 17:11:45.362166+00	
00000000-0000-0000-0000-000000000000	e295902f-9fa9-42e0-a5b4-5a02574d1670	{"action":"token_revoked","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-16 17:11:45.364671+00	
00000000-0000-0000-0000-000000000000	fda6db8d-e2b5-4eac-8273-1d8809ef5ea4	{"action":"token_refreshed","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-16 19:52:48.539241+00	
00000000-0000-0000-0000-000000000000	141ea973-2f4e-4137-822c-3bf4bed02909	{"action":"token_revoked","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-16 19:52:48.541608+00	
00000000-0000-0000-0000-000000000000	6bf510d6-18d8-45ce-95fb-354f006ba8a3	{"action":"token_refreshed","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-16 20:52:19.287599+00	
00000000-0000-0000-0000-000000000000	2d9cef34-6190-411b-a024-a3441342f85d	{"action":"token_revoked","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-16 20:52:19.291703+00	
00000000-0000-0000-0000-000000000000	38eb11da-3676-422c-8f6a-908412d740c8	{"action":"login","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-16 22:00:40.302043+00	
00000000-0000-0000-0000-000000000000	04ffb8f7-b3c2-470e-b19d-b4fe9a1e12cd	{"action":"user_repeated_signup","actor_id":"9555f894-2fc6-4adb-9675-390fbd811a63","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-01-16 22:01:01.168124+00	
00000000-0000-0000-0000-000000000000	d24452b9-7e12-4133-b943-49a5f13702ab	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"jeslleypires@gmail.com","user_id":"9555f894-2fc6-4adb-9675-390fbd811a63","user_phone":""}}	2025-01-16 22:01:40.307739+00	
00000000-0000-0000-0000-000000000000	8a335e83-9053-4337-83a6-e1644459f860	{"action":"user_signedup","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2025-01-16 22:02:27.701535+00	
00000000-0000-0000-0000-000000000000	61ea96e0-8ae8-4dcc-8c26-a5574ea1c7c1	{"action":"login","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-16 22:02:27.715126+00	
00000000-0000-0000-0000-000000000000	3db4d478-1f8d-4c32-907f-4f56cf4f1472	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-17 01:08:13.934833+00	
00000000-0000-0000-0000-000000000000	185bf842-992a-4d88-ba1b-c32ce0519146	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-17 01:08:13.940752+00	
00000000-0000-0000-0000-000000000000	3edd8d27-ecdf-49ae-aa98-652745a31f72	{"action":"login","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-17 01:08:27.33858+00	
00000000-0000-0000-0000-000000000000	61bc005e-cd8f-40a5-b819-fbb8923140c8	{"action":"login","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-17 01:18:25.477926+00	
00000000-0000-0000-0000-000000000000	87fb6340-56bc-450a-8507-8414e7daba7b	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-17 03:06:22.819345+00	
00000000-0000-0000-0000-000000000000	9a528f56-9ad7-4f61-b06e-860569fda4cc	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-17 03:06:22.82119+00	
00000000-0000-0000-0000-000000000000	02dc17fa-0f2f-4629-b84e-63eed681a2e4	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-17 06:23:18.456355+00	
00000000-0000-0000-0000-000000000000	f5b537e3-e6f8-40fe-ab50-e9141542d6b3	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-17 06:23:18.473669+00	
00000000-0000-0000-0000-000000000000	e5af9c12-9ee7-4de8-afc7-89ed185c1168	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-17 07:23:35.879479+00	
00000000-0000-0000-0000-000000000000	a4337ef1-64c9-4afc-be2b-229e3ee505b7	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-17 07:23:35.892428+00	
00000000-0000-0000-0000-000000000000	32cdaef2-7c62-4bac-8fdd-598a1b64824b	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-17 13:36:10.405488+00	
00000000-0000-0000-0000-000000000000	6de7e8f0-7382-4527-ad90-491214f16e37	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-17 13:36:10.421913+00	
00000000-0000-0000-0000-000000000000	77e15330-c6d6-4f01-8bb9-a6dcc703ea04	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-17 14:43:46.185986+00	
00000000-0000-0000-0000-000000000000	5be807ba-5f57-4059-9f1e-56cd7aa7135b	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-17 14:43:46.192621+00	
00000000-0000-0000-0000-000000000000	9c82196a-8dc8-4533-859f-5546584a6fd8	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-17 15:55:19.280673+00	
00000000-0000-0000-0000-000000000000	72fb79fb-f580-4a8c-84c5-1ac9c1b666f4	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-17 15:55:19.281543+00	
00000000-0000-0000-0000-000000000000	96c4318c-1555-4ae5-8932-e5dab6fe3272	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-17 17:18:24.823196+00	
00000000-0000-0000-0000-000000000000	57135f75-76af-4f67-96dd-adba2827fdfb	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-17 17:18:24.825137+00	
00000000-0000-0000-0000-000000000000	2366e483-268a-437b-97db-5bd1ce2541dd	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-17 18:51:26.301825+00	
00000000-0000-0000-0000-000000000000	27ba03ac-38f0-4762-80d8-200245713c1e	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-17 18:51:26.303536+00	
00000000-0000-0000-0000-000000000000	ebdb6bda-fd0d-49e8-bdef-37e996639def	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-17 20:23:49.756576+00	
00000000-0000-0000-0000-000000000000	5c0d4f28-57c0-4120-b178-355f320bf9db	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-17 20:23:49.758649+00	
00000000-0000-0000-0000-000000000000	ffc0bc4c-58ad-4ac1-881c-579e541b7c21	{"action":"logout","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-01-17 20:23:54.714236+00	
00000000-0000-0000-0000-000000000000	8236e92f-0ae8-4903-bcd9-bacebb27ce1f	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-18 13:59:18.044924+00	
00000000-0000-0000-0000-000000000000	8f8bed6f-7b40-48c0-a51e-0b570039c17e	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-18 13:59:18.05954+00	
00000000-0000-0000-0000-000000000000	23a5a53a-abb4-468f-807b-c0fb20266e43	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-18 18:19:32.435903+00	
00000000-0000-0000-0000-000000000000	fbff31d9-8971-4311-b648-9c47fbb7e575	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-18 18:19:32.439609+00	
00000000-0000-0000-0000-000000000000	f2f8aa82-0efd-484a-ad06-415713311923	{"action":"login","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-18 19:00:41.835535+00	
00000000-0000-0000-0000-000000000000	d26d2845-a54a-4ed5-85b1-8d1dd73ff9f6	{"action":"login","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-18 19:00:42.353713+00	
00000000-0000-0000-0000-000000000000	07cc39e0-7e0f-447c-a2dd-a5195d7da94c	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-18 20:00:48.791654+00	
00000000-0000-0000-0000-000000000000	bbabd293-ce6f-4065-bc0b-cdef6934d10a	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-18 20:00:48.808429+00	
00000000-0000-0000-0000-000000000000	1d8aa70e-fcac-4854-b849-1608ba544671	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-18 22:30:51.394461+00	
00000000-0000-0000-0000-000000000000	dd37c84b-f049-4696-b209-c2e9183ecb73	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-18 22:30:51.397517+00	
00000000-0000-0000-0000-000000000000	ec9122e7-9ecb-4e0f-bd95-5330ca82b99f	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-18 23:32:47.952317+00	
00000000-0000-0000-0000-000000000000	b03ef1ba-1f2f-4ff8-a2a1-d5421b58042e	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-18 23:32:47.953893+00	
00000000-0000-0000-0000-000000000000	8c0041e7-6b11-40ea-ada7-a47809d1a087	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 00:52:07.290207+00	
00000000-0000-0000-0000-000000000000	fb7dc0bd-3a2c-4019-a090-e5f6b905544b	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 00:52:07.293725+00	
00000000-0000-0000-0000-000000000000	fd8b2aa8-e360-4d2a-8e18-6afeb824ead4	{"action":"login","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-19 00:53:40.165099+00	
00000000-0000-0000-0000-000000000000	9e7d5e9c-1b88-422b-8597-941a6741e396	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 00:58:08.733934+00	
00000000-0000-0000-0000-000000000000	94b22362-0e39-40b1-9350-afd7df0e94c2	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 00:58:08.735252+00	
00000000-0000-0000-0000-000000000000	c69b2501-23f0-40b4-8a8a-1fc24a812425	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 02:09:38.985948+00	
00000000-0000-0000-0000-000000000000	8a20f6eb-e476-425b-84ad-b103008a4285	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 02:09:38.988619+00	
00000000-0000-0000-0000-000000000000	d3dd7a0a-d6da-490a-957a-8c17146dacf3	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 03:40:20.974203+00	
00000000-0000-0000-0000-000000000000	de179d68-5b3c-4447-8662-f513e185604a	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 03:40:20.976131+00	
00000000-0000-0000-0000-000000000000	925ec1e1-bc9e-4724-ae53-41fd7a48527a	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 06:03:45.462418+00	
00000000-0000-0000-0000-000000000000	0940041b-10a0-4510-bf45-415a501c3594	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 06:03:45.512538+00	
00000000-0000-0000-0000-000000000000	a5d945bc-6940-4401-9720-847c9deb405a	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 06:33:03.236894+00	
00000000-0000-0000-0000-000000000000	d59c1d78-0ceb-4dd5-90a0-86c812f3981a	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 06:33:03.240347+00	
00000000-0000-0000-0000-000000000000	aca4656e-ac31-458e-8a5f-d659e5b926d1	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 07:09:41.285812+00	
00000000-0000-0000-0000-000000000000	36c84cf1-cde3-45a3-bc3c-bb5ed3424d20	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 07:09:41.287219+00	
00000000-0000-0000-0000-000000000000	ef4c2b42-64fc-4159-ace8-7facc1d8ef8e	{"action":"login","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-19 07:35:21.615013+00	
00000000-0000-0000-0000-000000000000	d9ef9d6e-4408-469e-97f9-1829b54e40b9	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 07:37:55.843617+00	
00000000-0000-0000-0000-000000000000	6b63178d-3192-45b5-ba86-66e5329310ca	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 07:37:55.844479+00	
00000000-0000-0000-0000-000000000000	3dbcb250-c517-42e2-827c-c356609930a0	{"action":"login","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-19 07:49:11.131881+00	
00000000-0000-0000-0000-000000000000	f2001015-7222-49d4-a7bd-8a0e9c65e92b	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 13:03:29.566141+00	
00000000-0000-0000-0000-000000000000	0d5d7c7d-38f5-45fc-b2ac-dac3c6227da7	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 13:03:29.577761+00	
00000000-0000-0000-0000-000000000000	e1f99887-46cc-4098-88e9-a00afafd8c53	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 13:25:21.452423+00	
00000000-0000-0000-0000-000000000000	8f05261d-9d3c-4b0b-823d-fe19a3fcd77a	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 13:25:21.454522+00	
00000000-0000-0000-0000-000000000000	3abe4edb-04a9-4caa-91ca-a5ccec11882c	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 14:16:30.317601+00	
00000000-0000-0000-0000-000000000000	93486ef1-4aba-4e12-bba2-0a4d7f8b71ea	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 14:16:30.335402+00	
00000000-0000-0000-0000-000000000000	ef369200-be31-45b7-8565-fb179ba255bd	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 16:58:52.160188+00	
00000000-0000-0000-0000-000000000000	63e6837e-0411-4a14-85b0-85bdc8ef37a0	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 16:58:52.17512+00	
00000000-0000-0000-0000-000000000000	903b2d5e-938f-435c-abd0-b9b5f36038a0	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 18:34:15.275332+00	
00000000-0000-0000-0000-000000000000	b65490ca-873b-4d2b-a5de-14e7109921cb	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 18:34:15.298738+00	
00000000-0000-0000-0000-000000000000	1e24f330-c026-4380-9c26-9fb69126862a	{"action":"login","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-19 19:18:46.232471+00	
00000000-0000-0000-0000-000000000000	2c7fc376-d72a-4832-bcec-83a9f00ed89f	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 20:16:56.955495+00	
00000000-0000-0000-0000-000000000000	27ad0668-55ae-4bca-9ab7-3daf0b8ef9f9	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 20:16:56.962196+00	
00000000-0000-0000-0000-000000000000	f979fdee-6295-46d0-8c5d-49917a0af525	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 20:28:31.365609+00	
00000000-0000-0000-0000-000000000000	42215ada-f1f8-47ec-9ab9-b0bb6d1dd0f0	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 20:28:31.377272+00	
00000000-0000-0000-0000-000000000000	ad1b6825-1aee-4a30-9228-2c039bae3a80	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 22:31:35.864777+00	
00000000-0000-0000-0000-000000000000	2b482ca3-6299-4043-a384-ee0499da8097	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-19 22:31:35.865765+00	
00000000-0000-0000-0000-000000000000	de3bfcdd-c919-4e12-a7a8-a00f0e5524e2	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-20 01:54:53.177472+00	
00000000-0000-0000-0000-000000000000	a2c5de26-4547-4eca-b450-182e04559488	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-20 01:54:53.180987+00	
00000000-0000-0000-0000-000000000000	81f0b105-62f3-45f9-b400-74b348c1378a	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-20 14:57:01.826211+00	
00000000-0000-0000-0000-000000000000	ed5c5b21-35bb-45a8-b0cd-f6df2d4e87ef	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-20 14:57:01.843498+00	
00000000-0000-0000-0000-000000000000	c299efaa-18d6-472c-9fdd-9111bb950807	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-20 17:30:07.323127+00	
00000000-0000-0000-0000-000000000000	b959aaf1-c7ad-4b83-86f8-549690d15b18	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-20 17:30:07.330964+00	
00000000-0000-0000-0000-000000000000	8e6f629d-0ea7-4040-bd12-aa7d5c620505	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-20 18:29:28.244418+00	
00000000-0000-0000-0000-000000000000	bbebd3a5-377c-402b-807b-2f3d86b93121	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-20 18:29:28.251606+00	
00000000-0000-0000-0000-000000000000	4098eebf-76dd-40fe-b8f1-71f4e866c19a	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-20 19:42:47.998295+00	
00000000-0000-0000-0000-000000000000	310d697a-54e2-4a71-a36f-d10e906daa48	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-20 19:42:48.00091+00	
00000000-0000-0000-0000-000000000000	31762653-45c9-4945-bbeb-a067d0a1cf03	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-20 20:42:18.416257+00	
00000000-0000-0000-0000-000000000000	db240417-1f11-4bdc-9274-c864baa088fa	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-20 20:42:18.418985+00	
00000000-0000-0000-0000-000000000000	94878980-0a09-48ba-9fdb-5ed4c764da10	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-22 00:59:48.079448+00	
00000000-0000-0000-0000-000000000000	797ec2ef-cb15-43e2-b1a8-8813b4ab5505	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-22 00:59:48.118132+00	
00000000-0000-0000-0000-000000000000	07342a76-18ea-4113-a0bf-5b0df3812c8f	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-22 18:54:34.761922+00	
00000000-0000-0000-0000-000000000000	344e4b03-5bf9-460e-938e-d41eff25081c	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-22 18:54:34.778867+00	
00000000-0000-0000-0000-000000000000	0c9e8cee-852d-462f-a4ea-eca7e0f7b59e	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-23 01:36:20.088489+00	
00000000-0000-0000-0000-000000000000	b5ce173b-fea6-40f3-9471-1257d0f736e6	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-23 01:36:20.089365+00	
00000000-0000-0000-0000-000000000000	de196498-0456-4c1c-b3f6-984df5434bc4	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-24 00:50:29.239999+00	
00000000-0000-0000-0000-000000000000	81149b1f-5476-4ce3-98b7-449f257710fc	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-24 00:50:29.251454+00	
00000000-0000-0000-0000-000000000000	270875b0-f08c-40cf-ad2f-64716b21c16e	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-24 02:04:42.080885+00	
00000000-0000-0000-0000-000000000000	857e17ca-f926-4290-b9a8-b3bc835081a4	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-24 02:04:42.092736+00	
00000000-0000-0000-0000-000000000000	ccdc884a-7c09-47e6-9932-c38845a22e28	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-24 03:46:05.988963+00	
00000000-0000-0000-0000-000000000000	1dae5483-5492-4fb7-b8e0-343bfe3db708	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-24 03:46:05.991+00	
00000000-0000-0000-0000-000000000000	e810c610-f3c9-4676-ba06-8c879c5493d0	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-24 04:48:48.091238+00	
00000000-0000-0000-0000-000000000000	2f848072-aada-4811-9db1-86a753f994c9	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-24 04:48:48.095099+00	
00000000-0000-0000-0000-000000000000	35f91dcb-5005-408f-9b05-530acebc62dc	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-24 14:19:45.619805+00	
00000000-0000-0000-0000-000000000000	4c0e753d-fdc9-4d07-8655-1b79244aa556	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-24 14:19:45.632885+00	
00000000-0000-0000-0000-000000000000	500133a8-35db-4a49-bc70-e902a97964b1	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-24 15:57:29.894648+00	
00000000-0000-0000-0000-000000000000	dc944cf1-29a9-48d7-9e9e-1abfc545c38d	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-24 15:57:29.903003+00	
00000000-0000-0000-0000-000000000000	c910da55-7326-4097-9fa8-f5b50a1a4677	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-24 17:00:38.754372+00	
00000000-0000-0000-0000-000000000000	cada8ec2-fe63-4e8e-8b26-2df9ba0aa622	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-24 17:00:38.761396+00	
00000000-0000-0000-0000-000000000000	e3f053ff-206d-4d09-92cc-68b03a1e6050	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-24 18:58:02.038922+00	
00000000-0000-0000-0000-000000000000	0ac2014f-2c76-44e2-99a3-6df5d1a585fa	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-24 18:58:02.041362+00	
00000000-0000-0000-0000-000000000000	57790543-d670-4817-ac8d-24762e0db018	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-24 20:00:23.369103+00	
00000000-0000-0000-0000-000000000000	26d205dd-e7d1-4c2a-81c7-32dafdbd06ec	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-24 20:00:23.372798+00	
00000000-0000-0000-0000-000000000000	bf80181b-bdbb-4523-84fa-7ac5e614940e	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-24 21:01:24.212582+00	
00000000-0000-0000-0000-000000000000	013d5745-5e34-4082-82af-cd80e8e567d8	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-24 21:01:24.21543+00	
00000000-0000-0000-0000-000000000000	e5effdc9-8a3f-4789-ad09-99ef326f29d0	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-24 22:03:11.164087+00	
00000000-0000-0000-0000-000000000000	3890753a-3512-41f6-b522-0a5a4f3aa8a3	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-24 22:03:11.168405+00	
00000000-0000-0000-0000-000000000000	fa334cf9-8a51-40d0-bf31-16a9fa1e513d	{"action":"login","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-24 22:39:31.091242+00	
00000000-0000-0000-0000-000000000000	986f7342-9afb-4167-b144-6a037b5ee10d	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-24 23:18:21.545917+00	
00000000-0000-0000-0000-000000000000	b43c6219-f13e-4ba8-bf8d-e065dd1d3185	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-24 23:18:21.548727+00	
00000000-0000-0000-0000-000000000000	b659144f-bfb4-48de-b78f-05ab42a227c3	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-25 00:21:07.144368+00	
00000000-0000-0000-0000-000000000000	5f1b2460-5d31-4f4e-96cb-416f0cd64ce0	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-25 00:21:07.152429+00	
00000000-0000-0000-0000-000000000000	fc83684c-661d-4086-9337-f1504b807a2d	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-25 01:27:19.660549+00	
00000000-0000-0000-0000-000000000000	47007d42-c70d-49b1-a9c1-2f65182f7a24	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-25 01:27:19.664494+00	
00000000-0000-0000-0000-000000000000	72162208-6c88-47d2-954d-164c24705138	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-25 02:30:19.39112+00	
00000000-0000-0000-0000-000000000000	230303a3-473d-4ced-8d91-9276c036f76b	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-25 02:30:19.393605+00	
00000000-0000-0000-0000-000000000000	d819a3bc-1d55-4a69-b4fc-00ac0da0a568	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-25 03:31:22.446117+00	
00000000-0000-0000-0000-000000000000	0e230bc6-bc09-49d8-b687-f25eb4e19f41	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-25 03:31:22.449962+00	
00000000-0000-0000-0000-000000000000	5ef57ba2-54e5-47fe-ba3e-859cde4f27ba	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-25 04:36:04.971447+00	
00000000-0000-0000-0000-000000000000	d315ba5b-2bc1-4120-94a3-9f70a01dd20a	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-25 04:36:04.973546+00	
00000000-0000-0000-0000-000000000000	174e11aa-effb-429e-95f9-da629dcf76bb	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-25 14:28:05.451826+00	
00000000-0000-0000-0000-000000000000	5bef1986-16e4-442a-a820-4a1c7a07ea6f	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-25 14:28:05.460087+00	
00000000-0000-0000-0000-000000000000	8bcf8d56-77a6-4641-bdcc-91317b6fcf3f	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-25 15:28:23.209515+00	
00000000-0000-0000-0000-000000000000	7c951dd9-fd00-41be-b424-fb4625c19671	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-25 15:28:23.212537+00	
00000000-0000-0000-0000-000000000000	df7e2a62-7f25-48d1-a96d-d26f4fa8f4de	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-25 16:31:24.04316+00	
00000000-0000-0000-0000-000000000000	9a60deef-5994-4f1c-a0f0-21cd220b85f3	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-25 16:31:24.045708+00	
00000000-0000-0000-0000-000000000000	1e82f1eb-c3a1-4e3b-a8ac-309194c98706	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-25 17:31:06.755847+00	
00000000-0000-0000-0000-000000000000	d53a9312-5ac0-41c1-887b-03f6c4ff6541	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-25 17:31:06.759396+00	
00000000-0000-0000-0000-000000000000	6a245fe1-a80f-4e87-9467-ea5814d3f49f	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-25 19:12:11.211891+00	
00000000-0000-0000-0000-000000000000	b87406a8-fba6-4d84-8cbf-22f9e88f586d	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-25 19:12:11.213355+00	
00000000-0000-0000-0000-000000000000	7e40a203-8c48-435f-a148-37877526dcf0	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-25 20:12:07.155409+00	
00000000-0000-0000-0000-000000000000	f96fa783-24b4-40e4-931a-07756e04bd82	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-25 20:12:07.158377+00	
00000000-0000-0000-0000-000000000000	b9ec1c69-2f12-449b-9200-be33d31de92d	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-25 21:11:27.530586+00	
00000000-0000-0000-0000-000000000000	8848016a-bc80-48d1-8d1d-ff38e322c9ed	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-25 21:11:27.534607+00	
00000000-0000-0000-0000-000000000000	282bf904-265d-4db0-bdfa-1d8f9257e99f	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-25 22:11:59.576686+00	
00000000-0000-0000-0000-000000000000	da68f677-d9a6-4f4b-a3c5-046600256980	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-25 22:11:59.579848+00	
00000000-0000-0000-0000-000000000000	9d6972d7-5310-492a-bb84-cf3ec47f4106	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-26 19:47:06.962667+00	
00000000-0000-0000-0000-000000000000	3ed881ce-1671-4774-af9e-cd20fb0c8adf	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-26 19:47:06.97622+00	
00000000-0000-0000-0000-000000000000	12fa354e-752e-4a06-9392-a7813612ec2a	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-26 20:52:17.942719+00	
00000000-0000-0000-0000-000000000000	2ff1c669-f2d9-4a7e-990e-296f4814177b	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-26 20:52:17.951795+00	
00000000-0000-0000-0000-000000000000	7c3ec166-db9b-4460-9a32-eeb6780db518	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-26 23:14:55.986871+00	
00000000-0000-0000-0000-000000000000	8dd95617-5896-43c3-8cc2-e21a505a8ac7	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-26 23:14:55.993213+00	
00000000-0000-0000-0000-000000000000	a6fee8c9-5c23-4a65-8790-bfd9821f1cc1	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 00:19:11.700335+00	
00000000-0000-0000-0000-000000000000	0793b463-a717-4af9-9913-a298f7ec4aa9	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 00:19:11.710027+00	
00000000-0000-0000-0000-000000000000	14f9c581-15f0-4d97-b9bc-599f059a635f	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 01:18:39.809597+00	
00000000-0000-0000-0000-000000000000	2a755c41-bea5-4133-bf2f-053cc28a5213	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 01:18:39.814021+00	
00000000-0000-0000-0000-000000000000	cba56176-5aab-4f0a-a990-90d2f3f64edf	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 02:25:21.101878+00	
00000000-0000-0000-0000-000000000000	7efdbc4c-6dc7-4618-b57f-8d56bebfa345	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 02:25:21.108961+00	
00000000-0000-0000-0000-000000000000	9c29cab7-4c12-4e0c-a800-f3e8add95f9e	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 02:26:49.977177+00	
00000000-0000-0000-0000-000000000000	b7a59544-9195-425e-9099-32f31c3c513a	{"action":"login","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-27 03:06:58.65329+00	
00000000-0000-0000-0000-000000000000	07d443e5-619c-44c8-a068-5036f7d69f73	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 03:26:12.427068+00	
00000000-0000-0000-0000-000000000000	4b6bac78-928d-44f9-96a8-99d75f454c7d	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 03:26:12.430278+00	
00000000-0000-0000-0000-000000000000	2c18005e-6778-4bd6-8e1a-ee65621c50dc	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 04:08:45.831117+00	
00000000-0000-0000-0000-000000000000	de06188b-4ef6-4ae8-af9c-70d1bf1d2639	{"action":"login","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-27 04:24:29.032517+00	
00000000-0000-0000-0000-000000000000	3338cb74-3651-4dab-9793-d9207035ef0f	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 05:27:47.345929+00	
00000000-0000-0000-0000-000000000000	ccb7fa80-658e-454a-9400-64be0a7839cd	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 05:27:47.359048+00	
00000000-0000-0000-0000-000000000000	3e13691d-ba66-45f5-b955-a7490a57dfee	{"action":"user_signedup","actor_id":"7dcc4a77-218a-440f-9f3b-a5fd37f74508","actor_username":"sdiksoftwares@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2025-01-27 09:25:59.529919+00	
00000000-0000-0000-0000-000000000000	92de121d-5780-40a7-8afb-e537b41f9417	{"action":"login","actor_id":"7dcc4a77-218a-440f-9f3b-a5fd37f74508","actor_username":"sdiksoftwares@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-27 09:25:59.559763+00	
00000000-0000-0000-0000-000000000000	c2be9dc8-5514-472d-a671-d970d6c13a63	{"action":"user_repeated_signup","actor_id":"7dcc4a77-218a-440f-9f3b-a5fd37f74508","actor_username":"sdiksoftwares@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-01-27 09:26:00.891335+00	
00000000-0000-0000-0000-000000000000	f53ef6fa-567b-4c3d-be91-3896b6a9c6c4	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 10:51:12.854392+00	
00000000-0000-0000-0000-000000000000	2c93c5a5-7446-4b18-a753-bfbda96e85b1	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 10:51:12.857159+00	
00000000-0000-0000-0000-000000000000	fb9796ad-0057-4d9d-9ee9-9c91b83478be	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 11:50:41.562065+00	
00000000-0000-0000-0000-000000000000	d81baebd-20f7-4cb7-a2c3-691503ccdd67	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 11:50:41.56498+00	
00000000-0000-0000-0000-000000000000	f5250944-70a6-4c04-a535-5ea882d2ea15	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 13:29:17.343466+00	
00000000-0000-0000-0000-000000000000	d6204b6d-32b8-480f-80bb-ace04d1a1ccf	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 13:29:17.34981+00	
00000000-0000-0000-0000-000000000000	aa4361bf-0cff-40a5-959f-e6e75cbd4a16	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 14:39:22.437391+00	
00000000-0000-0000-0000-000000000000	a98bf7ed-f609-4f87-8dee-fe245ddb7b67	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 14:39:22.440711+00	
00000000-0000-0000-0000-000000000000	24d1cb4b-e22e-415e-82a6-3ec3e1407747	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 15:38:49.197061+00	
00000000-0000-0000-0000-000000000000	aab70f62-6772-4770-83b0-fe09fd197c60	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 15:38:49.206856+00	
00000000-0000-0000-0000-000000000000	c40dfba6-3655-461a-b9d2-984a2d4ba359	{"action":"login","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-27 16:23:30.683215+00	
00000000-0000-0000-0000-000000000000	59a35424-ff2f-44b0-bda6-766254ed8cbf	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 16:42:50.194623+00	
00000000-0000-0000-0000-000000000000	4776bcc9-2c2c-47a9-b160-5f994bda87cb	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 16:42:50.200546+00	
00000000-0000-0000-0000-000000000000	81ebd7b2-6ad9-4546-b3f5-f91de47fac92	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 17:50:56.024281+00	
00000000-0000-0000-0000-000000000000	c85898a3-1d32-4a2b-be33-2335b1b37f62	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 17:50:56.030277+00	
00000000-0000-0000-0000-000000000000	16c83e4a-9e68-4d06-a36f-e350393814d6	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 18:33:29.859023+00	
00000000-0000-0000-0000-000000000000	0494ad06-5197-499b-8fac-344a2dad8510	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 18:33:29.861773+00	
00000000-0000-0000-0000-000000000000	c7fc7450-5a5b-4b7d-9130-4378d559ec7c	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 18:50:25.026932+00	
00000000-0000-0000-0000-000000000000	9cd5f51a-475f-415e-b053-c95a6dd42225	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 18:50:25.029627+00	
00000000-0000-0000-0000-000000000000	c951947a-0f52-4047-a252-2b7a12a7dd13	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 19:38:48.071991+00	
00000000-0000-0000-0000-000000000000	64945cad-437d-4f06-a4cd-d4356bf0bdee	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 19:38:48.07559+00	
00000000-0000-0000-0000-000000000000	62fd3594-9ed5-45af-b3ac-b59841fba290	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 19:49:53.33995+00	
00000000-0000-0000-0000-000000000000	ffc9fcdf-bd00-4bf5-ae8c-7b9854543ed6	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 19:49:53.342531+00	
00000000-0000-0000-0000-000000000000	41cc13ee-17e7-49cb-83ce-3766a583d9e5	{"action":"login","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-27 19:54:59.154164+00	
00000000-0000-0000-0000-000000000000	35a646ff-4815-46de-bd3f-abbfb6c8ab40	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 21:35:13.666942+00	
00000000-0000-0000-0000-000000000000	b80d3088-1225-4904-a9a5-b754b5802933	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-27 21:35:13.669761+00	
00000000-0000-0000-0000-000000000000	c4154849-7d85-4a89-82fb-59faf227b3cb	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-28 01:56:09.54394+00	
00000000-0000-0000-0000-000000000000	8a6f25e4-9006-4972-8bca-c21e64c2a810	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-28 01:56:09.553897+00	
00000000-0000-0000-0000-000000000000	6f478164-2193-42cd-8d8e-3eac4645b83a	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-28 01:58:48.564484+00	
00000000-0000-0000-0000-000000000000	c17e3943-98bd-41b7-8048-38419f47c762	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-28 01:58:48.569412+00	
00000000-0000-0000-0000-000000000000	c429637a-7632-4bca-9ada-8df01bce5453	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-28 03:20:19.653335+00	
00000000-0000-0000-0000-000000000000	f328e4fe-84fb-48e4-b4b6-403ae04e8d4e	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-28 03:20:19.666071+00	
00000000-0000-0000-0000-000000000000	6209b94e-4b9e-46fe-8bd8-4a8297b366a0	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-28 03:21:23.574371+00	
00000000-0000-0000-0000-000000000000	81eec894-28c1-48a5-9b24-c22417c49869	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-28 03:21:23.576856+00	
00000000-0000-0000-0000-000000000000	260feae0-b76c-493c-b01b-60055d096cae	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-28 04:27:17.980112+00	
00000000-0000-0000-0000-000000000000	103d7542-dfef-4a53-b814-9385ae4287ef	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-28 04:27:17.986904+00	
00000000-0000-0000-0000-000000000000	240e7013-9e5c-40b5-8d2c-39a6ae1087af	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-28 05:27:33.932174+00	
00000000-0000-0000-0000-000000000000	ba8088f5-4b92-465b-b137-3cbb7301194e	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-28 05:27:33.936855+00	
00000000-0000-0000-0000-000000000000	f57ddaef-0186-487d-9dd8-8b9ec3bbd74b	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-28 06:33:56.444532+00	
00000000-0000-0000-0000-000000000000	32d81801-3422-4cc8-bdac-14f8abf888c6	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-28 06:33:56.455027+00	
00000000-0000-0000-0000-000000000000	4852e44b-1d4b-4351-82bf-9033d1278d40	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-28 07:35:41.569698+00	
00000000-0000-0000-0000-000000000000	0a709fcf-016e-4b5d-90a8-873997351576	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-28 07:35:41.576129+00	
00000000-0000-0000-0000-000000000000	ce35b2fa-e871-4c1e-9481-04292671e640	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-28 15:37:58.078892+00	
00000000-0000-0000-0000-000000000000	b67070ae-4186-40db-8273-668e870a83c5	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-28 15:37:58.09651+00	
00000000-0000-0000-0000-000000000000	467d14c7-0133-4b50-ad4a-cce8514bc9c8	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-28 18:02:46.084923+00	
00000000-0000-0000-0000-000000000000	38c549cd-1ea1-4f30-a5df-368e91aef7dd	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-28 18:02:46.087875+00	
00000000-0000-0000-0000-000000000000	9b5c0f2a-a00f-4ec7-895d-6f9fb750b834	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-29 04:22:38.318853+00	
00000000-0000-0000-0000-000000000000	31c29927-5c60-4141-a2c5-ea2b5826d29a	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-29 04:22:38.333021+00	
00000000-0000-0000-0000-000000000000	9fcf2ff7-2661-4005-b519-2424aa571992	{"action":"user_signedup","actor_id":"750bc03a-f035-4880-984f-5b8bd12758c1","actor_username":"aleixo_ferreira@hotmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2025-01-29 04:36:50.320816+00	
00000000-0000-0000-0000-000000000000	1bda6768-beb7-4d20-84d1-f42902a5da2b	{"action":"login","actor_id":"750bc03a-f035-4880-984f-5b8bd12758c1","actor_username":"aleixo_ferreira@hotmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-29 04:36:50.327296+00	
00000000-0000-0000-0000-000000000000	68ccc86d-e835-43ce-91fc-faa0df9adf5f	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-29 05:35:04.876325+00	
00000000-0000-0000-0000-000000000000	9f38a111-a31d-421a-85b9-2b877c2e3bac	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-29 05:35:04.88204+00	
00000000-0000-0000-0000-000000000000	c95a4c3f-ffe2-4807-a224-e4eb8264d667	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-29 07:10:02.770309+00	
00000000-0000-0000-0000-000000000000	e31413c5-3750-483e-a8be-369b516f131e	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-29 07:10:02.793732+00	
00000000-0000-0000-0000-000000000000	4c4ddd22-fc25-42a7-95c7-bcda4d351b4b	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-29 08:10:32.664331+00	
00000000-0000-0000-0000-000000000000	882ade79-7f77-4a82-adff-369b70794d3e	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-29 08:10:32.670438+00	
00000000-0000-0000-0000-000000000000	3ca54485-6b18-41eb-8764-c6d25c833625	{"action":"login","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-29 09:07:30.041048+00	
00000000-0000-0000-0000-000000000000	af436eb6-9cce-4a70-b093-79d2f3a0e14c	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-29 10:14:08.573374+00	
00000000-0000-0000-0000-000000000000	58386e9e-1494-4b3b-8677-20599becc7fc	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-29 10:14:08.575235+00	
00000000-0000-0000-0000-000000000000	15d5fe1e-01e9-4b43-8c40-f861535eb950	{"action":"logout","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-01-29 10:14:11.173186+00	
00000000-0000-0000-0000-000000000000	80dc83fa-8ba6-4089-9f68-2010c8e75cb4	{"action":"login","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-01-29 10:15:51.841055+00	
00000000-0000-0000-0000-000000000000	6f87d31c-7b5b-46b3-ac96-0f27f7530fd0	{"action":"token_refreshed","actor_id":"7dcc4a77-218a-440f-9f3b-a5fd37f74508","actor_username":"sdiksoftwares@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-29 10:42:25.707796+00	
00000000-0000-0000-0000-000000000000	722297cc-57fe-4656-bd0a-4582af25ab6d	{"action":"token_revoked","actor_id":"7dcc4a77-218a-440f-9f3b-a5fd37f74508","actor_username":"sdiksoftwares@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-29 10:42:25.709699+00	
00000000-0000-0000-0000-000000000000	2994ca37-8d6d-40a4-9b1a-5a91d77b2de8	{"action":"user_repeated_signup","actor_id":"7dcc4a77-218a-440f-9f3b-a5fd37f74508","actor_username":"sdiksoftwares@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-01-29 10:42:58.292222+00	
00000000-0000-0000-0000-000000000000	a2b310f3-0961-4c0b-ba52-b1225eaa7d7e	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-29 11:56:29.455083+00	
00000000-0000-0000-0000-000000000000	49e1d0f1-fc9e-412b-9222-c745022c0efc	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-29 11:56:29.473656+00	
00000000-0000-0000-0000-000000000000	a35282a1-4259-4666-8542-f7f24042a278	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-29 11:57:55.372115+00	
00000000-0000-0000-0000-000000000000	c1df70b6-43af-4515-8104-9d9168d36672	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-29 11:57:55.375234+00	
00000000-0000-0000-0000-000000000000	bcbe1eb3-3ea3-4aae-9348-bad65daf19e1	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-29 13:03:16.385428+00	
00000000-0000-0000-0000-000000000000	8446f546-21f6-4cc2-8e20-48557a86c125	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-29 13:03:16.3892+00	
00000000-0000-0000-0000-000000000000	39b933f3-15c2-4d90-9ee8-a7809da55c88	{"action":"token_refreshed","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-29 20:03:57.744135+00	
00000000-0000-0000-0000-000000000000	69d2b00e-4a24-4929-8f90-38138285b742	{"action":"token_revoked","actor_id":"4bc8ec52-7b9c-42fa-889f-90f3b96f21bf","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-01-29 20:03:57.759496+00	
\.


--
-- Data for Name: flow_state; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.flow_state (id, user_id, auth_code, code_challenge_method, code_challenge, provider_type, provider_access_token, provider_refresh_token, created_at, updated_at, authentication_method, auth_code_issued_at) FROM stdin;
\.


--
-- Data for Name: identities; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.identities (provider_id, user_id, identity_data, provider, last_sign_in_at, created_at, updated_at, id) FROM stdin;
87edf2aa-f396-4e27-8e79-dabec8af553b	87edf2aa-f396-4e27-8e79-dabec8af553b	{"sub": "87edf2aa-f396-4e27-8e79-dabec8af553b", "email": "francisco@taigostei.com", "email_verified": false, "phone_verified": false}	email	2025-01-12 14:33:34.64039+00	2025-01-12 14:33:34.640442+00	2025-01-12 14:33:34.640442+00	4dd52de5-3798-417e-a757-176bd849ec92
5f037798-a1e5-45d0-8434-500c23426fe1	5f037798-a1e5-45d0-8434-500c23426fe1	{"sub": "5f037798-a1e5-45d0-8434-500c23426fe1", "email": "ana@taigostei.com", "email_verified": false, "phone_verified": false}	email	2025-01-12 14:39:37.409094+00	2025-01-12 14:39:37.409677+00	2025-01-12 14:39:37.409677+00	b5cef327-29b4-4285-86ee-22347ca255db
412bbdd9-69da-434f-90c8-28e77dbc4e64	412bbdd9-69da-434f-90c8-28e77dbc4e64	{"sub": "412bbdd9-69da-434f-90c8-28e77dbc4e64", "email": "laura@taigostei.com", "email_verified": false, "phone_verified": false}	email	2025-01-12 15:14:53.801119+00	2025-01-12 15:14:53.801168+00	2025-01-12 15:14:53.801168+00	905b65a9-345b-4754-9eb5-1a16555fc9fa
4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	{"sub": "4bc8ec52-7b9c-42fa-889f-90f3b96f21bf", "email": "jeslleypires@gmail.com", "email_verified": false, "phone_verified": false}	email	2025-01-16 22:02:27.698302+00	2025-01-16 22:02:27.698365+00	2025-01-16 22:02:27.698365+00	deae4086-c9c4-42e1-8093-01b92d8b42f7
7dcc4a77-218a-440f-9f3b-a5fd37f74508	7dcc4a77-218a-440f-9f3b-a5fd37f74508	{"sub": "7dcc4a77-218a-440f-9f3b-a5fd37f74508", "email": "sdiksoftwares@gmail.com", "email_verified": false, "phone_verified": false}	email	2025-01-27 09:25:59.514993+00	2025-01-27 09:25:59.51505+00	2025-01-27 09:25:59.51505+00	0088a633-dd64-4e1a-b19d-766c78475129
750bc03a-f035-4880-984f-5b8bd12758c1	750bc03a-f035-4880-984f-5b8bd12758c1	{"sub": "750bc03a-f035-4880-984f-5b8bd12758c1", "email": "aleixo_ferreira@hotmail.com", "email_verified": false, "phone_verified": false}	email	2025-01-29 04:36:50.315339+00	2025-01-29 04:36:50.315392+00	2025-01-29 04:36:50.315392+00	1599fef4-bb10-43de-8196-dcc7e9657a31
\.


--
-- Data for Name: instances; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.instances (id, uuid, raw_base_config, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: mfa_amr_claims; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_amr_claims (session_id, created_at, updated_at, authentication_method, id) FROM stdin;
fd1577cd-945b-48a5-ba53-7e3f404eae1d	2025-01-12 15:14:53.8152+00	2025-01-12 15:14:53.8152+00	password	a99f58ad-b7d5-4d24-8e65-c36fede2e10a
6d86641c-887a-445d-8947-877eadfac4bf	2025-01-16 22:02:27.717695+00	2025-01-16 22:02:27.717695+00	password	5e2f8411-84a3-4682-ac68-8c2bcbf4479c
146d0f6a-0121-4ffa-b940-48750bb3cb81	2025-01-17 01:18:25.48613+00	2025-01-17 01:18:25.48613+00	password	f66d1a90-a4f0-4933-a5dd-0cf99c0d0f1f
59921c0e-3b92-49e9-b9f5-f452dfa08eb3	2025-01-18 19:00:41.866649+00	2025-01-18 19:00:41.866649+00	password	82c8a915-c2df-4797-87d0-c6b595c541fa
f7b8cb6b-b2f1-4ea7-9e62-fba30850543c	2025-01-18 19:00:42.356341+00	2025-01-18 19:00:42.356341+00	password	aa529628-7e57-4784-9eb3-77797efc0e70
b6ce5c11-94f3-41b2-84ef-dbaf8a76010a	2025-01-19 00:53:40.178212+00	2025-01-19 00:53:40.178212+00	password	0c417a09-0afd-46fd-9473-9734985f5729
4b925ace-139b-4cee-bbe7-e99a0d8b8be2	2025-01-19 07:35:21.629693+00	2025-01-19 07:35:21.629693+00	password	d8dfef09-d632-4fb4-a610-ef9ecfcfeef1
570fb1a1-a337-4bd5-b084-b8af5ae559ae	2025-01-19 07:49:11.13941+00	2025-01-19 07:49:11.13941+00	password	f6222831-e9c4-49ff-a56c-5aa7799c0431
86cf8e56-eec3-4083-8e0e-ed04c90c58bc	2025-01-19 19:18:46.256439+00	2025-01-19 19:18:46.256439+00	password	51dbae3d-493d-4e9c-9e7d-05bf4d4b74a0
5d69fb74-2988-4c15-9b05-974afb8a621a	2025-01-24 22:39:31.112118+00	2025-01-24 22:39:31.112118+00	password	2e8cf506-7f0e-48fb-9d73-114d5b235a08
f83a64ac-c1ea-4125-9019-6918c2b5a96b	2025-01-27 03:06:58.673295+00	2025-01-27 03:06:58.673295+00	password	20291df0-a866-434e-928c-b8fa35f84d2a
d5ff185e-e477-4635-a70e-c65e651702c3	2025-01-27 04:24:29.045734+00	2025-01-27 04:24:29.045734+00	password	b030a443-f45c-4ddf-b1a6-a5842cef375b
dd1b010a-26eb-4642-89ff-cf75a68f8a04	2025-01-27 09:25:59.598759+00	2025-01-27 09:25:59.598759+00	password	1ccf6988-7365-4c6a-9109-3c169c13a6ea
4cdc3cf2-ec94-453b-b58d-73cb466e7768	2025-01-27 16:23:30.702108+00	2025-01-27 16:23:30.702108+00	password	dc014a33-1ffe-4b55-82aa-b621930b2048
acf72f0c-4bee-4b08-8461-e30a160339dd	2025-01-27 19:54:59.162283+00	2025-01-27 19:54:59.162283+00	password	a8918074-985a-4738-8aa1-93c1d22548f4
87080372-a3d2-4d33-b333-fe7e55502685	2025-01-29 04:36:50.345489+00	2025-01-29 04:36:50.345489+00	password	68003db4-06c5-48be-8e7e-d3ee6716dfbe
b4a074bc-5a11-439f-ada4-8282d73284c1	2025-01-29 10:15:51.850988+00	2025-01-29 10:15:51.850988+00	password	1c134f01-354a-4568-a639-c35326dc1394
\.


--
-- Data for Name: mfa_challenges; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_challenges (id, factor_id, created_at, verified_at, ip_address, otp_code, web_authn_session_data) FROM stdin;
\.


--
-- Data for Name: mfa_factors; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_factors (id, user_id, friendly_name, factor_type, status, created_at, updated_at, secret, phone, last_challenged_at, web_authn_credential, web_authn_aaguid) FROM stdin;
\.


--
-- Data for Name: one_time_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.one_time_tokens (id, user_id, token_type, token_hash, relates_to, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: refresh_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.refresh_tokens (instance_id, id, token, user_id, revoked, created_at, updated_at, parent, session_id) FROM stdin;
00000000-0000-0000-0000-000000000000	86	yxJ97563pg4-zcNXl22jqA	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-19 20:28:31.381722+00	2025-01-20 01:54:53.182046+00	j1t_uheu3wLtbRX36mPsKg	86cf8e56-eec3-4083-8e0e-ed04c90c58bc
00000000-0000-0000-0000-000000000000	88	ba1HmvEU_rFrv7vzFN5ggA	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-20 01:54:53.186087+00	2025-01-20 14:57:01.845655+00	yxJ97563pg4-zcNXl22jqA	86cf8e56-eec3-4083-8e0e-ed04c90c58bc
00000000-0000-0000-0000-000000000000	87	cKYiFureyHzJ3EJYvtf82g	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-19 22:31:35.867935+00	2025-01-20 17:30:07.332371+00	E92wKJcYswwD-7aRAaXOtQ	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	90	CsSZx4f9ROi83dWCEJr5Gg	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-20 17:30:07.337079+00	2025-01-20 18:29:28.255572+00	cKYiFureyHzJ3EJYvtf82g	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	91	voxqtr2PSF0hixFtzfyFIg	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-20 18:29:28.263234+00	2025-01-20 19:42:48.00141+00	CsSZx4f9ROi83dWCEJr5Gg	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	10	-SZKojo4tiH7UhPq8wf2_g	412bbdd9-69da-434f-90c8-28e77dbc4e64	f	2025-01-12 15:14:53.811618+00	2025-01-12 15:14:53.811618+00	\N	fd1577cd-945b-48a5-ba53-7e3f404eae1d
00000000-0000-0000-0000-000000000000	92	ut9FxmWpKGSXHPsRaISvpg	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-20 19:42:48.008923+00	2025-01-20 20:42:18.419501+00	voxqtr2PSF0hixFtzfyFIg	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	89	p0iS_B-yjIBEWqkMYpfEdg	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-20 14:57:01.852636+00	2025-01-22 00:59:48.119307+00	ba1HmvEU_rFrv7vzFN5ggA	86cf8e56-eec3-4083-8e0e-ed04c90c58bc
00000000-0000-0000-0000-000000000000	48	0tXornhLWSiWpGavXjUXPg	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-16 22:02:27.71634+00	2025-01-17 01:08:13.941285+00	\N	6d86641c-887a-445d-8947-877eadfac4bf
00000000-0000-0000-0000-000000000000	49	aj044mQvSDAj1vOHaqgDEw	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	f	2025-01-17 01:08:13.94594+00	2025-01-17 01:08:13.94594+00	0tXornhLWSiWpGavXjUXPg	6d86641c-887a-445d-8947-877eadfac4bf
00000000-0000-0000-0000-000000000000	94	Py9VXCBtBJcO9zUOvByMxw	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	f	2025-01-22 00:59:48.131514+00	2025-01-22 00:59:48.131514+00	p0iS_B-yjIBEWqkMYpfEdg	86cf8e56-eec3-4083-8e0e-ed04c90c58bc
00000000-0000-0000-0000-000000000000	93	SUBCaqIw-MxeNOC-pIbqaQ	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-20 20:42:18.421702+00	2025-01-22 18:54:34.780063+00	ut9FxmWpKGSXHPsRaISvpg	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	51	sIJ5n5y9KmOxYme-br7flA	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-17 01:18:25.483137+00	2025-01-17 03:06:22.821731+00	\N	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	52	1I5Wju85_dOnH7b9-VzG5A	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-17 03:06:22.824002+00	2025-01-17 06:23:18.474197+00	sIJ5n5y9KmOxYme-br7flA	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	53	lEmJX2zUqymK06wMQTML5w	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-17 06:23:18.506331+00	2025-01-17 07:23:35.892934+00	1I5Wju85_dOnH7b9-VzG5A	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	54	Frm5GXEsaR-GjeHQ_xBdrA	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-17 07:23:35.894436+00	2025-01-17 13:36:10.42303+00	lEmJX2zUqymK06wMQTML5w	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	55	UwAmYxZu2BCxDzgzatrOoA	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-17 13:36:10.431709+00	2025-01-17 14:43:46.193119+00	Frm5GXEsaR-GjeHQ_xBdrA	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	56	a90PX899HNZhR5mkXX_HOQ	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-17 14:43:46.195477+00	2025-01-17 15:55:19.282001+00	UwAmYxZu2BCxDzgzatrOoA	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	57	jDo_K2dV2BteJiJFCekEsw	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-17 15:55:19.283221+00	2025-01-17 17:18:24.825634+00	a90PX899HNZhR5mkXX_HOQ	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	58	bhuSJQyxyJZes5b1hYeKBg	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-17 17:18:24.827466+00	2025-01-17 18:51:26.304014+00	jDo_K2dV2BteJiJFCekEsw	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	59	upH2z9UDBo207n7tO6DCZA	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-17 18:51:26.305977+00	2025-01-18 13:59:18.060158+00	bhuSJQyxyJZes5b1hYeKBg	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	61	RM5I-qgBv1Xqlx5JxTtVFw	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-18 13:59:18.064469+00	2025-01-18 18:19:32.440128+00	upH2z9UDBo207n7tO6DCZA	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	63	PPPmzDopuMPn4gLm-Ae3fA	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	f	2025-01-18 19:00:41.86035+00	2025-01-18 19:00:41.86035+00	\N	59921c0e-3b92-49e9-b9f5-f452dfa08eb3
00000000-0000-0000-0000-000000000000	62	URNnLvVDB2EFjcuVX3XpAg	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-18 18:19:32.441865+00	2025-01-18 20:00:48.808976+00	RM5I-qgBv1Xqlx5JxTtVFw	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	65	LonBXLHZYuWWJqECCjxtAg	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-18 20:00:48.818925+00	2025-01-18 22:30:51.39858+00	URNnLvVDB2EFjcuVX3XpAg	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	66	yKVSrAM0SgD_-yspi2HQaw	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-18 22:30:51.400541+00	2025-01-18 23:32:47.954445+00	LonBXLHZYuWWJqECCjxtAg	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	64	NNMskuA77ZEoUObJ_JG5bA	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-18 19:00:42.355158+00	2025-01-19 00:52:07.294235+00	\N	f7b8cb6b-b2f1-4ea7-9e62-fba30850543c
00000000-0000-0000-0000-000000000000	68	C8QGTmcrvQVPcRdpesKVKw	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	f	2025-01-19 00:52:07.297224+00	2025-01-19 00:52:07.297224+00	NNMskuA77ZEoUObJ_JG5bA	f7b8cb6b-b2f1-4ea7-9e62-fba30850543c
00000000-0000-0000-0000-000000000000	67	4PsFJdOyKju_JZEhZcTA2w	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-18 23:32:47.959781+00	2025-01-19 00:58:08.73575+00	yKVSrAM0SgD_-yspi2HQaw	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	69	XIRSWxQRTZcGwCQZwT0SHQ	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-19 00:53:40.172037+00	2025-01-19 02:09:38.989092+00	\N	b6ce5c11-94f3-41b2-84ef-dbaf8a76010a
00000000-0000-0000-0000-000000000000	71	Ewe1PRbz4385zo_lDixPeA	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-19 02:09:38.990967+00	2025-01-19 03:40:20.97664+00	XIRSWxQRTZcGwCQZwT0SHQ	b6ce5c11-94f3-41b2-84ef-dbaf8a76010a
00000000-0000-0000-0000-000000000000	72	oEDb_I8WokIDT-R2OdfL8g	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-19 03:40:20.978728+00	2025-01-19 06:03:45.520513+00	Ewe1PRbz4385zo_lDixPeA	b6ce5c11-94f3-41b2-84ef-dbaf8a76010a
00000000-0000-0000-0000-000000000000	70	f1-uwY3laS80vQJG6HAv0Q	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-19 00:58:08.736286+00	2025-01-19 06:33:03.240881+00	4PsFJdOyKju_JZEhZcTA2w	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	73	O4MMaYBA2tdW-2CeqyLPrg	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-19 06:03:45.534187+00	2025-01-19 07:09:41.288319+00	oEDb_I8WokIDT-R2OdfL8g	b6ce5c11-94f3-41b2-84ef-dbaf8a76010a
00000000-0000-0000-0000-000000000000	75	k9cPz358MrN_ZvEYQJqCUg	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	f	2025-01-19 07:09:41.29094+00	2025-01-19 07:09:41.29094+00	O4MMaYBA2tdW-2CeqyLPrg	b6ce5c11-94f3-41b2-84ef-dbaf8a76010a
00000000-0000-0000-0000-000000000000	76	0dDwHhK8YOmU6kePsX89-w	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	f	2025-01-19 07:35:21.623009+00	2025-01-19 07:35:21.623009+00	\N	4b925ace-139b-4cee-bbe7-e99a0d8b8be2
00000000-0000-0000-0000-000000000000	74	fs7Pn0ObUJ2h_BIJeTknAw	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-19 06:33:03.248138+00	2025-01-19 07:37:55.844973+00	f1-uwY3laS80vQJG6HAv0Q	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	78	8FhLlpUN2XEVu-RuowksjA	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-19 07:49:11.136531+00	2025-01-19 13:03:29.578799+00	\N	570fb1a1-a337-4bd5-b084-b8af5ae559ae
00000000-0000-0000-0000-000000000000	77	rEVUoiYe5cvTWXiT8n1Rjw	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-19 07:37:55.845548+00	2025-01-19 13:25:21.455026+00	fs7Pn0ObUJ2h_BIJeTknAw	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	79	5JL1Ji9Sb7nBmOhQd94J0Q	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-19 13:03:29.585387+00	2025-01-19 14:16:30.335897+00	8FhLlpUN2XEVu-RuowksjA	570fb1a1-a337-4bd5-b084-b8af5ae559ae
00000000-0000-0000-0000-000000000000	81	snHqyaY5gK4xEv4Hd8-d0g	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	f	2025-01-19 14:16:30.338337+00	2025-01-19 14:16:30.338337+00	5JL1Ji9Sb7nBmOhQd94J0Q	570fb1a1-a337-4bd5-b084-b8af5ae559ae
00000000-0000-0000-0000-000000000000	80	9fmT4ve8Pc_mfnOuo502gQ	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-19 13:25:21.457776+00	2025-01-19 16:58:52.176293+00	rEVUoiYe5cvTWXiT8n1Rjw	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	82	cJ4Lwszef0By5SvuxoLu8g	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-19 16:58:52.18478+00	2025-01-19 18:34:15.300502+00	9fmT4ve8Pc_mfnOuo502gQ	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	83	r5sZwxRA5vCrHE0K8Hcw2w	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-19 18:34:15.318146+00	2025-01-19 20:16:56.962681+00	cJ4Lwszef0By5SvuxoLu8g	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	84	j1t_uheu3wLtbRX36mPsKg	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-19 19:18:46.249101+00	2025-01-19 20:28:31.377815+00	\N	86cf8e56-eec3-4083-8e0e-ed04c90c58bc
00000000-0000-0000-0000-000000000000	85	E92wKJcYswwD-7aRAaXOtQ	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-19 20:16:56.967898+00	2025-01-19 22:31:35.86635+00	r5sZwxRA5vCrHE0K8Hcw2w	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	95	z6hMLTIzzRNTqropvP2z8w	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-22 18:54:34.791925+00	2025-01-23 01:36:20.089855+00	SUBCaqIw-MxeNOC-pIbqaQ	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	96	8bUmjzgAzNCRQBphAKdBUg	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-23 01:36:20.091044+00	2025-01-24 00:50:29.253906+00	z6hMLTIzzRNTqropvP2z8w	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	165	WLcY80L8wYx-MH3VciF84w	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-29 10:15:51.845074+00	2025-01-29 11:56:29.476032+00	\N	b4a074bc-5a11-439f-ada4-8282d73284c1
00000000-0000-0000-0000-000000000000	97	5uGDClQNgK4y3SzFCJ0LOQ	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-24 00:50:29.26212+00	2025-01-24 02:04:42.093286+00	8bUmjzgAzNCRQBphAKdBUg	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	98	JgjSJtxEN3xpwcOzzP4gxw	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-24 02:04:42.09704+00	2025-01-24 03:46:05.991497+00	5uGDClQNgK4y3SzFCJ0LOQ	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	99	83fE9GkGHuyFL9JutMDzEg	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-24 03:46:05.993632+00	2025-01-24 04:48:48.095646+00	JgjSJtxEN3xpwcOzzP4gxw	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	100	Tv-5B6KllDcuB3blwa5esQ	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-24 04:48:48.097477+00	2025-01-24 14:19:45.63422+00	83fE9GkGHuyFL9JutMDzEg	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	101	E-zE17AIxXlsi5kTbe1iEw	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-24 14:19:45.644344+00	2025-01-24 15:57:29.903551+00	Tv-5B6KllDcuB3blwa5esQ	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	102	uvgdKo3k5BQZk8x4yQN1hQ	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-24 15:57:29.910189+00	2025-01-24 17:00:38.76194+00	E-zE17AIxXlsi5kTbe1iEw	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	103	jFOslcHLv0M66XVrfG7EkA	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-24 17:00:38.765874+00	2025-01-24 18:58:02.04188+00	uvgdKo3k5BQZk8x4yQN1hQ	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	104	b_YQjSiWUpWqR0LEK4P9Kg	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-24 18:58:02.045249+00	2025-01-24 20:00:23.37334+00	jFOslcHLv0M66XVrfG7EkA	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	105	CbMy5ISYch2A4qpfYioLsA	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-24 20:00:23.377267+00	2025-01-24 21:01:24.215918+00	b_YQjSiWUpWqR0LEK4P9Kg	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	106	WVQhoMjl7ZAMumDL-ylQGg	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-24 21:01:24.21852+00	2025-01-24 22:03:11.16892+00	CbMy5ISYch2A4qpfYioLsA	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	108	P3_4pGS6MseIVXAJGYgdxA	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	f	2025-01-24 22:39:31.106936+00	2025-01-24 22:39:31.106936+00	\N	5d69fb74-2988-4c15-9b05-974afb8a621a
00000000-0000-0000-0000-000000000000	107	zyLD7JrRPkixob-uzmewsQ	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-24 22:03:11.171807+00	2025-01-24 23:18:21.549304+00	WVQhoMjl7ZAMumDL-ylQGg	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	109	xEsPTyYcCyfLkd-oU2hc3w	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-24 23:18:21.552553+00	2025-01-25 00:21:07.152983+00	zyLD7JrRPkixob-uzmewsQ	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	110	jP_HTWClk2z_5GkW91Sgjg	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-25 00:21:07.162246+00	2025-01-25 01:27:19.665046+00	xEsPTyYcCyfLkd-oU2hc3w	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	111	eoPw1-WOkwtuH0iOmQVSEg	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-25 01:27:19.670331+00	2025-01-25 02:30:19.394118+00	jP_HTWClk2z_5GkW91Sgjg	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	112	wJDHucEWid4397n8gQ7yYw	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-25 02:30:19.396911+00	2025-01-25 03:31:22.450516+00	eoPw1-WOkwtuH0iOmQVSEg	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	113	4U5WD0jqBQ8FOeOz75Ty3Q	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-25 03:31:22.453829+00	2025-01-25 04:36:04.974044+00	wJDHucEWid4397n8gQ7yYw	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	114	pYMItXolq1njyo_R8swQDw	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-25 04:36:04.975953+00	2025-01-25 14:28:05.460595+00	4U5WD0jqBQ8FOeOz75Ty3Q	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	115	ffkuZKwL8yNOrJhhkLdAPw	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-25 14:28:05.467989+00	2025-01-25 15:28:23.213063+00	pYMItXolq1njyo_R8swQDw	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	116	aq1xCDKbINZMau5l98BWWw	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-25 15:28:23.215402+00	2025-01-25 16:31:24.04621+00	ffkuZKwL8yNOrJhhkLdAPw	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	117	MQINAtIDRW9hn1YbvwFKBQ	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-25 16:31:24.049548+00	2025-01-25 17:31:06.759978+00	aq1xCDKbINZMau5l98BWWw	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	118	PAFAgHfP19s2zUJvyz9M2Q	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-25 17:31:06.76363+00	2025-01-25 19:12:11.213819+00	MQINAtIDRW9hn1YbvwFKBQ	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	119	d8eM01SDXYtTjkFh1noUoA	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-25 19:12:11.216572+00	2025-01-25 20:12:07.158894+00	PAFAgHfP19s2zUJvyz9M2Q	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	120	xPgZ0Zvx5NKLq7lROthlRg	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-25 20:12:07.160721+00	2025-01-25 21:11:27.535731+00	d8eM01SDXYtTjkFh1noUoA	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	121	9-k1nS4LzmLT_j9HiNmqYg	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-25 21:11:27.539467+00	2025-01-25 22:11:59.580804+00	xPgZ0Zvx5NKLq7lROthlRg	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	122	k1XBFhCkMg4yzVlX8FZ_2w	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-25 22:11:59.584004+00	2025-01-26 19:47:06.97682+00	9-k1nS4LzmLT_j9HiNmqYg	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	123	n6NJLR6O2n-2WXCyF1UU9Q	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-26 19:47:06.988918+00	2025-01-26 20:52:17.952394+00	k1XBFhCkMg4yzVlX8FZ_2w	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	124	6wlr51hlzfAa8-r_U50D_w	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-26 20:52:17.956737+00	2025-01-26 23:14:55.9944+00	n6NJLR6O2n-2WXCyF1UU9Q	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	125	entWUgYHmEWaMSC-0JwC5Q	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-26 23:14:55.998077+00	2025-01-27 00:19:11.711104+00	6wlr51hlzfAa8-r_U50D_w	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	126	T7oj2T8HtbSRP30lbOL64w	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-27 00:19:11.718721+00	2025-01-27 01:18:39.814528+00	entWUgYHmEWaMSC-0JwC5Q	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	127	wd88-Dm_FEkABreBGOanfw	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-27 01:18:39.818188+00	2025-01-27 02:25:21.110099+00	T7oj2T8HtbSRP30lbOL64w	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	129	s5KYdgqt0LVrS90dYPfbMg	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	f	2025-01-27 03:06:58.667299+00	2025-01-27 03:06:58.667299+00	\N	f83a64ac-c1ea-4125-9019-6918c2b5a96b
00000000-0000-0000-0000-000000000000	128	fLdtt1IJFarumSaSJ_Uq-w	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-27 02:25:21.117364+00	2025-01-27 03:26:12.430781+00	wd88-Dm_FEkABreBGOanfw	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	131	IUdnCdGoS64Jo03jXT5S0g	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-27 04:24:29.039148+00	2025-01-27 05:27:47.359679+00	\N	d5ff185e-e477-4635-a70e-c65e651702c3
00000000-0000-0000-0000-000000000000	132	ZV4b4Ko_hdUCW6UISwtrSA	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	f	2025-01-27 05:27:47.368503+00	2025-01-27 05:27:47.368503+00	IUdnCdGoS64Jo03jXT5S0g	d5ff185e-e477-4635-a70e-c65e651702c3
00000000-0000-0000-0000-000000000000	130	OKIUgbo1v5flGRfyeGmS9Q	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-27 03:26:12.434937+00	2025-01-27 10:51:12.857687+00	fLdtt1IJFarumSaSJ_Uq-w	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	134	Q91zjGhlOjqOqXs3M7rZow	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-27 10:51:12.85983+00	2025-01-27 11:50:41.565487+00	OKIUgbo1v5flGRfyeGmS9Q	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	135	E5VQW6cvc7YEIIAKv8fSSw	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-27 11:50:41.567239+00	2025-01-27 13:29:17.35101+00	Q91zjGhlOjqOqXs3M7rZow	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	136	wS4Z144-eKSpgsP2n5tq9Q	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-27 13:29:17.356806+00	2025-01-27 14:39:22.441233+00	E5VQW6cvc7YEIIAKv8fSSw	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	137	6pvULIILwe9Y8UBJLFBvuQ	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-27 14:39:22.444757+00	2025-01-27 15:38:49.207399+00	wS4Z144-eKSpgsP2n5tq9Q	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	138	xQRUZL9oDmYBA03ziPn5Vw	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-27 15:38:49.211485+00	2025-01-27 16:42:50.201039+00	6pvULIILwe9Y8UBJLFBvuQ	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	140	oAYoKlLfmjlYSmUQHX2Zbg	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-27 16:42:50.204329+00	2025-01-27 17:50:56.032189+00	xQRUZL9oDmYBA03ziPn5Vw	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	139	bICD2yrKZ9UuXK-Q-xfDCg	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-27 16:23:30.695576+00	2025-01-27 18:33:29.862316+00	\N	4cdc3cf2-ec94-453b-b58d-73cb466e7768
00000000-0000-0000-0000-000000000000	161	MUHG1-s2UqMKqjrXnrWHdw	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-29 07:10:02.816944+00	2025-01-29 08:10:32.671719+00	sxzvqJiI38Jrljdwz9EC1Q	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	141	APnmmzNiJC_K5MTxvE9UzA	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-27 17:50:56.036186+00	2025-01-27 18:50:25.030701+00	oAYoKlLfmjlYSmUQHX2Zbg	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	142	hgOp_F0SqR2yVJTLLTgHXg	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-27 18:33:29.866996+00	2025-01-27 19:38:48.076087+00	bICD2yrKZ9UuXK-Q-xfDCg	4cdc3cf2-ec94-453b-b58d-73cb466e7768
00000000-0000-0000-0000-000000000000	133	Ju7QqfJ9YTL_LEz-FuUdFw	7dcc4a77-218a-440f-9f3b-a5fd37f74508	t	2025-01-27 09:25:59.57624+00	2025-01-29 10:42:25.710198+00	\N	dd1b010a-26eb-4642-89ff-cf75a68f8a04
00000000-0000-0000-0000-000000000000	143	rRVZwLMp3LyVWmWi1x2wyQ	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-27 18:50:25.035299+00	2025-01-27 19:49:53.343748+00	APnmmzNiJC_K5MTxvE9UzA	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	166	1fJPya1ay6Ntya4WDn7SyA	7dcc4a77-218a-440f-9f3b-a5fd37f74508	f	2025-01-29 10:42:25.711561+00	2025-01-29 10:42:25.711561+00	Ju7QqfJ9YTL_LEz-FuUdFw	dd1b010a-26eb-4642-89ff-cf75a68f8a04
00000000-0000-0000-0000-000000000000	144	9Ji_elH59539QMRjLXNeog	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-27 19:38:48.079771+00	2025-01-27 19:54:38.474913+00	hgOp_F0SqR2yVJTLLTgHXg	4cdc3cf2-ec94-453b-b58d-73cb466e7768
00000000-0000-0000-0000-000000000000	167	-O_TdjWZwens3wMpwhzwaA	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	f	2025-01-29 11:56:29.492317+00	2025-01-29 11:56:29.492317+00	WLcY80L8wYx-MH3VciF84w	b4a074bc-5a11-439f-ada4-8282d73284c1
00000000-0000-0000-0000-000000000000	145	2IjDXvd2BuZHBsdV9vIGpQ	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-27 19:49:53.348326+00	2025-01-27 21:35:13.670328+00	rRVZwLMp3LyVWmWi1x2wyQ	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	162	_mkZiJmFEoR59hTFxYTLNw	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-29 08:10:32.675453+00	2025-01-29 11:57:55.376408+00	MUHG1-s2UqMKqjrXnrWHdw	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	147	kkWp14priBDaColVmAVIzw	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-27 21:35:13.673141+00	2025-01-28 01:56:09.554398+00	2IjDXvd2BuZHBsdV9vIGpQ	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	146	cln8aWokAgO80xLmV4wd3g	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-27 19:54:59.158921+00	2025-01-28 01:58:48.569963+00	\N	acf72f0c-4bee-4b08-8461-e30a160339dd
00000000-0000-0000-0000-000000000000	168	Qi2qtXVIL6qXIrPwmyNXow	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-29 11:57:55.384928+00	2025-01-29 13:03:16.393824+00	_mkZiJmFEoR59hTFxYTLNw	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	149	BwErcagCjQ1SV0S99fqF-w	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-28 01:58:48.575512+00	2025-01-28 03:20:19.668378+00	cln8aWokAgO80xLmV4wd3g	acf72f0c-4bee-4b08-8461-e30a160339dd
00000000-0000-0000-0000-000000000000	150	VNiSx9OhLuIQwxdgNh-hMA	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	f	2025-01-28 03:20:19.673161+00	2025-01-28 03:20:19.673161+00	BwErcagCjQ1SV0S99fqF-w	acf72f0c-4bee-4b08-8461-e30a160339dd
00000000-0000-0000-0000-000000000000	148	aF2A3jyHshy-_ZJH_ka6Tw	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-28 01:56:09.563287+00	2025-01-28 03:21:23.577364+00	kkWp14priBDaColVmAVIzw	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	151	rJLX5jJ8zlUj33xsBdda1Q	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-28 03:21:23.577942+00	2025-01-28 04:27:17.988007+00	aF2A3jyHshy-_ZJH_ka6Tw	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	169	UU4wMMBI5Ir9HtAjtLspOQ	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-29 13:03:16.398196+00	2025-01-29 20:03:57.760054+00	Qi2qtXVIL6qXIrPwmyNXow	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	152	rIp0YlCfXu0R9etR_XM8Rg	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-28 04:27:17.990743+00	2025-01-28 05:27:33.937356+00	rJLX5jJ8zlUj33xsBdda1Q	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	170	60zrScpmTOnB0cOeWH8BVg	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	f	2025-01-29 20:03:57.765963+00	2025-01-29 20:03:57.765963+00	UU4wMMBI5Ir9HtAjtLspOQ	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	153	_vgkhmQbKp5PlQiAWvsVvQ	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-28 05:27:33.941922+00	2025-01-28 06:33:56.457462+00	rIp0YlCfXu0R9etR_XM8Rg	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	154	j8R7bdlyfyWLf6Hh_39vFQ	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-28 06:33:56.464557+00	2025-01-28 07:35:41.576692+00	_vgkhmQbKp5PlQiAWvsVvQ	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	155	pPuPTjL-_gWm4z_fDfndyQ	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-28 07:35:41.582104+00	2025-01-28 15:37:58.098206+00	j8R7bdlyfyWLf6Hh_39vFQ	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	156	0BYVkrKsPBPfXjmeLQ9p9Q	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-28 15:37:58.106763+00	2025-01-28 18:02:46.088396+00	pPuPTjL-_gWm4z_fDfndyQ	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	157	2dmQh9pCx39SJz1be-t3EQ	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-28 18:02:46.093795+00	2025-01-29 04:22:38.336017+00	0BYVkrKsPBPfXjmeLQ9p9Q	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	159	__dXw6olYGtMgtjsle-wVA	750bc03a-f035-4880-984f-5b8bd12758c1	f	2025-01-29 04:36:50.337523+00	2025-01-29 04:36:50.337523+00	\N	87080372-a3d2-4d33-b333-fe7e55502685
00000000-0000-0000-0000-000000000000	158	geVBIKZP3fCE8OIhEyPtBQ	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-29 04:22:38.348958+00	2025-01-29 05:35:04.88256+00	2dmQh9pCx39SJz1be-t3EQ	146d0f6a-0121-4ffa-b940-48750bb3cb81
00000000-0000-0000-0000-000000000000	160	sxzvqJiI38Jrljdwz9EC1Q	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	t	2025-01-29 05:35:04.885678+00	2025-01-29 07:10:02.794919+00	geVBIKZP3fCE8OIhEyPtBQ	146d0f6a-0121-4ffa-b940-48750bb3cb81
\.


--
-- Data for Name: saml_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_providers (id, sso_provider_id, entity_id, metadata_xml, metadata_url, attribute_mapping, created_at, updated_at, name_id_format) FROM stdin;
\.


--
-- Data for Name: saml_relay_states; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_relay_states (id, sso_provider_id, request_id, for_email, redirect_to, created_at, updated_at, flow_state_id) FROM stdin;
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.schema_migrations (version) FROM stdin;
20171026211738
20171026211808
20171026211834
20180103212743
20180108183307
20180119214651
20180125194653
00
20210710035447
20210722035447
20210730183235
20210909172000
20210927181326
20211122151130
20211124214934
20211202183645
20220114185221
20220114185340
20220224000811
20220323170000
20220429102000
20220531120530
20220614074223
20220811173540
20221003041349
20221003041400
20221011041400
20221020193600
20221021073300
20221021082433
20221027105023
20221114143122
20221114143410
20221125140132
20221208132122
20221215195500
20221215195800
20221215195900
20230116124310
20230116124412
20230131181311
20230322519590
20230402418590
20230411005111
20230508135423
20230523124323
20230818113222
20230914180801
20231027141322
20231114161723
20231117164230
20240115144230
20240214120130
20240306115329
20240314092811
20240427152123
20240612123726
20240729123726
20240802193726
20240806073726
20241009103726
\.


--
-- Data for Name: sessions; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sessions (id, user_id, created_at, updated_at, factor_id, aal, not_after, refreshed_at, user_agent, ip, tag) FROM stdin;
fd1577cd-945b-48a5-ba53-7e3f404eae1d	412bbdd9-69da-434f-90c8-28e77dbc4e64	2025-01-12 15:14:53.810668+00	2025-01-12 15:14:53.810668+00	\N	aal1	\N	\N	Dart/3.5 (dart:io)	179.136.179.4	\N
b4a074bc-5a11-439f-ada4-8282d73284c1	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	2025-01-29 10:15:51.843404+00	2025-01-29 11:56:29.514092+00	\N	aal1	\N	2025-01-29 11:56:29.514008	Dart/3.5 (dart:io)	179.136.179.4	\N
570fb1a1-a337-4bd5-b084-b8af5ae559ae	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	2025-01-19 07:49:11.133991+00	2025-01-19 14:16:30.342359+00	\N	aal1	\N	2025-01-19 14:16:30.34228	Dart/3.5 (dart:io)	152.255.103.12	\N
146d0f6a-0121-4ffa-b940-48750bb3cb81	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	2025-01-17 01:18:25.480585+00	2025-01-29 20:03:57.772916+00	\N	aal1	\N	2025-01-29 20:03:57.772838	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Safari/537.36	179.136.179.4	\N
6d86641c-887a-445d-8947-877eadfac4bf	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	2025-01-16 22:02:27.715703+00	2025-01-17 01:08:13.951866+00	\N	aal1	\N	2025-01-17 01:08:13.951796	Dart/3.5 (dart:io)	179.136.179.4	\N
4cdc3cf2-ec94-453b-b58d-73cb466e7768	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	2025-01-27 16:23:30.688134+00	2025-01-27 19:38:48.083554+00	\N	aal1	\N	2025-01-27 19:38:48.083479	Dart/3.5 (dart:io)	179.136.179.4	\N
acf72f0c-4bee-4b08-8461-e30a160339dd	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	2025-01-27 19:54:59.15687+00	2025-01-28 03:20:19.679058+00	\N	aal1	\N	2025-01-28 03:20:19.678981	Dart/3.5 (dart:io)	179.136.179.4	\N
86cf8e56-eec3-4083-8e0e-ed04c90c58bc	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	2025-01-19 19:18:46.237202+00	2025-01-22 00:59:48.157907+00	\N	aal1	\N	2025-01-22 00:59:48.157825	Dart/3.5 (dart:io)	152.255.111.179	\N
59921c0e-3b92-49e9-b9f5-f452dfa08eb3	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	2025-01-18 19:00:41.844198+00	2025-01-18 19:00:41.844198+00	\N	aal1	\N	\N	Dart/3.5 (dart:io)	179.136.179.4	\N
f7b8cb6b-b2f1-4ea7-9e62-fba30850543c	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	2025-01-18 19:00:42.354499+00	2025-01-19 00:52:07.305178+00	\N	aal1	\N	2025-01-19 00:52:07.305093	Dart/3.5 (dart:io)	179.136.179.4	\N
f83a64ac-c1ea-4125-9019-6918c2b5a96b	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	2025-01-27 03:06:58.658731+00	2025-01-27 03:06:58.658731+00	\N	aal1	\N	\N	Dart/3.5 (dart:io)	179.136.179.4	\N
b6ce5c11-94f3-41b2-84ef-dbaf8a76010a	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	2025-01-19 00:53:40.166731+00	2025-01-19 07:09:41.297334+00	\N	aal1	\N	2025-01-19 07:09:41.296235	Dart/3.5 (dart:io)	152.255.116.22	\N
4b925ace-139b-4cee-bbe7-e99a0d8b8be2	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	2025-01-19 07:35:21.619076+00	2025-01-19 07:35:21.619076+00	\N	aal1	\N	\N	Dart/3.5 (dart:io)	152.255.102.241	\N
d5ff185e-e477-4635-a70e-c65e651702c3	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	2025-01-27 04:24:29.035501+00	2025-01-27 05:27:47.374675+00	\N	aal1	\N	2025-01-27 05:27:47.374604	Dart/3.5 (dart:io)	179.136.179.4	\N
87080372-a3d2-4d33-b333-fe7e55502685	750bc03a-f035-4880-984f-5b8bd12758c1	2025-01-29 04:36:50.327842+00	2025-01-29 04:36:50.327842+00	\N	aal1	\N	\N	Dart/3.5 (dart:io)	179.225.209.50	\N
5d69fb74-2988-4c15-9b05-974afb8a621a	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	2025-01-24 22:39:31.097516+00	2025-01-24 22:39:31.097516+00	\N	aal1	\N	\N	Dart/3.5 (dart:io)	179.136.179.4	\N
dd1b010a-26eb-4642-89ff-cf75a68f8a04	7dcc4a77-218a-440f-9f3b-a5fd37f74508	2025-01-27 09:25:59.560981+00	2025-01-29 10:42:25.714587+00	\N	aal1	\N	2025-01-29 10:42:25.71451	Dart/3.5 (dart:io)	177.44.182.102	\N
\.


--
-- Data for Name: sso_domains; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_domains (id, sso_provider_id, domain, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: sso_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_providers (id, resource_id, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.users (instance_id, id, aud, role, email, encrypted_password, email_confirmed_at, invited_at, confirmation_token, confirmation_sent_at, recovery_token, recovery_sent_at, email_change_token_new, email_change, email_change_sent_at, last_sign_in_at, raw_app_meta_data, raw_user_meta_data, is_super_admin, created_at, updated_at, phone, phone_confirmed_at, phone_change, phone_change_token, phone_change_sent_at, email_change_token_current, email_change_confirm_status, banned_until, reauthentication_token, reauthentication_sent_at, is_sso_user, deleted_at, is_anonymous) FROM stdin;
00000000-0000-0000-0000-000000000000	412bbdd9-69da-434f-90c8-28e77dbc4e64	authenticated	authenticated	laura@taigostei.com	$2a$10$nqewY7iwezeE93I2tTFeLen6vUNtev0ZXsnE/XulxznUDwKpUHYHO	2025-01-12 15:14:53.806196+00	\N		\N		\N			\N	2025-01-12 15:14:53.810596+00	{"provider": "email", "providers": ["email"]}	{"sub": "412bbdd9-69da-434f-90c8-28e77dbc4e64", "email": "laura@taigostei.com", "email_verified": true, "phone_verified": false}	\N	2025-01-12 15:14:53.797118+00	2025-01-12 15:14:53.814751+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	5f037798-a1e5-45d0-8434-500c23426fe1	authenticated	authenticated	ana@taigostei.com	$2a$10$ShEwkOC9agEvU1HW4Qo6eurNvy7KgqYTp1TkCDeq1qvju7FiOvDdK	2025-01-12 14:39:37.414063+00	\N		\N		\N			\N	2025-01-12 14:39:37.418469+00	{"provider": "email", "providers": ["email"]}	{"sub": "5f037798-a1e5-45d0-8434-500c23426fe1", "email": "ana@taigostei.com", "email_verified": true, "phone_verified": false}	\N	2025-01-12 14:39:37.405242+00	2025-01-13 22:11:19.124223+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	7dcc4a77-218a-440f-9f3b-a5fd37f74508	authenticated	authenticated	sdiksoftwares@gmail.com	$2a$10$y7DfZiYwhd.kszCKKNEOuenUf7Up7vuklSQIS6BOXnH5Tp5scfwwa	2025-01-27 09:25:59.544221+00	\N		\N		\N			\N	2025-01-27 09:25:59.560888+00	{"provider": "email", "providers": ["email"]}	{"sub": "7dcc4a77-218a-440f-9f3b-a5fd37f74508", "email": "sdiksoftwares@gmail.com", "email_verified": true, "phone_verified": false}	\N	2025-01-27 09:25:59.472102+00	2025-01-29 10:42:25.712595+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	87edf2aa-f396-4e27-8e79-dabec8af553b	authenticated	authenticated	francisco@taigostei.com	$2a$10$mMf2vckisXvDSAt.2L4e7O97nuk0PPvTDRXZFe6WoxXxWGjxL9oiS	2025-01-12 14:33:34.645784+00	\N		\N		\N			\N	2025-01-13 14:03:54.391133+00	{"provider": "email", "providers": ["email"]}	{"sub": "87edf2aa-f396-4e27-8e79-dabec8af553b", "email": "francisco@taigostei.com", "email_verified": true, "phone_verified": false}	\N	2025-01-12 14:33:34.6345+00	2025-01-13 14:03:54.394808+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	authenticated	authenticated	jeslleypires@gmail.com	$2a$10$b6/6BEnTaa/fH9ApIodFoOE090Bj45nZP1YGRbyYkZV3cRpAihgam	2025-01-16 22:02:27.710806+00	\N		\N		\N			\N	2025-01-29 10:15:51.842735+00	{"provider": "email", "providers": ["email"]}	{"sub": "4bc8ec52-7b9c-42fa-889f-90f3b96f21bf", "email": "jeslleypires@gmail.com", "email_verified": true, "phone_verified": false}	\N	2025-01-16 22:02:27.563678+00	2025-01-29 20:03:57.770453+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	750bc03a-f035-4880-984f-5b8bd12758c1	authenticated	authenticated	aleixo_ferreira@hotmail.com	$2a$10$Eyty.1QrNLyIgiHoBni9hu5gxegDG0xkW8Wvlo2EF.vDVHbnFJZ.G	2025-01-29 04:36:50.322508+00	\N		\N		\N			\N	2025-01-29 04:36:50.327769+00	{"provider": "email", "providers": ["email"]}	{"sub": "750bc03a-f035-4880-984f-5b8bd12758c1", "email": "aleixo_ferreira@hotmail.com", "email_verified": true, "phone_verified": false}	\N	2025-01-29 04:36:50.300541+00	2025-01-29 04:36:50.345+00	\N	\N			\N		0	\N		\N	f	\N	f
\.


--
-- Data for Name: key; Type: TABLE DATA; Schema: pgsodium; Owner: supabase_admin
--

COPY pgsodium.key (id, status, created, expires, key_type, key_id, key_context, name, associated_data, raw_key, raw_key_nonce, parent_key, comment, user_data) FROM stdin;
\.


--
-- Data for Name: banner; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.banner (id, created_at, title, description, image, url, location, date_start, date_end, raffle_id, influencer_id, type, "column", content) FROM stdin;
acb5ee29-8c57-405f-9efc-d57e3118dc46	2025-01-12 23:34:57.970969+00	Banner 12	Este é o banner do Sorteio Iluminado	https://images.unsplash.com/photo-1534445867742-43195f401b6c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8N3x8aXRhbHl8ZW58MHx8MHx8&auto=format&fit=crop&w=900&q=60		sidebar	2025-01-01 00:00:00+00	2025-12-31 23:59:59+00	bc11f725-893d-4870-bd9f-e61cd6625a5f	\N	\N	\N	\N
c14b3b1a-533e-44c0-96f4-063b543a0abf	2025-01-12 23:34:57.970969+00	Banner 9	Este é o banner do Sorteio Estrela	https://images.unsplash.com/photo-1534445867742-43195f401b6c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8N3x8aXRhbHl8ZW58MHx8MHx8&auto=format&fit=crop&w=900&q=60		homepage	2025-01-01 00:00:00+00	2025-12-31 23:59:59+00	670902d7-2309-4a99-ac73-3c7777c1c10c	\N	\N	\N	\N
2c5400b4-a920-4618-8daa-5d1a080d0d0e	2025-01-12 23:34:57.970969+00	Banner 11	Este é o banner do Sorteio Glorioso	https://images.unsplash.com/photo-1534445867742-43195f401b6c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8N3x8aXRhbHl8ZW58MHx8MHx8&auto=format&fit=crop&w=900&q=60		home1	2025-01-01 00:00:00+00	2025-12-31 23:59:59+00	af76859b-e8f9-469f-b9bf-3e9251d382ad	\N	\N	\N	raffle
3483d7f0-89c5-4c33-8130-46005cb279fc	2025-01-12 23:34:57.970969+00	Banner 6	Este é o banner do Sorteio Deslumbrante	https://images.unsplash.com/photo-1534445867742-43195f401b6c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8N3x8aXRhbHl8ZW58MHx8MHx8&auto=format&fit=crop&w=900&q=60		home2	2025-01-01 00:00:00+00	2025-12-31 23:59:59+00	89e718e3-1e59-4aa8-a226-54c6531732f6	\N	\N	\N	raffle
5d06c9d0-31c8-4ded-a93a-64433ad158d3	2025-01-12 23:34:57.970969+00	Banner 7	Este é o banner do Sorteio Incrível	https://images.unsplash.com/photo-1534445867742-43195f401b6c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8N3x8aXRhbHl8ZW58MHx8MHx8&auto=format&fit=crop&w=900&q=60		home2	2025-01-01 00:00:00+00	2025-12-31 23:59:59+00	3bba1dea-9428-4a86-8f31-8ad584820410	\N	\N	\N	raffle
cdcb5c77-dcb1-4b16-83f0-37c6bba82f1c	2025-01-12 23:34:57.970969+00	Banner 5	Este é o banner do Sorteio Mágico	https://images.unsplash.com/photo-1534445867742-43195f401b6c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8N3x8aXRhbHl8ZW58MHx8MHx8&auto=format&fit=crop&w=900&q=60		homepage	2025-01-01 00:00:00+00	2025-12-31 23:59:59+00	422c75fe-5128-437c-8566-73680db01ee8	\N	\N	\N	\N
fbc35f35-b876-4d6c-880b-61749d7365fe	2025-01-12 23:34:57.970969+00	Banner 2	Este é o banner do Sorteio Fantástico	https://images.unsplash.com/photo-1534445867742-43195f401b6c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8N3x8aXRhbHl8ZW58MHx8MHx8&auto=format&fit=crop&w=900&q=60		sidebar	2025-01-01 00:00:00+00	2025-12-31 23:59:59+00	57abfe28-1a0c-4f4d-9c05-3a99e4c69b07	\N	\N	\N	\N
7dcfbce3-35d1-49e7-ac8f-ca7a7af7ff52	2025-01-12 23:34:57.970969+00	Banner 4	Este é o banner do Sorteio Espetacular	https://images.unsplash.com/photo-1534445867742-43195f401b6c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8N3x8aXRhbHl8ZW58MHx8MHx8&auto=format&fit=crop&w=900&q=60		home2	2025-01-01 00:00:00+00	2025-12-31 23:59:59+00	9dda4137-012f-4c4b-8cec-9759d5bb999d	\N	\N	\N	raffle
8702c41d-6daa-4847-a115-1545bac0ab83	2025-01-12 23:34:57.970969+00	Banner 10	Este é o banner do Sorteio Supremo	https://images.unsplash.com/photo-1534445867742-43195f401b6c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8N3x8aXRhbHl8ZW58MHx8MHx8&auto=format&fit=crop&w=900&q=60		homeDestaque	2025-01-01 00:00:00+00	2025-12-31 23:59:59+00	df09d290-db12-42fe-b22d-a49359cf8b34	\N	\N	\N	raffle
90a04527-dcc3-4fd4-bac8-aecfc1330eac	2025-01-12 23:34:57.970969+00	Banner 8	Este é o banner do Sorteio Brilhante	https://images.unsplash.com/photo-1534445867742-43195f401b6c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8N3x8aXRhbHl8ZW58MHx8MHx8&auto=format&fit=crop&w=900&q=60		homeDestaque	2025-01-01 00:00:00+00	2025-12-31 23:59:59+00	20cad319-2aff-4681-8460-6945f674d43f	\N	\N	\N	raffle
a420b988-a5b3-4736-9b30-7f82a21fd763	2025-01-17 06:48:06.566471+00	Banner 20	Este é o banner teste	https://alzvmiqpxhnntzamzdpq.supabase.co/storage/v1/object/public/admin/images/1737096483349000.png	:rifa	Rifa	2025-01-17 00:00:00+00	2025-01-31 00:00:00+00	bc11f725-893d-4870-bd9f-e61cd6625a5f	\N	Rifa	\N	\N
9589adf0-56c7-4c3d-b184-6b8dc49380b5	2025-01-12 23:34:57.970969+00	Banner 14	Este é o banner do Sorteio Maravilha	https://images.unsplash.com/photo-1534445867742-43195f401b6c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8N3x8aXRhbHl8ZW58MHx8MHx8&auto=format&fit=crop&w=900&q=60		homeDestaque	2025-01-01 00:00:00+00	2025-12-31 23:59:59+00	0d61769e-c19f-4d37-bbcf-a9f696754bc9	\N	\N	\N	raffle
082d9540-5bb7-405c-bd9f-0b36c268f277	2025-01-12 23:34:57.970969+00	Banner 3	Este é o banner do Sorteio dos Sonhos	https://images.unsplash.com/photo-1534445867742-43195f401b6c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8N3x8aXRhbHl8ZW58MHx8MHx8&auto=format&fit=crop&w=900&q=60		home1	2025-01-01 00:00:00+00	2025-12-31 23:59:59+00	0d61769e-c19f-4d37-bbcf-a9f696754bc9	\N	\N	\N	raffle
\.


--
-- Data for Name: cashback; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.cashback (id, user_id, transaction_id, amount, received_date) FROM stdin;
\.


--
-- Data for Name: contracts; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.contracts (id, influencer_id, client_id, service_plan_id, start_date, end_date, status, total_price, commission, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: event; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.event (id, created_at, name, description, image, date_start, date_end, local) FROM stdin;
\.


--
-- Data for Name: faq; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.faq (id, created_at, title, content) FROM stdin;
\.


--
-- Data for Name: firms; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.firms (id, name, address, contact_info, created_at, start_time, end_time, description, image, image_cover, phone, whatsapp, birthdate, number_customers, zipcode, number, complement, district, city, state, specialization_id) FROM stdin;
\.


--
-- Data for Name: influencer_payments; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.influencer_payments (id, influencer_id, amount, payment_date) FROM stdin;
\.


--
-- Data for Name: inter_credentials; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.inter_credentials (id, client_id, client_secret, certificate, certificate_key, created_at, environment, pix_key, ca_certificate, cert_path, key_path) FROM stdin;
5621e243-0e24-4fff-bc2a-7f8f87e829aa	9ae4badc-2820-46e1-949a-21378228f73f	610c88f9-8978-4237-81df-188bedaa1f8b	-----BEGIN CERTIFICATE-----\r\nMIIEhjCCA26gAwIBAgIQf6DP7WysMmRmP3w4Om2v4zANBgkqhkiG9w0BAQsFADCB\r\nijELMAkGA1UEBhMCQlIxFTATBgNVBAgMDE1pbmFzIEdlcmFpczEXMBUGA1UEBwwO\r\nQmVsbyBIb3Jpem9udGUxDDAKBgNVBAoMA0FQSTELMAkGA1UECwwCSVQxMDAuBgNV\r\nBAMMJ0FQSSBJbnRlcm1lZGlhdGUgQ2VydGlmaWNhdGUgQXV0aG9yaXR5CTAeFw0y\r\nNTAxMjMwMTQ2MTNaFw0yNjAxMjMwMjQ2MTNaMIGbMQswCQYDVQQGEwJCUjELMAkG\r\nA1UECBMCU0MxFjAUBgNVBAcTDUZMT1JJQU5PUE9MSVMxLTArBgNVBAsTJGQ0ZWQ3\r\nYTIzLTM1N2ItNGNiMS04ZWZhLWRmN2Q3YmQ4ZGJmNTENMAsGA1UEChMEbnVsbDEp\r\nMCcGA1UEAxMgVEFJR09TVEVJIFNPTFVDT0VTIERJR0lUQUlTIExUREEwggEiMA0G\r\nCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDa9Gyi4TkACZwKW0ImJeLhbUNHK1tI\r\nSvQkLcegBOYSdrjvdM+aawGC8YFEjhG2/WiVMt29nnHO6g3t3dKcuyP2s4I98Fq+\r\nRutELEBpo+d2elclGrgCtmT2RUYf1nS9afmFCiiNdrxvldaP7slfYahi5h8MdfcT\r\nKbZWGCv01Kgo6riN5cYYF33UJC1zShXMkdeGk+6C2+BhZqxMv046o6GWS6/8mcFC\r\nNuKoFTzVEOkEaNriNgkkROW1HT/ur8RsjX9XhsqTD/9L9Qgy/7mDkhlt4RbeuFIz\r\nX19kSXz1KfVUW15M5OSBtbX4xc+Pcn5TC6P6OJOLFQO2gB5ehfwQowctAgMBAAGj\r\ngdQwgdEwCQYDVR0TBAIwADAfBgNVHSMEGDAWgBQUFWn9NPQRCP9Zu04ZzJWXIorg\r\nPDAdBgNVHQ4EFgQU0AnPlbVjF2ThLhrMkYR0ybBcdHEwDgYDVR0PAQH/BAQDAgWg\r\nMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjBVBgNVHR8ETjBMMEqgSKBG\r\nhkRodHRwOi8vY3JsLWFwaS5iaS5sb2NhbC9jcmwvMTkzNjRlNzYtYzRiZS00MGI2\r\nLTljNzEtYTNhN2I0MDQ3NGE0LmNybDANBgkqhkiG9w0BAQsFAAOCAQEAwHgc6xz1\r\nYhmS+erRKqCN1LdHJZmM+heGOQmO32ZqJR57ACypcMnTYGLpJIENpx57tDURo0v1\r\nNY7o9LgD1jdFbvtmMeNFciyZgoFPhuFMnbA4b1VktrxG8P5qZsChrvfPfhuHFtKM\r\naeoowMA9oiW3/o36rc0+/7yrf6pamBV/wqdnfVORJEo7uG/ryUyCgf2kIgwICNrO\r\ngEtWxFuqI4VAqw1WCssuc8Lk3Qtnwj1pmy7AnrpOIzFavS9Npsyxj710jnGSVYez\r\niIWVzmht9qt/6DcE1bpzpNwJMYeSPtGik9lMGVPA9P07mJc5s3/ml5cZiUly0Fot\r\nc6CcaZWmjs0sLg==\r\n-----END CERTIFICATE-----	-----BEGIN PRIVATE KEY-----\r\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDa9Gyi4TkACZwK\r\nW0ImJeLhbUNHK1tISvQkLcegBOYSdrjvdM+aawGC8YFEjhG2/WiVMt29nnHO6g3t\r\n3dKcuyP2s4I98Fq+RutELEBpo+d2elclGrgCtmT2RUYf1nS9afmFCiiNdrxvldaP\r\n7slfYahi5h8MdfcTKbZWGCv01Kgo6riN5cYYF33UJC1zShXMkdeGk+6C2+BhZqxM\r\nv046o6GWS6/8mcFCNuKoFTzVEOkEaNriNgkkROW1HT/ur8RsjX9XhsqTD/9L9Qgy\r\n/7mDkhlt4RbeuFIzX19kSXz1KfVUW15M5OSBtbX4xc+Pcn5TC6P6OJOLFQO2gB5e\r\nhfwQowctAgMBAAECggEABKkdQt5Oa0zJEINexhcaXDgKLZKjr8dAqSB8VlCkYRI7\r\n34T6AkxyzMm9OatYfy+nsT1S8P1VaNUclMqa+BEXs+GgTRc3p0M1MM9MU7NUcvYp\r\nsrV94zjkr0VMN9NFyt5dnFJaCKDVY/6pgYjQqoIWpnxFfutn5fWGVxDOprh8F9rV\r\nGuphat/I0uXTm1geiXjfSpsitjObNb7lQ6wMlO5Vs8Uz9wojA5f5Clv/F/p7ymj9\r\ncl/9Uuv4+SBfoJJex80xvjWl6zQZR7+N+6KONxXEZlwEOiKi2oYARu0kuGfh/kXx\r\n3gfIRtXxRpzZroqhDGQ6M5I3rfPO2Uicc1NvUtbsAQKBgQDkXH+fqrKz5KQMtR7N\r\nKH7VPib6daaffCF2EhJlexSKTUFe2DdJB25lIJgLhD8M8SZpky4zkXhNq+Ut2hvK\r\nKnT0biDQMItf68YjHsl15zfBrBF9xCamF8uDmX9YWEBHKzZnDZ8yJm9jAAPtIciE\r\nIpOsPBtvFwtEiz9B5Eod4Yb4LQKBgQD1dHm5jsGEoEmINmuI8f3yx7R3BIZKX6dj\r\notpfqwVXIN5SkNJnB2btxyk+iIBsJu+FbZjdTBereF0vc9JOpHaVqjLBJ/luZ+vH\r\nUKwbTdARoc2nwcYorvb98FUgeZFWacCPBD7ZssUcXdmA6UtcLmY94aNtdcii5CZM\r\n+3KedG6rAQKBgB5XvA13HO+SPcoCdulDrDahX4SABXfDgp6xoAgj5oLJ6Rm1GQN3\r\nHVAKmKlPFSGfGT+F8umfNqD7aiRBite99HRV/b4r9Rj1twoLmTE1W888EcboPUps\r\ndvoxdx5B+6h5MW1X/gMn4D0DT4I+run/vidwhSSppzGgXvNeZgq6YLixAoGAQZdb\r\ng9uDGRbgL3cja1gHXZ5COl/KJwvCplx5cIE6DxtobbXnk8KlnbrP6bb+YmhRL12n\r\nMNPJq3ehpzGTLJLEYaA2qektvXQlzIBhTXaQuHV9iGu+sVZ4CEn15ZS24tmlrFId\r\nHX2pMLhfjBRLoBmCFt06F+EWuXiwR3gWHAPPIwECgYBywABll1YVrkyqboXXbPG5\r\nqV4HTpVT026DneuNzmIZblMbj4VohRYVamFtmCq/Fq9j/RRr3QihgWXv/+PgapGW\r\n6erHClgFOzHCTICFHOHZtNgtK7PIcgVy7vXAAyN9mceK4BtWYWg1fcD1LYDfIjrP\r\nzORc8LW057HwPgi6imke5Q==\r\n-----END PRIVATE KEY-----\r\n	2025-01-23 02:52:36.850231	production	minha_chave_pix	https://alzvmiqpxhnntzamzdpq.supabase.co/storage/v1/object/public/admin/images/ca.crt	https://alzvmiqpxhnntzamzdpq.supabase.co/storage/v1/object/public/admin/images/API_Certificado.crt	https://alzvmiqpxhnntzamzdpq.supabase.co/storage/v1/object/public/admin/images/API_Chave.key
\.


--
-- Data for Name: notification_recipients; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.notification_recipients (id, created_at, notification_id, player_id, external_user_id) FROM stdin;
\.


--
-- Data for Name: notifications; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.notifications (id, created_at, title, content, big_image, url, paramname, itemid, read) FROM stdin;
\.


--
-- Data for Name: prizes; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.prizes (id, name, description, value, created_at, updated_at, image_url) FROM stdin;
24aa9432-62a7-4347-a026-1c996e86e925	Moto	Uma moto esportiva	15000.00	2025-01-12 23:15:58.271498+00	2025-01-12 23:15:58.271498+00	https://picsum.photos/seed/873/600
5b206bf3-e6cc-41d5-9dff-4f8ab2910ffd	Console de Jogos	Um console de jogos	2500.00	2025-01-12 23:15:58.271498+00	2025-01-12 23:15:58.271498+00	https://picsum.photos/seed/873/600
5dbc8d8b-497b-496a-b599-b73609768701	Bicicleta	Uma bicicleta de alta performance	2000.00	2025-01-12 23:15:58.271498+00	2025-01-12 23:15:58.271498+00	https://picsum.photos/seed/873/600
67d200e2-395c-482e-9603-da85a27d93bb	Carro	Um carro novo	50000.00	2025-01-12 23:15:58.271498+00	2025-01-12 23:15:58.271498+00	https://picsum.photos/seed/873/600
6a8abc95-a266-4d4b-9a0e-e74d86b93d64	Viagem	Uma viagem com tudo pago	10000.00	2025-01-12 23:15:58.271498+00	2025-01-12 23:15:58.271498+00	https://picsum.photos/seed/873/600
a30fbc0a-76f2-4ccb-a8e3-ef03805a9e8d	TV	Uma TV de última geração	2000.00	2025-01-12 23:15:58.271498+00	2025-01-12 23:15:58.271498+00	https://picsum.photos/seed/873/600
ab749925-f22f-44e8-82c3-55a61cdcf781	Laptop	Um laptop poderoso	6000.00	2025-01-12 23:15:58.271498+00	2025-01-12 23:15:58.271498+00	https://picsum.photos/seed/873/600
a1be8c08-bec6-419b-8b0f-5b0c4327a837	Tablet	Um tablet moderno	3000.00	2025-01-12 23:15:58.271498+00	2025-01-12 23:15:58.271498+00	https://picsum.photos/seed/873/600
b0caf3ef-6801-4d68-a45d-c3f2d9213b71	iPhone	Um iPhone de última geração	7000.00	2025-01-12 23:15:58.271498+00	2025-01-12 23:15:58.271498+00	https://picsum.photos/seed/873/600
c11ec667-22e0-4e5e-bbd9-164fcf0fd3e1	Câmera	Uma câmera fotográfica profissional	8000.00	2025-01-12 23:15:58.271498+00	2025-01-12 23:15:58.271498+00	https://picsum.photos/seed/873/600
d4dc5945-8f13-491e-ba35-f3beae469e5f	Voucher	Um voucher de compras	500.00	2025-01-12 23:15:58.271498+00	2025-01-12 23:15:58.271498+00	https://picsum.photos/seed/873/600
ecff4a75-d22e-4f6c-a73a-2c277bd915f3	Relógio	Um relógio inteligente	1500.00	2025-01-12 23:15:58.271498+00	2025-01-12 23:15:58.271498+00	https://picsum.photos/seed/873/600
\.


--
-- Data for Name: product_categories; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.product_categories (id, category_name, firm_id) FROM stdin;
\.


--
-- Data for Name: products; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.products (id, category_id, product_name, product_description, price, created_at, image) FROM stdin;
\.


--
-- Data for Name: raffle_categories; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.raffle_categories (id, name, description, created_at, updated_at) FROM stdin;
404f0ab8-5afb-4344-938e-186281c3c5ea	Automóveis	\N	2025-01-28 05:55:48.996412+00	2025-01-28 05:55:48.996412+00
\.


--
-- Data for Name: raffle_packages; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.raffle_packages (id, raffle_id, package_name, quantity, price) FROM stdin;
ba057f54-a08d-45e4-ac92-450d89ee4137	0d61769e-c19f-4d37-bbcf-a9f696754bc9	+5	5	2.50
a61416d8-aa37-464d-b244-08632edd2392	0d61769e-c19f-4d37-bbcf-a9f696754bc9	+10	10	5.00
7ae962e3-4cb4-4915-893e-1d7d82036a60	0d61769e-c19f-4d37-bbcf-a9f696754bc9	+50	50	12.50
\.


--
-- Data for Name: raffle_prizes; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.raffle_prizes (id, raffle_id, prize_id, quantity, created_at, updated_at) FROM stdin;
077ee0e3-2dad-4c1d-9c10-256502fc1a2a	0d61769e-c19f-4d37-bbcf-a9f696754bc9	a30fbc0a-76f2-4ccb-a8e3-ef03805a9e8d	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
0910cacd-bbcf-4bc5-b871-99cb1859c6c1	0d61769e-c19f-4d37-bbcf-a9f696754bc9	67d200e2-395c-482e-9603-da85a27d93bb	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
98c7798c-3fb5-427b-9cb7-bd73af0dd1e6	0d61769e-c19f-4d37-bbcf-a9f696754bc9	24aa9432-62a7-4347-a026-1c996e86e925	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
1a1bf173-fecd-4683-915f-cb8792dec5fb	0d61769e-c19f-4d37-bbcf-a9f696754bc9	b0caf3ef-6801-4d68-a45d-c3f2d9213b71	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
6453921f-1e45-48a9-942d-4363dbb40b99	57abfe28-1a0c-4f4d-9c05-3a99e4c69b07	ab749925-f22f-44e8-82c3-55a61cdcf781	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
1effb32c-20bb-4f15-997d-d8346db7235b	57abfe28-1a0c-4f4d-9c05-3a99e4c69b07	6a8abc95-a266-4d4b-9a0e-e74d86b93d64	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
ef495c77-4d3e-4faa-9965-af8311d3d335	57abfe28-1a0c-4f4d-9c05-3a99e4c69b07	5dbc8d8b-497b-496a-b599-b73609768701	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
890595b8-7458-45f1-864f-7822f231547c	57abfe28-1a0c-4f4d-9c05-3a99e4c69b07	a1be8c08-bec6-419b-8b0f-5b0c4327a837	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
63b65654-7937-44ad-a0c9-e987a5ca76d7	ee46f822-ec4c-41e1-9781-13da79c7a321	ecff4a75-d22e-4f6c-a73a-2c277bd915f3	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
7bd6510b-7b02-4c3b-b760-a4625f2d71ed	ee46f822-ec4c-41e1-9781-13da79c7a321	5b206bf3-e6cc-41d5-9dff-4f8ab2910ffd	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
c46c9fa8-d62f-48bf-9bcc-2a2a7e57769a	ee46f822-ec4c-41e1-9781-13da79c7a321	d4dc5945-8f13-491e-ba35-f3beae469e5f	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
863a4082-f5e0-46ee-b5b7-e9516c5136bc	ee46f822-ec4c-41e1-9781-13da79c7a321	c11ec667-22e0-4e5e-bbd9-164fcf0fd3e1	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
75be65f1-3c7d-4cf8-aaf6-ba149aca175c	9dda4137-012f-4c4b-8cec-9759d5bb999d	a30fbc0a-76f2-4ccb-a8e3-ef03805a9e8d	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
d4db836c-8a1d-4084-b9d8-bcdca1f7817f	9dda4137-012f-4c4b-8cec-9759d5bb999d	67d200e2-395c-482e-9603-da85a27d93bb	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
708ce8a3-481f-4b8b-9860-9abe2430ed5a	9dda4137-012f-4c4b-8cec-9759d5bb999d	24aa9432-62a7-4347-a026-1c996e86e925	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
19df1cf2-db17-4bd2-a044-106343175f1c	9dda4137-012f-4c4b-8cec-9759d5bb999d	b0caf3ef-6801-4d68-a45d-c3f2d9213b71	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
4b45bfc4-092b-4a52-b078-c0a702da0001	422c75fe-5128-437c-8566-73680db01ee8	ab749925-f22f-44e8-82c3-55a61cdcf781	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
fa106005-f280-4648-b1fc-29074edc4351	422c75fe-5128-437c-8566-73680db01ee8	6a8abc95-a266-4d4b-9a0e-e74d86b93d64	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
dcc76537-b5f2-4be0-8783-fdb85f2c5923	422c75fe-5128-437c-8566-73680db01ee8	5dbc8d8b-497b-496a-b599-b73609768701	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
33ca5537-26c2-4b84-ae11-96cb948da376	422c75fe-5128-437c-8566-73680db01ee8	a1be8c08-bec6-419b-8b0f-5b0c4327a837	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
660eea84-be73-4147-9c51-43c42ad55512	89e718e3-1e59-4aa8-a226-54c6531732f6	ecff4a75-d22e-4f6c-a73a-2c277bd915f3	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
181befa7-96ac-4608-86af-437f5a763bda	89e718e3-1e59-4aa8-a226-54c6531732f6	5b206bf3-e6cc-41d5-9dff-4f8ab2910ffd	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
91349544-7dfb-4586-bc65-9b8b62e08398	89e718e3-1e59-4aa8-a226-54c6531732f6	d4dc5945-8f13-491e-ba35-f3beae469e5f	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
2a941dfd-9a9c-48c9-920e-704b4e2d64bf	89e718e3-1e59-4aa8-a226-54c6531732f6	c11ec667-22e0-4e5e-bbd9-164fcf0fd3e1	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
7a9fe2b3-7fb3-45c6-87a3-b91ff8fef047	3bba1dea-9428-4a86-8f31-8ad584820410	a30fbc0a-76f2-4ccb-a8e3-ef03805a9e8d	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
63e23cc5-e699-45b4-89de-cbc82aaf2d3d	3bba1dea-9428-4a86-8f31-8ad584820410	67d200e2-395c-482e-9603-da85a27d93bb	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
4ea0d534-19e6-4636-8186-bc9d20c89c17	3bba1dea-9428-4a86-8f31-8ad584820410	24aa9432-62a7-4347-a026-1c996e86e925	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
31cf68e3-1974-48fb-a66c-5b40f328f218	3bba1dea-9428-4a86-8f31-8ad584820410	b0caf3ef-6801-4d68-a45d-c3f2d9213b71	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
6556c906-b6b1-48b5-aff7-27e7c7c85f9d	20cad319-2aff-4681-8460-6945f674d43f	ab749925-f22f-44e8-82c3-55a61cdcf781	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
fe9fb111-2a33-43ac-909d-75b2ec8a72b7	20cad319-2aff-4681-8460-6945f674d43f	6a8abc95-a266-4d4b-9a0e-e74d86b93d64	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
e259df63-bd13-4e31-bff6-c4bca9488094	20cad319-2aff-4681-8460-6945f674d43f	5dbc8d8b-497b-496a-b599-b73609768701	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
c3c56054-02a5-4209-a7e3-433eac2cc37d	20cad319-2aff-4681-8460-6945f674d43f	a1be8c08-bec6-419b-8b0f-5b0c4327a837	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
7113f7f0-4654-4ade-979d-a869eb60e26b	670902d7-2309-4a99-ac73-3c7777c1c10c	ecff4a75-d22e-4f6c-a73a-2c277bd915f3	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
8fb0380a-2a34-458d-a953-79adabd8a950	670902d7-2309-4a99-ac73-3c7777c1c10c	5b206bf3-e6cc-41d5-9dff-4f8ab2910ffd	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
58e7e54a-8093-4d68-96d5-e97c331dce66	670902d7-2309-4a99-ac73-3c7777c1c10c	d4dc5945-8f13-491e-ba35-f3beae469e5f	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
67682c73-ed8b-4959-b73b-0b83f0e559a3	670902d7-2309-4a99-ac73-3c7777c1c10c	c11ec667-22e0-4e5e-bbd9-164fcf0fd3e1	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
6ab784e6-0198-443f-8529-64ec5f094e54	df09d290-db12-42fe-b22d-a49359cf8b34	a30fbc0a-76f2-4ccb-a8e3-ef03805a9e8d	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
0ac5e5fa-0f70-4397-9d01-0aa318115504	df09d290-db12-42fe-b22d-a49359cf8b34	67d200e2-395c-482e-9603-da85a27d93bb	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
f9be5d13-c6b2-4685-8cc6-d40c85cac92d	df09d290-db12-42fe-b22d-a49359cf8b34	24aa9432-62a7-4347-a026-1c996e86e925	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
e2172137-a38e-46e4-83cc-b986b08e68e1	df09d290-db12-42fe-b22d-a49359cf8b34	b0caf3ef-6801-4d68-a45d-c3f2d9213b71	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
1fc38c39-9a37-4922-866e-922aabe5e542	af76859b-e8f9-469f-b9bf-3e9251d382ad	ab749925-f22f-44e8-82c3-55a61cdcf781	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
51208f79-8728-4d6b-80bb-157231618507	af76859b-e8f9-469f-b9bf-3e9251d382ad	6a8abc95-a266-4d4b-9a0e-e74d86b93d64	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
a8371aa5-b751-4d65-bba7-a488c42d0624	af76859b-e8f9-469f-b9bf-3e9251d382ad	5dbc8d8b-497b-496a-b599-b73609768701	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
571029d3-8069-49e3-8ed0-69e5bd5d5ecb	af76859b-e8f9-469f-b9bf-3e9251d382ad	a1be8c08-bec6-419b-8b0f-5b0c4327a837	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
f1d736fd-c112-45e2-9935-3be841ac52ea	bc11f725-893d-4870-bd9f-e61cd6625a5f	ecff4a75-d22e-4f6c-a73a-2c277bd915f3	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
1052a64b-ed0b-4b2e-b697-056455e74332	bc11f725-893d-4870-bd9f-e61cd6625a5f	5b206bf3-e6cc-41d5-9dff-4f8ab2910ffd	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
e45097ed-6e78-49c2-a1f4-d08bdb543c0c	bc11f725-893d-4870-bd9f-e61cd6625a5f	d4dc5945-8f13-491e-ba35-f3beae469e5f	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
449b5ac9-ebb2-45fa-a7fd-db26c08c6ad3	bc11f725-893d-4870-bd9f-e61cd6625a5f	c11ec667-22e0-4e5e-bbd9-164fcf0fd3e1	1	2025-01-12 23:31:43.300294+00	2025-01-12 23:31:43.300294+00
\.


--
-- Data for Name: raffles; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.raffles (id, creator_id, title, description, prize_description, price_per_ticket_unit, total_tickets, available_tickets, draw_date, raffle_status, image_url, created_at, updated_at, unique_code, raffle_url, category_id, headline, susep) FROM stdin;
9dda4137-012f-4c4b-8cec-9759d5bb999d	87edf2aa-f396-4e27-8e79-dabec8af553b	Sorteio Espetacular	Prêmios espetaculares para você.	Ganhe prêmios incríveis!	0.5	100	100	2025-12-31 23:59:59+00	active	https://images.unsplash.com/photo-1534445867742-43195f401b6c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8N3x8aXRhbHl8ZW58MHx8MHx8&auto=format&fit=crop&w=900&q=60	2025-01-12 23:25:24.650288+00	2025-01-27 13:37:14.137142+00	unique_espetacular	http://example.com/raffle_espetacular	\N	A melhor rifa	\N
bc11f725-893d-4870-bd9f-e61cd6625a5f	87edf2aa-f396-4e27-8e79-dabec8af553b	Sorteio Iluminado	Prêmios iluminados para você.	Ilumine sua vida com esses prêmios.	0.5	100	100	2025-12-31 23:59:59+00	active	https://images.unsplash.com/photo-1534445867742-43195f401b6c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8N3x8aXRhbHl8ZW58MHx8MHx8&auto=format&fit=crop&w=900&q=60	2025-01-12 23:25:24.650288+00	2025-01-19 06:34:54.869759+00	unique_iluminado	http://example.com/raffle_iluminado	\N	A melhor rifa	\N
af76859b-e8f9-469f-b9bf-3e9251d382ad	87edf2aa-f396-4e27-8e79-dabec8af553b	Sorteio Glorioso	Prêmios gloriosos para você.	Sinta a glória desses prêmios.	0.5	100	100	2025-12-31 23:59:59+00	active	https://images.unsplash.com/photo-1534445867742-43195f401b6c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8N3x8aXRhbHl8ZW58MHx8MHx8&auto=format&fit=crop&w=900&q=60	2025-01-12 23:25:24.650288+00	2025-01-19 06:34:55.536573+00	unique_glorioso	http://example.com/raffle_glorioso	\N	A melhor rifa	\N
df09d290-db12-42fe-b22d-a49359cf8b34	87edf2aa-f396-4e27-8e79-dabec8af553b	Sorteio Supremo	Prêmios supremos para você.	Supere-se com esses prêmios.	0.5	100	100	2025-12-31 23:59:59+00	active	https://images.unsplash.com/photo-1534445867742-43195f401b6c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8N3x8aXRhbHl8ZW58MHx8MHx8&auto=format&fit=crop&w=900&q=60	2025-01-12 23:25:24.650288+00	2025-01-19 06:34:57.254877+00	unique_supremo	http://example.com/raffle_supremo	\N	A melhor rifa	\N
ee46f822-ec4c-41e1-9781-13da79c7a321	87edf2aa-f396-4e27-8e79-dabec8af553b	Sorteio dos Sonhos	Realize seus sonhos com esses prêmios.	Prêmios dos seus sonhos.	0.5	100	100	2025-12-31 23:59:59+00	active	https://images.unsplash.com/photo-1534445867742-43195f401b6c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8N3x8aXRhbHl8ZW58MHx8MHx8&auto=format&fit=crop&w=900&q=60	2025-01-12 23:25:24.650288+00	2025-01-19 06:34:58.237293+00	unique_sonhos	http://example.com/raffle_sonhos	\N	A melhor rifa	\N
0d61769e-c19f-4d37-bbcf-a9f696754bc9	87edf2aa-f396-4e27-8e79-dabec8af553b	Sorteio Maravilha	Um sorteio cheio de surpresas incríveis!	Prêmios espetaculares para você.	0.5	1000000	999763	2025-12-31 23:59:59+00	active	https://images.unsplash.com/photo-1534445867742-43195f401b6c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8N3x8aXRhbHl8ZW58MHx8MHx8&auto=format&fit=crop&w=900&q=60	2025-01-12 23:25:24.650288+00	2025-01-28 05:57:23.536255+00	unique_maravilha	http://example.com/raffle_maravilha	404f0ab8-5afb-4344-938e-186281c3c5ea	A melhor rifa	dfdfd
422c75fe-5128-437c-8566-73680db01ee8	87edf2aa-f396-4e27-8e79-dabec8af553b	Sorteio Mágico	Surpresas mágicas esperam por você.	Prêmios mágicos e encantadores.	0.5	100	100	2025-12-31 23:59:59+00	active	https://images.unsplash.com/photo-1534445867742-43195f401b6c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8N3x8aXRhbHl8ZW58MHx8MHx8&auto=format&fit=crop&w=900&q=60	2025-01-12 23:25:24.650288+00	2025-01-19 06:34:51.052668+00	unique_magico	http://example.com/raffle_magico	\N	A melhor rifa	\N
3bba1dea-9428-4a86-8f31-8ad584820410	87edf2aa-f396-4e27-8e79-dabec8af553b	Sorteio Incrível	Prêmios incríveis para você.	Ganhe prêmios incríveis!	0.5	100	100	2025-12-31 23:59:59+00	active	https://images.unsplash.com/photo-1534445867742-43195f401b6c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8N3x8aXRhbHl8ZW58MHx8MHx8&auto=format&fit=crop&w=900&q=60	2025-01-12 23:25:24.650288+00	2025-01-28 05:58:02.045341+00	unique_incrivel	http://example.com/raffle_incrivel	404f0ab8-5afb-4344-938e-186281c3c5ea	A melhor rifa	\N
20cad319-2aff-4681-8460-6945f674d43f	87edf2aa-f396-4e27-8e79-dabec8af553b	Sorteio Brilhante	Prêmios brilhantes para você.	Brilhe com esses prêmios.	0.5	100	100	2025-12-31 23:59:59+00	active	https://images.unsplash.com/photo-1534445867742-43195f401b6c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8N3x8aXRhbHl8ZW58MHx8MHx8&auto=format&fit=crop&w=900&q=60	2025-01-12 23:25:24.650288+00	2025-01-19 06:34:49.257065+00	unique_brilhante	http://example.com/raffle_brilhante	\N	A melhor rifa	\N
57abfe28-1a0c-4f4d-9c05-3a99e4c69b07	87edf2aa-f396-4e27-8e79-dabec8af553b	Sorteio Fantástico	Prêmios fantásticos para você concorrer.	Prêmios que vão te deixar sem fôlego.	0.5	100	100	2025-12-31 23:59:59+00	active	https://images.unsplash.com/photo-1534445867742-43195f401b6c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8N3x8aXRhbHl8ZW58MHx8MHx8&auto=format&fit=crop&w=900&q=60	2025-01-12 23:25:24.650288+00	2025-01-19 06:34:52.117348+00	unique_fantastico	http://example.com/raffle_fantastico	\N	A melhor rifa	\N
670902d7-2309-4a99-ac73-3c7777c1c10c	87edf2aa-f396-4e27-8e79-dabec8af553b	Sorteio Estrela	Prêmios estrelados para você.	Seja uma estrela com esses prêmios.	0.5	100	100	2025-12-31 23:59:59+00	active	https://images.unsplash.com/photo-1534445867742-43195f401b6c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8N3x8aXRhbHl8ZW58MHx8MHx8&auto=format&fit=crop&w=900&q=60	2025-01-12 23:25:24.650288+00	2025-01-19 06:34:52.880189+00	unique_estrela	http://example.com/raffle_estrela	\N	A melhor rifa	\N
89e718e3-1e59-4aa8-a226-54c6531732f6	87edf2aa-f396-4e27-8e79-dabec8af553b	Sorteio Deslumbrante	Prêmios deslumbrantes para você.	Deslumbre-se com esses prêmios.	0.5	100	100	2025-12-31 23:59:59+00	active	https://images.unsplash.com/photo-1534445867742-43195f401b6c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8N3x8aXRhbHl8ZW58MHx8MHx8&auto=format&fit=crop&w=900&q=60	2025-01-12 23:25:24.650288+00	2025-01-19 06:34:53.506598+00	unique_deslumbrante	http://example.com/raffle_deslumbrante	\N	A melhor rifa	\N
\.


--
-- Data for Name: reviews; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.reviews (id, created_at, client_id, influencer_id, feedback_text, rating, firm_id) FROM stdin;
85732385-47a4-46a0-b657-5adf056351db	2025-01-12 17:30:43.902919+00	87edf2aa-f396-4e27-8e79-dabec8af553b	412bbdd9-69da-434f-90c8-28e77dbc4e64	Laura é incrível! Altamente recomendada.	5	\N
0d6704c0-dc2e-4519-8cea-68c057ecc0d2	2025-01-12 17:30:43.902919+00	87edf2aa-f396-4e27-8e79-dabec8af553b	412bbdd9-69da-434f-90c8-28e77dbc4e64	Ótima experiência trabalhando com a Laura.	4	\N
a6d7f30b-30ab-4e82-a9fc-1a02c97bf60d	2025-01-12 17:30:43.902919+00	87edf2aa-f396-4e27-8e79-dabec8af553b	412bbdd9-69da-434f-90c8-28e77dbc4e64	Laura poderia melhorar na comunicação.	3	\N
a8b901ba-5eb6-4165-801d-e42735ed0b72	2025-01-12 17:30:43.902919+00	87edf2aa-f396-4e27-8e79-dabec8af553b	412bbdd9-69da-434f-90c8-28e77dbc4e64	Trabalho excelente e muito profissional.	5	\N
1f98fd13-4640-4284-8a11-67b8a44fa40f	2025-01-12 17:30:43.902919+00	87edf2aa-f396-4e27-8e79-dabec8af553b	412bbdd9-69da-434f-90c8-28e77dbc4e64	Não fiquei satisfeito com os resultados.	2	\N
\.


--
-- Data for Name: service_plans; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.service_plans (id, name, description, price, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: shared_raffles; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.shared_raffles (id, raffle_id, influencer_id, shared_date) FROM stdin;
\.


--
-- Data for Name: specializations; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.specializations (id, created_at, name, introduction, image) FROM stdin;
\.


--
-- Data for Name: support_tickets; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.support_tickets (id, user_id, subject, description, status, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: system_config; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.system_config (key, value) FROM stdin;
pix_key	sua_chave_pix_aqui
\.


--
-- Data for Name: tickets; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.tickets (id, raffle_id, user_id, ticket_number, purchase_date, status, payment_intent_id, transaction_id, created_at) FROM stdin;
1276e422-4bd3-422f-9c47-ad5e4d32b1ea	0d61769e-c19f-4d37-bbcf-a9f696754bc9	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	133764	2025-01-23 16:33:32.042727+00	pending	\N	190ec811-0339-4c6e-a22d-2fcbef3f9ff7	2025-01-23 16:33:32.042727+00
5f4b18c3-8168-4352-9381-4d9282b1f06e	0d61769e-c19f-4d37-bbcf-a9f696754bc9	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	938194	2025-01-23 16:33:32.042727+00	pending	\N	190ec811-0339-4c6e-a22d-2fcbef3f9ff7	2025-01-23 16:33:32.042727+00
a808b18a-c224-44fb-811e-d4ffb7749291	0d61769e-c19f-4d37-bbcf-a9f696754bc9	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	614809	2025-01-23 16:33:32.042727+00	pending	\N	190ec811-0339-4c6e-a22d-2fcbef3f9ff7	2025-01-23 16:33:32.042727+00
7e014ad6-709f-43a4-94bc-6f897a8ab498	0d61769e-c19f-4d37-bbcf-a9f696754bc9	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	843508	2025-01-23 16:33:32.042727+00	pending	\N	190ec811-0339-4c6e-a22d-2fcbef3f9ff7	2025-01-23 16:33:32.042727+00
43d8f7d0-8917-4ceb-ae30-1f541a12cce4	0d61769e-c19f-4d37-bbcf-a9f696754bc9	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	773478	2025-01-23 16:33:32.042727+00	pending	\N	190ec811-0339-4c6e-a22d-2fcbef3f9ff7	2025-01-23 16:33:32.042727+00
2113308a-a0a6-4358-b180-ef4908db21ff	0d61769e-c19f-4d37-bbcf-a9f696754bc9	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	439497	2025-01-23 16:33:32.042727+00	pending	\N	190ec811-0339-4c6e-a22d-2fcbef3f9ff7	2025-01-23 16:33:32.042727+00
d9e3d959-8518-47b9-ac0f-fd39d5695187	0d61769e-c19f-4d37-bbcf-a9f696754bc9	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	670602	2025-01-23 16:33:32.042727+00	pending	\N	190ec811-0339-4c6e-a22d-2fcbef3f9ff7	2025-01-23 16:33:32.042727+00
f9981b53-c6bd-4033-8a1e-983cdde31a2e	0d61769e-c19f-4d37-bbcf-a9f696754bc9	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	438713	2025-01-23 16:33:32.042727+00	pending	\N	190ec811-0339-4c6e-a22d-2fcbef3f9ff7	2025-01-23 16:33:32.042727+00
77c7b873-830b-4d37-99cd-badf98b5445f	0d61769e-c19f-4d37-bbcf-a9f696754bc9	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	654019	2025-01-23 16:33:32.042727+00	pending	\N	190ec811-0339-4c6e-a22d-2fcbef3f9ff7	2025-01-23 16:33:32.042727+00
b0402566-8014-4ece-8362-0032e2fea661	0d61769e-c19f-4d37-bbcf-a9f696754bc9	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	62620	2025-01-23 16:33:32.042727+00	pending	\N	190ec811-0339-4c6e-a22d-2fcbef3f9ff7	2025-01-23 16:33:32.042727+00
54a96101-3f9d-4369-9ed5-6dfe11df630d	0d61769e-c19f-4d37-bbcf-a9f696754bc9	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	551544	2025-01-23 16:33:32.042727+00	pending	\N	190ec811-0339-4c6e-a22d-2fcbef3f9ff7	2025-01-23 16:33:32.042727+00
b134089f-e363-4c42-a824-f870cff3c1c3	0d61769e-c19f-4d37-bbcf-a9f696754bc9	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	663366	2025-01-23 16:33:32.042727+00	pending	\N	190ec811-0339-4c6e-a22d-2fcbef3f9ff7	2025-01-23 16:33:32.042727+00
bda7d75b-be45-4cee-ad7f-7a694ff82968	0d61769e-c19f-4d37-bbcf-a9f696754bc9	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	947049	2025-01-23 16:33:32.042727+00	pending	\N	190ec811-0339-4c6e-a22d-2fcbef3f9ff7	2025-01-23 16:33:32.042727+00
542e2ab1-7c7d-46c7-83a8-ce5ca9762fab	0d61769e-c19f-4d37-bbcf-a9f696754bc9	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	938822	2025-01-23 16:33:32.042727+00	pending	\N	190ec811-0339-4c6e-a22d-2fcbef3f9ff7	2025-01-23 16:33:32.042727+00
1549dbe6-c115-4c3d-a534-bd035472bb32	0d61769e-c19f-4d37-bbcf-a9f696754bc9	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	48980	2025-01-23 16:33:32.042727+00	pending	\N	190ec811-0339-4c6e-a22d-2fcbef3f9ff7	2025-01-23 16:33:32.042727+00
55a16beb-88eb-4ce9-92a3-4ec7b1aefd50	0d61769e-c19f-4d37-bbcf-a9f696754bc9	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	95434	2025-01-23 16:33:32.042727+00	pending	\N	190ec811-0339-4c6e-a22d-2fcbef3f9ff7	2025-01-23 16:33:32.042727+00
6ad25a96-5c83-4907-9d39-3ad48f83d318	0d61769e-c19f-4d37-bbcf-a9f696754bc9	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	609152	2025-01-23 16:33:32.042727+00	pending	\N	190ec811-0339-4c6e-a22d-2fcbef3f9ff7	2025-01-23 16:33:32.042727+00
df5be8bc-92c8-41b9-9444-3a9aaf16e1a7	0d61769e-c19f-4d37-bbcf-a9f696754bc9	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	628018	2025-01-23 16:33:32.042727+00	pending	\N	190ec811-0339-4c6e-a22d-2fcbef3f9ff7	2025-01-23 16:33:32.042727+00
d2e0e0b4-68df-45b3-a2c8-7e1a014fe5f2	0d61769e-c19f-4d37-bbcf-a9f696754bc9	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	531045	2025-01-23 16:33:32.042727+00	pending	\N	190ec811-0339-4c6e-a22d-2fcbef3f9ff7	2025-01-23 16:33:32.042727+00
1c9a5fd3-f231-4fc3-9236-a8f62417f179	0d61769e-c19f-4d37-bbcf-a9f696754bc9	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	110143	2025-01-23 16:33:32.042727+00	pending	\N	190ec811-0339-4c6e-a22d-2fcbef3f9ff7	2025-01-23 16:33:32.042727+00
fb764b88-2567-485c-9e6f-7a7e37259900	0d61769e-c19f-4d37-bbcf-a9f696754bc9	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	881569	2025-01-23 16:33:32.042727+00	pending	\N	190ec811-0339-4c6e-a22d-2fcbef3f9ff7	2025-01-23 16:33:32.042727+00
0af8308f-a3b0-4e0e-a3f5-e136c38ee77a	0d61769e-c19f-4d37-bbcf-a9f696754bc9	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	239707	2025-01-23 16:33:32.042727+00	pending	\N	190ec811-0339-4c6e-a22d-2fcbef3f9ff7	2025-01-23 16:33:32.042727+00
\.


--
-- Data for Name: transactions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.transactions (id, user_id, raffle_id, amount, type, status, created_at, quantity, updated_at, pix_txid, pix_qr_code, pix_key) FROM stdin;
052077cd-c028-44b0-8c7a-5dc4a1bfb164	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	0d61769e-c19f-4d37-bbcf-a9f696754bc9	11.00	purchase	pending	2025-01-23 20:08:37.196864+00	22	\N	9fd67faa628a9eff3f2378d1ad56478b	a294bc5c3e1beb1e4d5ac23ec9d1e825	minha_chave_pix
190ec811-0339-4c6e-a22d-2fcbef3f9ff7	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	0d61769e-c19f-4d37-bbcf-a9f696754bc9	11.00	purchase	pending	2025-01-23 16:06:56.696715+00	22	\N	af201f428eefbd409dfda254032a1cd2	08dce43f63a8027e6b3a60c116d97308	sua_chave_pix_aqui
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.users (id, name, image, phone, created_at, updated_at, balance, role, unique_code, profile_url, vatnumber, email, gender, birthdate, biography, sincejob, zipcode, address, number, complement, district, city, state, bank_type, bank_name, bank_agency, bank_account, bank_pix_type, bank_pix_key, rg, cpf, followers_youtube, followers_insta, followers_face, followers_tiktok, followers_kwai, followers_linkedin, url_youtube, url_insta, url_face, url_tiktok, url_kwai, url_linkedin, specialization_id) FROM stdin;
412bbdd9-69da-434f-90c8-28e77dbc4e64	laura	https://images.unsplash.com/photo-1534445867742-43195f401b6c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8N3x8aXRhbHl8ZW58MHx8MHx8&auto=format&fit=crop&w=900&q=60	12345678	2025-01-12 15:14:54.004138+00	2025-01-16 21:20:40.983432+00	0.00	client	\N	\N	\N	laura@taigostei.com	\N	1987-07-30	\N	1987-07-30	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
5f037798-a1e5-45d0-8434-500c23426fe1	Ana	https://images.unsplash.com/photo-1534445867742-43195f401b6c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8N3x8aXRhbHl8ZW58MHx8MHx8&auto=format&fit=crop&w=900&q=60	12345678	2025-01-12 14:39:37.530671+00	2025-01-16 21:20:42.21628+00	0.00	client	\N	\N	\N	ana@taigostei.com	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
87edf2aa-f396-4e27-8e79-dabec8af553b	Francisco	https://images.unsplash.com/photo-1534445867742-43195f401b6c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8N3x8aXRhbHl8ZW58MHx8MHx8&auto=format&fit=crop&w=900&q=60	12345678	2025-01-12 14:33:34.832155+00	2025-01-16 21:21:03.964667+00	0.00	influencer	\N	\N	\N		\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	Jeslley	\N	\N	2025-01-16 22:02:28.049892+00	2025-01-23 20:21:12.090297+00	0.00	client	\N	\N	07287463601	jeslleypires@gmail.com	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
7dcc4a77-218a-440f-9f3b-a5fd37f74508	Jonas	https://alzvmiqpxhnntzamzdpq.supabase.co/storage/v1/object/public/admin/profile/1737969959773378.jpg	\N	2025-01-27 09:26:00.203394+00	2025-01-27 09:27:14.157826+00	0.00	client	\N	\N	\N	sdiksoftwares@gmail.com		\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
750bc03a-f035-4880-984f-5b8bd12758c1	Aleixo	\N	\N	2025-01-29 04:36:50.68257+00	2025-01-29 04:36:50.68257+00	0.00	client	\N	\N	\N	aleixo_ferreira@hotmail.com	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
\.


--
-- Data for Name: winners; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.winners (id, raffle_id, ticket_id, user_id, draw_date, prize_claimed, claim_date) FROM stdin;
\.


--
-- Data for Name: messages_2025_01_16; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2025_01_16 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: messages_2025_01_17; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2025_01_17 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: messages_2025_01_18; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2025_01_18 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: messages_2025_01_19; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2025_01_19 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: messages_2025_01_20; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.messages_2025_01_20 (topic, extension, payload, event, private, updated_at, inserted_at, id) FROM stdin;
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.schema_migrations (version, inserted_at) FROM stdin;
20211116024918	2025-01-08 16:31:12
20211116045059	2025-01-08 16:31:13
20211116050929	2025-01-08 16:31:15
20211116051442	2025-01-08 16:31:16
20211116212300	2025-01-08 16:31:17
20211116213355	2025-01-08 16:31:18
20211116213934	2025-01-08 16:31:19
20211116214523	2025-01-08 16:31:21
20211122062447	2025-01-08 16:31:22
20211124070109	2025-01-08 16:31:23
20211202204204	2025-01-08 16:31:24
20211202204605	2025-01-08 16:31:26
20211210212804	2025-01-08 16:31:29
20211228014915	2025-01-08 16:31:30
20220107221237	2025-01-08 16:31:32
20220228202821	2025-01-08 16:31:33
20220312004840	2025-01-08 16:31:34
20220603231003	2025-01-08 16:31:36
20220603232444	2025-01-08 16:31:37
20220615214548	2025-01-08 16:31:38
20220712093339	2025-01-08 16:31:39
20220908172859	2025-01-08 16:31:41
20220916233421	2025-01-08 16:31:42
20230119133233	2025-01-08 16:31:43
20230128025114	2025-01-08 16:31:45
20230128025212	2025-01-08 16:31:46
20230227211149	2025-01-08 16:31:47
20230228184745	2025-01-08 16:31:48
20230308225145	2025-01-08 16:31:50
20230328144023	2025-01-08 16:31:51
20231018144023	2025-01-08 16:31:52
20231204144023	2025-01-08 16:31:54
20231204144024	2025-01-08 16:31:55
20231204144025	2025-01-08 16:31:56
20240108234812	2025-01-08 16:31:57
20240109165339	2025-01-08 16:31:59
20240227174441	2025-01-08 16:32:01
20240311171622	2025-01-08 16:32:02
20240321100241	2025-01-08 16:32:05
20240401105812	2025-01-08 16:32:08
20240418121054	2025-01-08 16:32:10
20240523004032	2025-01-08 16:32:14
20240618124746	2025-01-08 16:32:15
20240801235015	2025-01-08 16:32:16
20240805133720	2025-01-08 16:32:17
20240827160934	2025-01-08 16:32:18
20240919163303	2025-01-08 16:32:20
20240919163305	2025-01-08 16:32:21
20241019105805	2025-01-08 16:32:22
20241030150047	2025-01-08 16:32:26
20241108114728	2025-01-08 16:32:28
20241121104152	2025-01-08 16:32:29
20241130184212	2025-01-08 16:32:31
20241220035512	2025-01-08 16:32:32
20241220123912	2025-01-08 16:32:33
20241224161212	2025-01-08 16:32:34
20250107150512	2025-01-08 16:32:35
20250110162412	2025-01-12 04:06:39
20250123174212	2025-01-26 03:07:09
20250128220012	2025-01-30 08:10:51
\.


--
-- Data for Name: subscription; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.subscription (id, subscription_id, entity, filters, claims, created_at) FROM stdin;
\.


--
-- Data for Name: buckets; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.buckets (id, name, owner, created_at, updated_at, public, avif_autodetection, file_size_limit, allowed_mime_types, owner_id) FROM stdin;
admin	admin	\N	2025-01-17 03:42:01.736255+00	2025-01-17 03:42:01.736255+00	t	f	\N	\N	\N
\.


--
-- Data for Name: migrations; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.migrations (id, name, hash, executed_at) FROM stdin;
0	create-migrations-table	e18db593bcde2aca2a408c4d1100f6abba2195df	2025-01-08 16:30:07.37826
1	initialmigration	6ab16121fbaa08bbd11b712d05f358f9b555d777	2025-01-08 16:30:07.403513
2	storage-schema	5c7968fd083fcea04050c1b7f6253c9771b99011	2025-01-08 16:30:07.422563
3	pathtoken-column	2cb1b0004b817b29d5b0a971af16bafeede4b70d	2025-01-08 16:30:07.471362
4	add-migrations-rls	427c5b63fe1c5937495d9c635c263ee7a5905058	2025-01-08 16:30:07.511771
5	add-size-functions	79e081a1455b63666c1294a440f8ad4b1e6a7f84	2025-01-08 16:30:07.528809
6	change-column-name-in-get-size	f93f62afdf6613ee5e7e815b30d02dc990201044	2025-01-08 16:30:07.547178
7	add-rls-to-buckets	e7e7f86adbc51049f341dfe8d30256c1abca17aa	2025-01-08 16:30:07.56573
8	add-public-to-buckets	fd670db39ed65f9d08b01db09d6202503ca2bab3	2025-01-08 16:30:07.587257
9	fix-search-function	3a0af29f42e35a4d101c259ed955b67e1bee6825	2025-01-08 16:30:07.620007
10	search-files-search-function	68dc14822daad0ffac3746a502234f486182ef6e	2025-01-08 16:30:07.67666
11	add-trigger-to-auto-update-updated_at-column	7425bdb14366d1739fa8a18c83100636d74dcaa2	2025-01-08 16:30:07.699312
12	add-automatic-avif-detection-flag	8e92e1266eb29518b6a4c5313ab8f29dd0d08df9	2025-01-08 16:30:07.718149
13	add-bucket-custom-limits	cce962054138135cd9a8c4bcd531598684b25e7d	2025-01-08 16:30:07.735011
14	use-bytes-for-max-size	941c41b346f9802b411f06f30e972ad4744dad27	2025-01-08 16:30:07.759429
15	add-can-insert-object-function	934146bc38ead475f4ef4b555c524ee5d66799e5	2025-01-08 16:30:07.800288
16	add-version	76debf38d3fd07dcfc747ca49096457d95b1221b	2025-01-08 16:30:07.818366
17	drop-owner-foreign-key	f1cbb288f1b7a4c1eb8c38504b80ae2a0153d101	2025-01-08 16:30:07.835807
18	add_owner_id_column_deprecate_owner	e7a511b379110b08e2f214be852c35414749fe66	2025-01-08 16:30:07.854658
19	alter-default-value-objects-id	02e5e22a78626187e00d173dc45f58fa66a4f043	2025-01-08 16:30:07.875961
20	list-objects-with-delimiter	cd694ae708e51ba82bf012bba00caf4f3b6393b7	2025-01-08 16:30:07.894481
21	s3-multipart-uploads	8c804d4a566c40cd1e4cc5b3725a664a9303657f	2025-01-08 16:30:07.921721
22	s3-multipart-uploads-big-ints	9737dc258d2397953c9953d9b86920b8be0cdb73	2025-01-08 16:30:07.968446
23	optimize-search-function	9d7e604cddc4b56a5422dc68c9313f4a1b6f132c	2025-01-08 16:30:08.007869
24	operation-function	8312e37c2bf9e76bbe841aa5fda889206d2bf8aa	2025-01-08 16:30:08.02466
25	custom-metadata	67eb93b7e8d401cafcdc97f9ac779e71a79bfe03	2025-01-08 16:30:08.04304
\.


--
-- Data for Name: objects; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.objects (id, bucket_id, name, owner, created_at, updated_at, last_accessed_at, metadata, version, owner_id, user_metadata) FROM stdin;
4a1ad415-2919-4aaa-8478-6b3566a09e14	admin	images/1737095732209000.png	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	2025-01-17 06:35:35.229775+00	2025-01-17 06:35:35.229775+00	2025-01-17 06:35:35.229775+00	{"eTag": "\\"a7a928f949ee0e10a87340582444998a\\"", "size": 18618, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2025-01-17T06:35:36.000Z", "contentLength": 18618, "httpStatusCode": 200}	53253284-4650-41e8-bdad-771d4ea06517	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	{}
fad2944a-b79d-43d9-99cd-4e2699e4f6f0	admin	images/1737096010849000.png	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	2025-01-17 06:40:13.817926+00	2025-01-17 06:40:13.817926+00	2025-01-17 06:40:13.817926+00	{"eTag": "\\"a7a928f949ee0e10a87340582444998a\\"", "size": 18618, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2025-01-17T06:40:14.000Z", "contentLength": 18618, "httpStatusCode": 200}	f586f51d-87c8-4743-b405-d8ae29d1269d	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	{}
165490a6-6450-4b51-93f8-70069191260b	admin	images/1737096483349000.png	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	2025-01-17 06:48:06.36216+00	2025-01-17 06:48:06.36216+00	2025-01-17 06:48:06.36216+00	{"eTag": "\\"a7a928f949ee0e10a87340582444998a\\"", "size": 18618, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2025-01-17T06:48:07.000Z", "contentLength": 18618, "httpStatusCode": 200}	c8921f72-3711-42e1-abcd-2287b21a1a7f	4bc8ec52-7b9c-42fa-889f-90f3b96f21bf	{}
ef64998c-21c9-4321-aaea-c6dafa8035ba	admin	images/API_Certificado.crt	\N	2025-01-25 17:30:16.739974+00	2025-01-25 17:34:54.901417+00	2025-01-25 17:30:16.739974+00	{"eTag": "\\"53b74e30c911e9375c0002495f8d7f0a\\"", "size": 1630, "mimetype": "application/x-x509-ca-cert", "cacheControl": "max-age=3600", "lastModified": "2025-01-25T17:34:55.000Z", "contentLength": 1630, "httpStatusCode": 200}	6fc8b02b-ffb5-4179-b541-602e12f66505	\N	\N
247f0141-5363-472d-88fb-6e6ba94e77a9	admin	images/API_Chave.key	\N	2025-01-25 17:30:16.771563+00	2025-01-25 17:35:04.444583+00	2025-01-25 17:30:16.771563+00	{"eTag": "\\"8db2db57a274e80564efcb868b3a1406\\"", "size": 1704, "mimetype": "application/x-iwork-keynote-sffkey", "cacheControl": "max-age=3600", "lastModified": "2025-01-25T17:35:05.000Z", "contentLength": 1704, "httpStatusCode": 200}	8b29c895-8c5d-4820-862f-0058fcd13207	\N	\N
6f6c66a7-9c34-4cef-a30d-b2bd6c119521	admin	images/ca.crt	\N	2025-01-26 15:08:30.309227+00	2025-01-26 15:08:30.309227+00	2025-01-26 15:08:30.309227+00	{"eTag": "\\"d562c2001d14ed5d3d1742b4c9a32da7-1\\"", "size": 4113, "mimetype": "application/x-x509-ca-cert", "cacheControl": "max-age=3600", "lastModified": "2025-01-26T15:08:30.000Z", "contentLength": 4113, "httpStatusCode": 200}	0d24c6ca-ca90-4436-968a-03a8406bd150	\N	\N
6e3fc443-9acf-4dde-b651-887adedadc68	admin	profile/1737969955069167.jpg	7dcc4a77-218a-440f-9f3b-a5fd37f74508	2025-01-27 09:27:03.846873+00	2025-01-27 09:27:03.846873+00	2025-01-27 09:27:03.846873+00	{"eTag": "\\"ad80766be08ad5e733e641133ffa9bc5\\"", "size": 281958, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2025-01-27T09:27:04.000Z", "contentLength": 281958, "httpStatusCode": 200}	944c99b9-e2e6-4393-8c7d-fb7e85f241e3	7dcc4a77-218a-440f-9f3b-a5fd37f74508	{}
b4c270b1-5463-4dc7-8d76-3c926632cf41	admin	profile/1737969956517887.jpg	7dcc4a77-218a-440f-9f3b-a5fd37f74508	2025-01-27 09:27:10.464487+00	2025-01-27 09:27:10.464487+00	2025-01-27 09:27:10.464487+00	{"eTag": "\\"ad80766be08ad5e733e641133ffa9bc5\\"", "size": 281958, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2025-01-27T09:27:11.000Z", "contentLength": 281958, "httpStatusCode": 200}	1f035c22-7e15-49ad-a1ab-76ab4143c0a5	7dcc4a77-218a-440f-9f3b-a5fd37f74508	{}
59792c03-1adb-4747-bd9d-7f9d916ed48e	admin	profile/1737969957251129.jpg	7dcc4a77-218a-440f-9f3b-a5fd37f74508	2025-01-27 09:27:11.14839+00	2025-01-27 09:27:11.14839+00	2025-01-27 09:27:11.14839+00	{"eTag": "\\"ad80766be08ad5e733e641133ffa9bc5\\"", "size": 281958, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2025-01-27T09:27:12.000Z", "contentLength": 281958, "httpStatusCode": 200}	ecc9b42d-3e74-404e-bc69-ccb95d2acda9	7dcc4a77-218a-440f-9f3b-a5fd37f74508	{}
31a60f56-bb4e-4fde-8d33-15e4d8119011	admin	profile/1737969957591253.jpg	7dcc4a77-218a-440f-9f3b-a5fd37f74508	2025-01-27 09:27:11.94787+00	2025-01-27 09:27:11.94787+00	2025-01-27 09:27:11.94787+00	{"eTag": "\\"ad80766be08ad5e733e641133ffa9bc5\\"", "size": 281958, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2025-01-27T09:27:12.000Z", "contentLength": 281958, "httpStatusCode": 200}	baff812b-579c-4d85-9c2c-f40e8aa68110	7dcc4a77-218a-440f-9f3b-a5fd37f74508	{}
3e903b91-9bba-4270-8b8e-c8cc9adeaddb	admin	profile/1737969959773378.jpg	7dcc4a77-218a-440f-9f3b-a5fd37f74508	2025-01-27 09:27:13.935827+00	2025-01-27 09:27:13.935827+00	2025-01-27 09:27:13.935827+00	{"eTag": "\\"ad80766be08ad5e733e641133ffa9bc5\\"", "size": 281958, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2025-01-27T09:27:14.000Z", "contentLength": 281958, "httpStatusCode": 200}	d5bdfa02-bc80-4aba-8aa4-a8e39abb31bb	7dcc4a77-218a-440f-9f3b-a5fd37f74508	{}
\.


--
-- Data for Name: s3_multipart_uploads; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.s3_multipart_uploads (id, in_progress_size, upload_signature, bucket_id, key, version, owner_id, created_at, user_metadata) FROM stdin;
\.


--
-- Data for Name: s3_multipart_uploads_parts; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.s3_multipart_uploads_parts (id, upload_id, size, part_number, bucket_id, key, etag, owner_id, version, created_at) FROM stdin;
\.


--
-- Data for Name: hooks; Type: TABLE DATA; Schema: supabase_functions; Owner: supabase_functions_admin
--

COPY supabase_functions.hooks (id, hook_table_id, hook_name, created_at, request_id) FROM stdin;
\.


--
-- Data for Name: migrations; Type: TABLE DATA; Schema: supabase_functions; Owner: supabase_functions_admin
--

COPY supabase_functions.migrations (version, inserted_at) FROM stdin;
initial	2025-01-12 04:06:58.521757+00
20210809183423_update_grants	2025-01-12 04:06:58.521757+00
\.


--
-- Data for Name: secrets; Type: TABLE DATA; Schema: vault; Owner: supabase_admin
--

COPY vault.secrets (id, name, description, secret, key_id, nonce, created_at, updated_at) FROM stdin;
\.


--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE SET; Schema: auth; Owner: supabase_auth_admin
--

SELECT pg_catalog.setval('auth.refresh_tokens_id_seq', 170, true);


--
-- Name: key_key_id_seq; Type: SEQUENCE SET; Schema: pgsodium; Owner: supabase_admin
--

SELECT pg_catalog.setval('pgsodium.key_key_id_seq', 1, false);


--
-- Name: event_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.event_id_seq', 1, false);


--
-- Name: notification_recipients_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.notification_recipients_id_seq', 1, false);


--
-- Name: subscription_id_seq; Type: SEQUENCE SET; Schema: realtime; Owner: supabase_admin
--

SELECT pg_catalog.setval('realtime.subscription_id_seq', 1, false);


--
-- Name: hooks_id_seq; Type: SEQUENCE SET; Schema: supabase_functions; Owner: supabase_functions_admin
--

SELECT pg_catalog.setval('supabase_functions.hooks_id_seq', 1, false);


--
-- Name: mfa_amr_claims amr_id_pk; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT amr_id_pk PRIMARY KEY (id);


--
-- Name: audit_log_entries audit_log_entries_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.audit_log_entries
    ADD CONSTRAINT audit_log_entries_pkey PRIMARY KEY (id);


--
-- Name: flow_state flow_state_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.flow_state
    ADD CONSTRAINT flow_state_pkey PRIMARY KEY (id);


--
-- Name: identities identities_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_pkey PRIMARY KEY (id);


--
-- Name: identities identities_provider_id_provider_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_provider_id_provider_unique UNIQUE (provider_id, provider);


--
-- Name: instances instances_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.instances
    ADD CONSTRAINT instances_pkey PRIMARY KEY (id);


--
-- Name: mfa_amr_claims mfa_amr_claims_session_id_authentication_method_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_authentication_method_pkey UNIQUE (session_id, authentication_method);


--
-- Name: mfa_challenges mfa_challenges_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_pkey PRIMARY KEY (id);


--
-- Name: mfa_factors mfa_factors_last_challenged_at_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_last_challenged_at_key UNIQUE (last_challenged_at);


--
-- Name: mfa_factors mfa_factors_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_pkey PRIMARY KEY (id);


--
-- Name: one_time_tokens one_time_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.one_time_tokens
    ADD CONSTRAINT one_time_tokens_pkey PRIMARY KEY (id);


--
-- Name: refresh_tokens refresh_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_pkey PRIMARY KEY (id);


--
-- Name: refresh_tokens refresh_tokens_token_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_token_unique UNIQUE (token);


--
-- Name: saml_providers saml_providers_entity_id_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_entity_id_key UNIQUE (entity_id);


--
-- Name: saml_providers saml_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_pkey PRIMARY KEY (id);


--
-- Name: saml_relay_states saml_relay_states_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_pkey PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: sessions sessions_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_pkey PRIMARY KEY (id);


--
-- Name: sso_domains sso_domains_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_pkey PRIMARY KEY (id);


--
-- Name: sso_providers sso_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_providers
    ADD CONSTRAINT sso_providers_pkey PRIMARY KEY (id);


--
-- Name: users users_phone_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_phone_key UNIQUE (phone);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: banner banner_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.banner
    ADD CONSTRAINT banner_pkey PRIMARY KEY (id);


--
-- Name: cashback cashback_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cashback
    ADD CONSTRAINT cashback_pkey PRIMARY KEY (id);


--
-- Name: contracts contracts_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.contracts
    ADD CONSTRAINT contracts_pkey PRIMARY KEY (id);


--
-- Name: event event_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.event
    ADD CONSTRAINT event_pkey PRIMARY KEY (id);


--
-- Name: faq faq_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.faq
    ADD CONSTRAINT faq_pkey PRIMARY KEY (id);


--
-- Name: influencer_payments influencer_payments_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.influencer_payments
    ADD CONSTRAINT influencer_payments_pkey PRIMARY KEY (id);


--
-- Name: inter_credentials inter_credentials_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.inter_credentials
    ADD CONSTRAINT inter_credentials_pkey PRIMARY KEY (id);


--
-- Name: firms law_firms_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.firms
    ADD CONSTRAINT law_firms_pkey PRIMARY KEY (id);


--
-- Name: notification_recipients notification_recipients_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.notification_recipients
    ADD CONSTRAINT notification_recipients_pkey PRIMARY KEY (id);


--
-- Name: notifications notifications_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.notifications
    ADD CONSTRAINT notifications_pkey PRIMARY KEY (id);


--
-- Name: prizes prizes_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.prizes
    ADD CONSTRAINT prizes_pkey PRIMARY KEY (id);


--
-- Name: product_categories product_categories_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_categories
    ADD CONSTRAINT product_categories_pkey PRIMARY KEY (id);


--
-- Name: products products_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.products
    ADD CONSTRAINT products_pkey PRIMARY KEY (id);


--
-- Name: users profiles_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT profiles_pkey PRIMARY KEY (id);


--
-- Name: users profiles_profile_url_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT profiles_profile_url_key UNIQUE (profile_url);


--
-- Name: users profiles_unique_code_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT profiles_unique_code_key UNIQUE (unique_code);


--
-- Name: raffle_categories raffle_categories_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.raffle_categories
    ADD CONSTRAINT raffle_categories_pkey PRIMARY KEY (id);


--
-- Name: raffle_packages raffle_packages_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.raffle_packages
    ADD CONSTRAINT raffle_packages_pkey PRIMARY KEY (id);


--
-- Name: raffle_prizes raffle_prizes_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.raffle_prizes
    ADD CONSTRAINT raffle_prizes_pkey PRIMARY KEY (id);


--
-- Name: raffles raffles_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.raffles
    ADD CONSTRAINT raffles_pkey PRIMARY KEY (id);


--
-- Name: raffles raffles_raffle_url_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.raffles
    ADD CONSTRAINT raffles_raffle_url_key UNIQUE (raffle_url);


--
-- Name: raffles raffles_unique_code_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.raffles
    ADD CONSTRAINT raffles_unique_code_key UNIQUE (unique_code);


--
-- Name: reviews reviews_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.reviews
    ADD CONSTRAINT reviews_pkey PRIMARY KEY (id);


--
-- Name: service_plans service_plans_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_plans
    ADD CONSTRAINT service_plans_pkey PRIMARY KEY (id);


--
-- Name: shared_raffles shared_raffles_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.shared_raffles
    ADD CONSTRAINT shared_raffles_pkey PRIMARY KEY (id);


--
-- Name: shared_raffles shared_raffles_raffle_id_influencer_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.shared_raffles
    ADD CONSTRAINT shared_raffles_raffle_id_influencer_id_key UNIQUE (raffle_id, influencer_id);


--
-- Name: specializations specializations_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.specializations
    ADD CONSTRAINT specializations_pkey PRIMARY KEY (id);


--
-- Name: support_tickets support_tickets_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.support_tickets
    ADD CONSTRAINT support_tickets_pkey PRIMARY KEY (id);


--
-- Name: system_config system_config_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.system_config
    ADD CONSTRAINT system_config_pkey PRIMARY KEY (key);


--
-- Name: tickets tickets_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tickets
    ADD CONSTRAINT tickets_pkey PRIMARY KEY (id);


--
-- Name: tickets tickets_raffle_id_ticket_number_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tickets
    ADD CONSTRAINT tickets_raffle_id_ticket_number_key UNIQUE (raffle_id, ticket_number);


--
-- Name: transactions transactions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.transactions
    ADD CONSTRAINT transactions_pkey PRIMARY KEY (id);


--
-- Name: winners winners_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.winners
    ADD CONSTRAINT winners_pkey PRIMARY KEY (id);


--
-- Name: winners winners_raffle_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.winners
    ADD CONSTRAINT winners_raffle_id_key UNIQUE (raffle_id);


--
-- Name: messages messages_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE ONLY realtime.messages
    ADD CONSTRAINT messages_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: messages_2025_01_16 messages_2025_01_16_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages_2025_01_16
    ADD CONSTRAINT messages_2025_01_16_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: messages_2025_01_17 messages_2025_01_17_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages_2025_01_17
    ADD CONSTRAINT messages_2025_01_17_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: messages_2025_01_18 messages_2025_01_18_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages_2025_01_18
    ADD CONSTRAINT messages_2025_01_18_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: messages_2025_01_19 messages_2025_01_19_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages_2025_01_19
    ADD CONSTRAINT messages_2025_01_19_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: messages_2025_01_20 messages_2025_01_20_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.messages_2025_01_20
    ADD CONSTRAINT messages_2025_01_20_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: subscription pk_subscription; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.subscription
    ADD CONSTRAINT pk_subscription PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: buckets buckets_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.buckets
    ADD CONSTRAINT buckets_pkey PRIMARY KEY (id);


--
-- Name: migrations migrations_name_key; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_name_key UNIQUE (name);


--
-- Name: migrations migrations_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_pkey PRIMARY KEY (id);


--
-- Name: objects objects_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT objects_pkey PRIMARY KEY (id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_pkey PRIMARY KEY (id);


--
-- Name: s3_multipart_uploads s3_multipart_uploads_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads
    ADD CONSTRAINT s3_multipart_uploads_pkey PRIMARY KEY (id);


--
-- Name: hooks hooks_pkey; Type: CONSTRAINT; Schema: supabase_functions; Owner: supabase_functions_admin
--

ALTER TABLE ONLY supabase_functions.hooks
    ADD CONSTRAINT hooks_pkey PRIMARY KEY (id);


--
-- Name: migrations migrations_pkey; Type: CONSTRAINT; Schema: supabase_functions; Owner: supabase_functions_admin
--

ALTER TABLE ONLY supabase_functions.migrations
    ADD CONSTRAINT migrations_pkey PRIMARY KEY (version);


--
-- Name: audit_logs_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX audit_logs_instance_id_idx ON auth.audit_log_entries USING btree (instance_id);


--
-- Name: confirmation_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX confirmation_token_idx ON auth.users USING btree (confirmation_token) WHERE ((confirmation_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: email_change_token_current_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_current_idx ON auth.users USING btree (email_change_token_current) WHERE ((email_change_token_current)::text !~ '^[0-9 ]*$'::text);


--
-- Name: email_change_token_new_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_new_idx ON auth.users USING btree (email_change_token_new) WHERE ((email_change_token_new)::text !~ '^[0-9 ]*$'::text);


--
-- Name: factor_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX factor_id_created_at_idx ON auth.mfa_factors USING btree (user_id, created_at);


--
-- Name: flow_state_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX flow_state_created_at_idx ON auth.flow_state USING btree (created_at DESC);


--
-- Name: identities_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_email_idx ON auth.identities USING btree (email text_pattern_ops);


--
-- Name: INDEX identities_email_idx; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.identities_email_idx IS 'Auth: Ensures indexed queries on the email column';


--
-- Name: identities_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_user_id_idx ON auth.identities USING btree (user_id);


--
-- Name: idx_auth_code; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_auth_code ON auth.flow_state USING btree (auth_code);


--
-- Name: idx_user_id_auth_method; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_user_id_auth_method ON auth.flow_state USING btree (user_id, authentication_method);


--
-- Name: mfa_challenge_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_challenge_created_at_idx ON auth.mfa_challenges USING btree (created_at DESC);


--
-- Name: mfa_factors_user_friendly_name_unique; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX mfa_factors_user_friendly_name_unique ON auth.mfa_factors USING btree (friendly_name, user_id) WHERE (TRIM(BOTH FROM friendly_name) <> ''::text);


--
-- Name: mfa_factors_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_factors_user_id_idx ON auth.mfa_factors USING btree (user_id);


--
-- Name: one_time_tokens_relates_to_hash_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX one_time_tokens_relates_to_hash_idx ON auth.one_time_tokens USING hash (relates_to);


--
-- Name: one_time_tokens_token_hash_hash_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX one_time_tokens_token_hash_hash_idx ON auth.one_time_tokens USING hash (token_hash);


--
-- Name: one_time_tokens_user_id_token_type_key; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX one_time_tokens_user_id_token_type_key ON auth.one_time_tokens USING btree (user_id, token_type);


--
-- Name: reauthentication_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX reauthentication_token_idx ON auth.users USING btree (reauthentication_token) WHERE ((reauthentication_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: recovery_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX recovery_token_idx ON auth.users USING btree (recovery_token) WHERE ((recovery_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: refresh_tokens_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_idx ON auth.refresh_tokens USING btree (instance_id);


--
-- Name: refresh_tokens_instance_id_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_user_id_idx ON auth.refresh_tokens USING btree (instance_id, user_id);


--
-- Name: refresh_tokens_parent_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_parent_idx ON auth.refresh_tokens USING btree (parent);


--
-- Name: refresh_tokens_session_id_revoked_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_session_id_revoked_idx ON auth.refresh_tokens USING btree (session_id, revoked);


--
-- Name: refresh_tokens_updated_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_updated_at_idx ON auth.refresh_tokens USING btree (updated_at DESC);


--
-- Name: saml_providers_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_providers_sso_provider_id_idx ON auth.saml_providers USING btree (sso_provider_id);


--
-- Name: saml_relay_states_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_created_at_idx ON auth.saml_relay_states USING btree (created_at DESC);


--
-- Name: saml_relay_states_for_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_for_email_idx ON auth.saml_relay_states USING btree (for_email);


--
-- Name: saml_relay_states_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_sso_provider_id_idx ON auth.saml_relay_states USING btree (sso_provider_id);


--
-- Name: sessions_not_after_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_not_after_idx ON auth.sessions USING btree (not_after DESC);


--
-- Name: sessions_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_user_id_idx ON auth.sessions USING btree (user_id);


--
-- Name: sso_domains_domain_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_domains_domain_idx ON auth.sso_domains USING btree (lower(domain));


--
-- Name: sso_domains_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sso_domains_sso_provider_id_idx ON auth.sso_domains USING btree (sso_provider_id);


--
-- Name: sso_providers_resource_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_providers_resource_id_idx ON auth.sso_providers USING btree (lower(resource_id));


--
-- Name: unique_phone_factor_per_user; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX unique_phone_factor_per_user ON auth.mfa_factors USING btree (user_id, phone);


--
-- Name: user_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX user_id_created_at_idx ON auth.sessions USING btree (user_id, created_at);


--
-- Name: users_email_partial_key; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX users_email_partial_key ON auth.users USING btree (email) WHERE (is_sso_user = false);


--
-- Name: INDEX users_email_partial_key; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.users_email_partial_key IS 'Auth: A partial unique index that applies only when is_sso_user is false';


--
-- Name: users_instance_id_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_email_idx ON auth.users USING btree (instance_id, lower((email)::text));


--
-- Name: users_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_idx ON auth.users USING btree (instance_id);


--
-- Name: users_is_anonymous_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_is_anonymous_idx ON auth.users USING btree (is_anonymous);


--
-- Name: idx_influencer_payments_influencer_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_influencer_payments_influencer_id ON public.influencer_payments USING btree (influencer_id);


--
-- Name: idx_raffles_status; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_raffles_status ON public.raffles USING btree (raffle_status);


--
-- Name: idx_shared_raffles_influencer_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_shared_raffles_influencer_id ON public.shared_raffles USING btree (influencer_id);


--
-- Name: idx_tickets_raffle_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tickets_raffle_id ON public.tickets USING btree (raffle_id);


--
-- Name: idx_tickets_user_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tickets_user_id ON public.tickets USING btree (user_id);


--
-- Name: idx_transactions_user_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_transactions_user_id ON public.transactions USING btree (user_id);


--
-- Name: ix_realtime_subscription_entity; Type: INDEX; Schema: realtime; Owner: supabase_admin
--

CREATE INDEX ix_realtime_subscription_entity ON realtime.subscription USING btree (entity);


--
-- Name: subscription_subscription_id_entity_filters_key; Type: INDEX; Schema: realtime; Owner: supabase_admin
--

CREATE UNIQUE INDEX subscription_subscription_id_entity_filters_key ON realtime.subscription USING btree (subscription_id, entity, filters);


--
-- Name: bname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bname ON storage.buckets USING btree (name);


--
-- Name: bucketid_objname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bucketid_objname ON storage.objects USING btree (bucket_id, name);


--
-- Name: idx_multipart_uploads_list; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_multipart_uploads_list ON storage.s3_multipart_uploads USING btree (bucket_id, key, created_at);


--
-- Name: idx_objects_bucket_id_name; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_objects_bucket_id_name ON storage.objects USING btree (bucket_id, name COLLATE "C");


--
-- Name: name_prefix_search; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX name_prefix_search ON storage.objects USING btree (name text_pattern_ops);


--
-- Name: supabase_functions_hooks_h_table_id_h_name_idx; Type: INDEX; Schema: supabase_functions; Owner: supabase_functions_admin
--

CREATE INDEX supabase_functions_hooks_h_table_id_h_name_idx ON supabase_functions.hooks USING btree (hook_table_id, hook_name);


--
-- Name: supabase_functions_hooks_request_id_idx; Type: INDEX; Schema: supabase_functions; Owner: supabase_functions_admin
--

CREATE INDEX supabase_functions_hooks_request_id_idx ON supabase_functions.hooks USING btree (request_id);


--
-- Name: messages_2025_01_16_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2025_01_16_pkey;


--
-- Name: messages_2025_01_17_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2025_01_17_pkey;


--
-- Name: messages_2025_01_18_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2025_01_18_pkey;


--
-- Name: messages_2025_01_19_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2025_01_19_pkey;


--
-- Name: messages_2025_01_20_pkey; Type: INDEX ATTACH; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER INDEX realtime.messages_pkey ATTACH PARTITION realtime.messages_2025_01_20_pkey;


--
-- Name: vw_user_info _RETURN; Type: RULE; Schema: public; Owner: postgres
--

CREATE OR REPLACE VIEW public.vw_user_info AS
 SELECT u.id AS user_id,
    u.name AS user_name,
    u.image AS user_image,
    u.role,
    COALESCE(avg(r.rating), (0)::numeric) AS average_rating,
    s.name AS main_specialization,
    u.biography,
    u.sincejob,
    EXTRACT(year FROM age((CURRENT_DATE)::timestamp with time zone, (u.sincejob)::timestamp with time zone)) AS years_of_experience,
    (((((COALESCE(u.followers_youtube, (0)::bigint) + COALESCE(u.followers_insta, (0)::bigint)) + COALESCE(u.followers_face, (0)::bigint)) + COALESCE(u.followers_tiktok, (0)::bigint)) + COALESCE(u.followers_kwai, (0)::bigint)) + COALESCE((u.followers_linkedin)::integer, 0)) AS followers_amount
   FROM ((public.users u
     LEFT JOIN public.reviews r ON ((u.id = r.influencer_id)))
     LEFT JOIN public.specializations s ON ((u.specialization_id = s.id)))
  GROUP BY u.id, u.name, u.image, u.role, u.biography, u.sincejob, s.name;


--
-- Name: vw_firm_info _RETURN; Type: RULE; Schema: public; Owner: postgres
--

CREATE OR REPLACE VIEW public.vw_firm_info AS
 SELECT f.id AS firm_id,
    f.name AS firm_name,
    f.address AS firm_address,
    f.contact_info AS firm_contact_info,
    f.created_at AS firm_created_at,
    f.start_time AS firm_start_time,
    f.end_time AS firm_end_time,
    f.description AS firm_description,
    f.image AS firm_image,
    f.image_cover AS firm_image_cover,
    f.phone AS firm_phone,
    f.whatsapp AS firm_whatsapp,
    f.birthdate AS firm_birthdate,
    f.number_customers AS firm_number_customers,
    f.zipcode AS firm_zipcode,
    f.number AS firm_number,
    f.complement AS firm_complement,
    f.district AS firm_district,
    f.city AS firm_city,
    f.state AS firm_state,
    s.name AS default_specialization,
    string_agg(DISTINCT s_all.name, ', '::text) AS all_specializations,
    EXTRACT(year FROM age(now(), (f.birthdate)::timestamp with time zone)) AS years_since_birthdate,
    COALESCE(avg(r.rating), (0)::numeric) AS average_rating,
    count(r.id) AS review_count
   FROM (((public.firms f
     LEFT JOIN public.specializations s ON ((f.specialization_id = s.id)))
     LEFT JOIN public.specializations s_all ON ((f.specialization_id = s_all.id)))
     LEFT JOIN public.reviews r ON ((f.id = r.firm_id)))
  GROUP BY f.id, s.name
  ORDER BY f.name;


--
-- Name: notifications Notification; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER "Notification" AFTER INSERT ON public.notifications FOR EACH ROW EXECUTE FUNCTION supabase_functions.http_request('https://alzvmiqpxhnntzamzdpq.supabase.co/functions/v1/push', 'POST', '{"Content-type":"application/json","Authorization":"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFsenZtaXFweGhubnR6YW16ZHBxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzYzNTM3MzksImV4cCI6MjA1MTkyOTczOX0.wzTLB2Iz2Eqqrk9kn9KbKcWQeTeLLs_y2Fcw_fVvPRM"}', '{}', '1000');


--
-- Name: raffles set_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.raffles FOR EACH ROW EXECUTE FUNCTION public.handle_updated_at();


--
-- Name: users set_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.users FOR EACH ROW EXECUTE FUNCTION public.handle_updated_at();


--
-- Name: transactions tr_generate_tickets_after_payment; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER tr_generate_tickets_after_payment AFTER UPDATE ON public.transactions FOR EACH ROW EXECUTE FUNCTION public.tf_generate_tickets_after_payment();


--
-- Name: subscription tr_check_filters; Type: TRIGGER; Schema: realtime; Owner: supabase_admin
--

CREATE TRIGGER tr_check_filters BEFORE INSERT OR UPDATE ON realtime.subscription FOR EACH ROW EXECUTE FUNCTION realtime.subscription_check_filters();


--
-- Name: objects update_objects_updated_at; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER update_objects_updated_at BEFORE UPDATE ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.update_updated_at_column();


--
-- Name: identities identities_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: mfa_amr_claims mfa_amr_claims_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- Name: mfa_challenges mfa_challenges_auth_factor_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_auth_factor_id_fkey FOREIGN KEY (factor_id) REFERENCES auth.mfa_factors(id) ON DELETE CASCADE;


--
-- Name: mfa_factors mfa_factors_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: one_time_tokens one_time_tokens_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.one_time_tokens
    ADD CONSTRAINT one_time_tokens_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: refresh_tokens refresh_tokens_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- Name: saml_providers saml_providers_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: saml_relay_states saml_relay_states_flow_state_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_flow_state_id_fkey FOREIGN KEY (flow_state_id) REFERENCES auth.flow_state(id) ON DELETE CASCADE;


--
-- Name: saml_relay_states saml_relay_states_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: sessions sessions_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: sso_domains sso_domains_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: banner banner_influencer_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.banner
    ADD CONSTRAINT banner_influencer_id_fkey FOREIGN KEY (influencer_id) REFERENCES public.users(id);


--
-- Name: banner banner_raffle_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.banner
    ADD CONSTRAINT banner_raffle_id_fkey FOREIGN KEY (raffle_id) REFERENCES public.raffles(id);


--
-- Name: cashback cashback_transaction_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cashback
    ADD CONSTRAINT cashback_transaction_id_fkey FOREIGN KEY (transaction_id) REFERENCES public.transactions(id) ON DELETE CASCADE;


--
-- Name: cashback cashback_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cashback
    ADD CONSTRAINT cashback_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: contracts contracts_client_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.contracts
    ADD CONSTRAINT contracts_client_id_fkey FOREIGN KEY (client_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: contracts contracts_influencer_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.contracts
    ADD CONSTRAINT contracts_influencer_id_fkey FOREIGN KEY (influencer_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: contracts contracts_service_plan_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.contracts
    ADD CONSTRAINT contracts_service_plan_id_fkey FOREIGN KEY (service_plan_id) REFERENCES public.service_plans(id) ON DELETE CASCADE;


--
-- Name: firms firms_specialization_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.firms
    ADD CONSTRAINT firms_specialization_id_fkey FOREIGN KEY (specialization_id) REFERENCES public.specializations(id);


--
-- Name: influencer_payments influencer_payments_influencer_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.influencer_payments
    ADD CONSTRAINT influencer_payments_influencer_id_fkey FOREIGN KEY (influencer_id) REFERENCES public.raffles(id);


--
-- Name: notification_recipients notification_recipients_notification_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.notification_recipients
    ADD CONSTRAINT notification_recipients_notification_id_fkey FOREIGN KEY (notification_id) REFERENCES public.notifications(id);


--
-- Name: product_categories product_categories_firm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_categories
    ADD CONSTRAINT product_categories_firm_id_fkey FOREIGN KEY (firm_id) REFERENCES public.firms(id);


--
-- Name: products products_category_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.products
    ADD CONSTRAINT products_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.product_categories(id);


--
-- Name: users profiles_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: raffle_packages raffle_packages_raffle_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.raffle_packages
    ADD CONSTRAINT raffle_packages_raffle_id_fkey FOREIGN KEY (raffle_id) REFERENCES public.raffles(id) ON DELETE CASCADE;


--
-- Name: raffle_prizes raffle_prizes_prize_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.raffle_prizes
    ADD CONSTRAINT raffle_prizes_prize_id_fkey FOREIGN KEY (prize_id) REFERENCES public.prizes(id) ON DELETE CASCADE;


--
-- Name: raffle_prizes raffle_prizes_raffle_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.raffle_prizes
    ADD CONSTRAINT raffle_prizes_raffle_id_fkey FOREIGN KEY (raffle_id) REFERENCES public.raffles(id) ON DELETE CASCADE;


--
-- Name: raffles raffles_category_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.raffles
    ADD CONSTRAINT raffles_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.raffle_categories(id) ON DELETE SET NULL;


--
-- Name: raffles raffles_creator_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.raffles
    ADD CONSTRAINT raffles_creator_id_fkey FOREIGN KEY (creator_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: reviews reviews_client_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.reviews
    ADD CONSTRAINT reviews_client_id_fkey FOREIGN KEY (client_id) REFERENCES public.users(id);


--
-- Name: reviews reviews_firm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.reviews
    ADD CONSTRAINT reviews_firm_id_fkey FOREIGN KEY (firm_id) REFERENCES public.firms(id);


--
-- Name: reviews reviews_influencer_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.reviews
    ADD CONSTRAINT reviews_influencer_id_fkey FOREIGN KEY (influencer_id) REFERENCES public.users(id);


--
-- Name: shared_raffles shared_raffles_raffle_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.shared_raffles
    ADD CONSTRAINT shared_raffles_raffle_id_fkey FOREIGN KEY (raffle_id) REFERENCES public.raffles(id) ON DELETE CASCADE;


--
-- Name: support_tickets support_tickets_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.support_tickets
    ADD CONSTRAINT support_tickets_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: tickets tickets_raffle_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tickets
    ADD CONSTRAINT tickets_raffle_id_fkey FOREIGN KEY (raffle_id) REFERENCES public.raffles(id) ON DELETE CASCADE;


--
-- Name: tickets tickets_transaction_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tickets
    ADD CONSTRAINT tickets_transaction_id_fkey FOREIGN KEY (transaction_id) REFERENCES public.transactions(id);


--
-- Name: tickets tickets_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tickets
    ADD CONSTRAINT tickets_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: transactions transactions_raffle_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.transactions
    ADD CONSTRAINT transactions_raffle_id_fkey FOREIGN KEY (raffle_id) REFERENCES public.raffles(id) ON DELETE CASCADE;


--
-- Name: transactions transactions_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.transactions
    ADD CONSTRAINT transactions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: users users_specialization_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_specialization_id_fkey FOREIGN KEY (specialization_id) REFERENCES public.specializations(id);


--
-- Name: winners winners_raffle_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.winners
    ADD CONSTRAINT winners_raffle_id_fkey FOREIGN KEY (raffle_id) REFERENCES public.raffles(id) ON DELETE CASCADE;


--
-- Name: winners winners_ticket_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.winners
    ADD CONSTRAINT winners_ticket_id_fkey FOREIGN KEY (ticket_id) REFERENCES public.tickets(id) ON DELETE CASCADE;


--
-- Name: winners winners_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.winners
    ADD CONSTRAINT winners_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: objects objects_bucketId_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT "objects_bucketId_fkey" FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads s3_multipart_uploads_bucket_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads
    ADD CONSTRAINT s3_multipart_uploads_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_bucket_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_upload_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_upload_id_fkey FOREIGN KEY (upload_id) REFERENCES storage.s3_multipart_uploads(id) ON DELETE CASCADE;


--
-- Name: audit_log_entries; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.audit_log_entries ENABLE ROW LEVEL SECURITY;

--
-- Name: flow_state; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.flow_state ENABLE ROW LEVEL SECURITY;

--
-- Name: identities; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.identities ENABLE ROW LEVEL SECURITY;

--
-- Name: instances; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.instances ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_amr_claims; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_amr_claims ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_challenges; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_challenges ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_factors; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_factors ENABLE ROW LEVEL SECURITY;

--
-- Name: one_time_tokens; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.one_time_tokens ENABLE ROW LEVEL SECURITY;

--
-- Name: refresh_tokens; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.refresh_tokens ENABLE ROW LEVEL SECURITY;

--
-- Name: saml_providers; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.saml_providers ENABLE ROW LEVEL SECURITY;

--
-- Name: saml_relay_states; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.saml_relay_states ENABLE ROW LEVEL SECURITY;

--
-- Name: schema_migrations; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.schema_migrations ENABLE ROW LEVEL SECURITY;

--
-- Name: sessions; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sessions ENABLE ROW LEVEL SECURITY;

--
-- Name: sso_domains; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sso_domains ENABLE ROW LEVEL SECURITY;

--
-- Name: sso_providers; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sso_providers ENABLE ROW LEVEL SECURITY;

--
-- Name: users; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.users ENABLE ROW LEVEL SECURITY;

--
-- Name: raffles Creators can update their raffles; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Creators can update their raffles" ON public.raffles FOR UPDATE USING ((auth.uid() = creator_id)) WITH CHECK ((auth.uid() = creator_id));


--
-- Name: shared_raffles Influencers share raffles; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Influencers share raffles" ON public.shared_raffles FOR INSERT WITH CHECK ((auth.uid() = influencer_id));


--
-- Name: influencer_payments Influencers view their payments; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Influencers view their payments" ON public.influencer_payments FOR SELECT USING ((auth.uid() = influencer_id));


--
-- Name: shared_raffles Influencers view their shared raffles; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Influencers view their shared raffles" ON public.shared_raffles FOR SELECT USING ((auth.uid() = influencer_id));


--
-- Name: banner Master; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Master" ON public.banner USING (true) WITH CHECK (true);


--
-- Name: contracts Master; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Master" ON public.contracts USING (true) WITH CHECK (true);


--
-- Name: firms Master; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Master" ON public.firms USING (true) WITH CHECK (true);


--
-- Name: inter_credentials Master; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Master" ON public.inter_credentials USING (true) WITH CHECK (true);


--
-- Name: notification_recipients Master; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Master" ON public.notification_recipients USING (true) WITH CHECK (true);


--
-- Name: notifications Master; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Master" ON public.notifications USING (true) WITH CHECK (true);


--
-- Name: prizes Master; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Master" ON public.prizes USING (true) WITH CHECK (true);


--
-- Name: raffle_categories Master; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Master" ON public.raffle_categories USING (true) WITH CHECK (true);


--
-- Name: raffle_packages Master; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Master" ON public.raffle_packages USING (true) WITH CHECK (true);


--
-- Name: raffle_prizes Master; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Master" ON public.raffle_prizes USING (true) WITH CHECK (true);


--
-- Name: reviews Master; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Master" ON public.reviews USING (true) WITH CHECK (true);


--
-- Name: service_plans Master; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Master" ON public.service_plans USING (true) WITH CHECK (true);


--
-- Name: system_config Master; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Master" ON public.system_config USING (true) WITH CHECK (true);


--
-- Name: tickets Master; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Master" ON public.tickets USING (true) WITH CHECK (true);


--
-- Name: transactions Master; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Master" ON public.transactions USING (true) WITH CHECK (true);


--
-- Name: users Master; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Master" ON public.users USING (true) WITH CHECK (true);


--
-- Name: raffles Raffles are viewable by everyone; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Raffles are viewable by everyone" ON public.raffles FOR SELECT USING (true);


--
-- Name: influencer_payments System can create payments; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "System can create payments" ON public.influencer_payments FOR INSERT WITH CHECK (true);


--
-- Name: raffles Users can create raffles; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can create raffles" ON public.raffles FOR INSERT WITH CHECK ((auth.uid() = creator_id));


--
-- Name: winners Winners are viewable by everyone; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Winners are viewable by everyone" ON public.winners FOR SELECT USING (true);


--
-- Name: banner; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.banner ENABLE ROW LEVEL SECURITY;

--
-- Name: contracts; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.contracts ENABLE ROW LEVEL SECURITY;

--
-- Name: faq; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.faq ENABLE ROW LEVEL SECURITY;

--
-- Name: firms; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.firms ENABLE ROW LEVEL SECURITY;

--
-- Name: influencer_payments; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.influencer_payments ENABLE ROW LEVEL SECURITY;

--
-- Name: inter_credentials; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.inter_credentials ENABLE ROW LEVEL SECURITY;

--
-- Name: notification_recipients; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.notification_recipients ENABLE ROW LEVEL SECURITY;

--
-- Name: notifications; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;

--
-- Name: prizes; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.prizes ENABLE ROW LEVEL SECURITY;

--
-- Name: raffle_categories; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.raffle_categories ENABLE ROW LEVEL SECURITY;

--
-- Name: raffle_packages; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.raffle_packages ENABLE ROW LEVEL SECURITY;

--
-- Name: raffle_prizes; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.raffle_prizes ENABLE ROW LEVEL SECURITY;

--
-- Name: raffles; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.raffles ENABLE ROW LEVEL SECURITY;

--
-- Name: reviews; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.reviews ENABLE ROW LEVEL SECURITY;

--
-- Name: service_plans; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.service_plans ENABLE ROW LEVEL SECURITY;

--
-- Name: shared_raffles; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.shared_raffles ENABLE ROW LEVEL SECURITY;

--
-- Name: specializations; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.specializations ENABLE ROW LEVEL SECURITY;

--
-- Name: system_config; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.system_config ENABLE ROW LEVEL SECURITY;

--
-- Name: tickets; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.tickets ENABLE ROW LEVEL SECURITY;

--
-- Name: transactions; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.transactions ENABLE ROW LEVEL SECURITY;

--
-- Name: users; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;

--
-- Name: winners; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.winners ENABLE ROW LEVEL SECURITY;

--
-- Name: messages; Type: ROW SECURITY; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE realtime.messages ENABLE ROW LEVEL SECURITY;

--
-- Name: objects Mastter 1j67nz_0; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "Mastter 1j67nz_0" ON storage.objects FOR DELETE USING ((bucket_id = 'admin'::text));


--
-- Name: objects Mastter 1j67nz_1; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "Mastter 1j67nz_1" ON storage.objects FOR SELECT USING ((bucket_id = 'admin'::text));


--
-- Name: objects Mastter 1j67nz_2; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "Mastter 1j67nz_2" ON storage.objects FOR INSERT WITH CHECK ((bucket_id = 'admin'::text));


--
-- Name: objects Mastter 1j67nz_3; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "Mastter 1j67nz_3" ON storage.objects FOR UPDATE USING ((bucket_id = 'admin'::text));


--
-- Name: buckets; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.buckets ENABLE ROW LEVEL SECURITY;

--
-- Name: migrations; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.migrations ENABLE ROW LEVEL SECURITY;

--
-- Name: objects; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;

--
-- Name: s3_multipart_uploads; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.s3_multipart_uploads ENABLE ROW LEVEL SECURITY;

--
-- Name: s3_multipart_uploads_parts; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.s3_multipart_uploads_parts ENABLE ROW LEVEL SECURITY;

--
-- Name: supabase_realtime; Type: PUBLICATION; Schema: -; Owner: postgres
--

CREATE PUBLICATION supabase_realtime WITH (publish = 'insert, update, delete, truncate');


ALTER PUBLICATION supabase_realtime OWNER TO postgres;

--
-- Name: SCHEMA auth; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA auth TO anon;
GRANT USAGE ON SCHEMA auth TO authenticated;
GRANT USAGE ON SCHEMA auth TO service_role;
GRANT ALL ON SCHEMA auth TO supabase_auth_admin;
GRANT ALL ON SCHEMA auth TO dashboard_user;
GRANT ALL ON SCHEMA auth TO postgres;


--
-- Name: SCHEMA extensions; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA extensions TO anon;
GRANT USAGE ON SCHEMA extensions TO authenticated;
GRANT USAGE ON SCHEMA extensions TO service_role;
GRANT ALL ON SCHEMA extensions TO dashboard_user;


--
-- Name: SCHEMA net; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA net TO supabase_functions_admin;
GRANT USAGE ON SCHEMA net TO postgres;
GRANT USAGE ON SCHEMA net TO anon;
GRANT USAGE ON SCHEMA net TO authenticated;
GRANT USAGE ON SCHEMA net TO service_role;


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: pg_database_owner
--

GRANT USAGE ON SCHEMA public TO postgres;
GRANT USAGE ON SCHEMA public TO anon;
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO service_role;


--
-- Name: SCHEMA realtime; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA realtime TO postgres;
GRANT USAGE ON SCHEMA realtime TO anon;
GRANT USAGE ON SCHEMA realtime TO authenticated;
GRANT USAGE ON SCHEMA realtime TO service_role;
GRANT ALL ON SCHEMA realtime TO supabase_realtime_admin;


--
-- Name: SCHEMA storage; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT ALL ON SCHEMA storage TO postgres;
GRANT USAGE ON SCHEMA storage TO anon;
GRANT USAGE ON SCHEMA storage TO authenticated;
GRANT USAGE ON SCHEMA storage TO service_role;
GRANT ALL ON SCHEMA storage TO supabase_storage_admin;
GRANT ALL ON SCHEMA storage TO dashboard_user;


--
-- Name: SCHEMA supabase_functions; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA supabase_functions TO postgres;
GRANT USAGE ON SCHEMA supabase_functions TO anon;
GRANT USAGE ON SCHEMA supabase_functions TO authenticated;
GRANT USAGE ON SCHEMA supabase_functions TO service_role;
GRANT ALL ON SCHEMA supabase_functions TO supabase_functions_admin;


--
-- Name: FUNCTION email(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.email() TO dashboard_user;


--
-- Name: FUNCTION jwt(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.jwt() TO postgres;
GRANT ALL ON FUNCTION auth.jwt() TO dashboard_user;


--
-- Name: FUNCTION role(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.role() TO dashboard_user;


--
-- Name: FUNCTION uid(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.uid() TO dashboard_user;


--
-- Name: FUNCTION algorithm_sign(signables text, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) FROM postgres;
GRANT ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION armor(bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.armor(bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.armor(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea) TO dashboard_user;


--
-- Name: FUNCTION armor(bytea, text[], text[]); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.armor(bytea, text[], text[]) FROM postgres;
GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO dashboard_user;


--
-- Name: FUNCTION bytea_to_text(data bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.bytea_to_text(data bytea) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION crypt(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.crypt(text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.crypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.crypt(text, text) TO dashboard_user;


--
-- Name: FUNCTION dearmor(text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.dearmor(text) FROM postgres;
GRANT ALL ON FUNCTION extensions.dearmor(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.dearmor(text) TO dashboard_user;


--
-- Name: FUNCTION decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION decrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION digest(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.digest(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION digest(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.digest(text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.digest(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(text, text) TO dashboard_user;


--
-- Name: FUNCTION encrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION encrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION gen_random_bytes(integer); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_random_bytes(integer) FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO dashboard_user;


--
-- Name: FUNCTION gen_random_uuid(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_random_uuid() FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO dashboard_user;


--
-- Name: FUNCTION gen_salt(text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_salt(text) FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_salt(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text) TO dashboard_user;


--
-- Name: FUNCTION gen_salt(text, integer); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_salt(text, integer) FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO dashboard_user;


--
-- Name: FUNCTION grant_pg_cron_access(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.grant_pg_cron_access() FROM postgres;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO dashboard_user;


--
-- Name: FUNCTION grant_pg_graphql_access(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.grant_pg_graphql_access() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION grant_pg_net_access(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.grant_pg_net_access() FROM postgres;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO dashboard_user;


--
-- Name: FUNCTION hmac(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.hmac(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION hmac(text, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.hmac(text, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO dashboard_user;


--
-- Name: FUNCTION http(request extensions.http_request); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.http(request extensions.http_request) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION http_delete(uri character varying); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.http_delete(uri character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION http_delete(uri character varying, content character varying, content_type character varying); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.http_delete(uri character varying, content character varying, content_type character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION http_get(uri character varying); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.http_get(uri character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION http_get(uri character varying, data jsonb); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.http_get(uri character varying, data jsonb) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION http_head(uri character varying); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.http_head(uri character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION http_header(field character varying, value character varying); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.http_header(field character varying, value character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION http_list_curlopt(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.http_list_curlopt() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION http_patch(uri character varying, content character varying, content_type character varying); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.http_patch(uri character varying, content character varying, content_type character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION http_post(uri character varying, data jsonb); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.http_post(uri character varying, data jsonb) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION http_post(uri character varying, content character varying, content_type character varying); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.http_post(uri character varying, content character varying, content_type character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION http_put(uri character varying, content character varying, content_type character varying); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.http_put(uri character varying, content character varying, content_type character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION http_reset_curlopt(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.http_reset_curlopt() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION http_set_curlopt(curlopt character varying, value character varying); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.http_set_curlopt(curlopt character varying, value character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) FROM postgres;
GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) FROM postgres;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements_reset(userid oid, dbid oid, queryid bigint); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) FROM postgres;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) TO dashboard_user;


--
-- Name: FUNCTION pgp_armor_headers(text, OUT key text, OUT value text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO dashboard_user;


--
-- Name: FUNCTION pgp_key_id(bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_key_id(bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt(text, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgrst_ddl_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_ddl_watch() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgrst_drop_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_drop_watch() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION set_graphql_placeholder(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.set_graphql_placeholder() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION sign(payload json, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) FROM postgres;
GRANT ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION text_to_bytea(data text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.text_to_bytea(data text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION try_cast_double(inp text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.try_cast_double(inp text) FROM postgres;
GRANT ALL ON FUNCTION extensions.try_cast_double(inp text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.try_cast_double(inp text) TO dashboard_user;


--
-- Name: FUNCTION url_decode(data text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.url_decode(data text) FROM postgres;
GRANT ALL ON FUNCTION extensions.url_decode(data text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.url_decode(data text) TO dashboard_user;


--
-- Name: FUNCTION url_encode(data bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.url_encode(data bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.url_encode(data bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.url_encode(data bytea) TO dashboard_user;


--
-- Name: FUNCTION urlencode(string bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.urlencode(string bytea) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION urlencode(data jsonb); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.urlencode(data jsonb) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION urlencode(string character varying); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.urlencode(string character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION uuid_generate_v1(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v1() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v1mc(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v1mc() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v3(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v4(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v4() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v5(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO dashboard_user;


--
-- Name: FUNCTION uuid_nil(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_nil() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_nil() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_nil() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_dns(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_dns() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_oid(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_oid() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_url(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_url() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_x500(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_x500() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO dashboard_user;


--
-- Name: FUNCTION verify(token text, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) FROM postgres;
GRANT ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION graphql("operationName" text, query text, variables jsonb, extensions jsonb); Type: ACL; Schema: graphql_public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO postgres;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO anon;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO authenticated;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO service_role;


--
-- Name: FUNCTION http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer); Type: ACL; Schema: net; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;
GRANT ALL ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin;
GRANT ALL ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) TO postgres;
GRANT ALL ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) TO anon;
GRANT ALL ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) TO authenticated;
GRANT ALL ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) TO service_role;


--
-- Name: FUNCTION http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer); Type: ACL; Schema: net; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;
GRANT ALL ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin;
GRANT ALL ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) TO postgres;
GRANT ALL ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) TO anon;
GRANT ALL ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) TO authenticated;
GRANT ALL ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) TO service_role;


--
-- Name: FUNCTION get_auth(p_usename text); Type: ACL; Schema: pgbouncer; Owner: postgres
--

REVOKE ALL ON FUNCTION pgbouncer.get_auth(p_usename text) FROM PUBLIC;
GRANT ALL ON FUNCTION pgbouncer.get_auth(p_usename text) TO pgbouncer;


--
-- Name: FUNCTION crypto_aead_det_decrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea); Type: ACL; Schema: pgsodium; Owner: pgsodium_keymaker
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_decrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea) TO service_role;


--
-- Name: FUNCTION crypto_aead_det_encrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea); Type: ACL; Schema: pgsodium; Owner: pgsodium_keymaker
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_encrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea) TO service_role;


--
-- Name: FUNCTION crypto_aead_det_keygen(); Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_keygen() TO service_role;


--
-- Name: FUNCTION debug_inter_credentials(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.debug_inter_credentials() TO anon;
GRANT ALL ON FUNCTION public.debug_inter_credentials() TO authenticated;
GRANT ALL ON FUNCTION public.debug_inter_credentials() TO service_role;


--
-- Name: FUNCTION fc_check_inter_pix_status(p_transaction_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.fc_check_inter_pix_status(p_transaction_id uuid) TO anon;
GRANT ALL ON FUNCTION public.fc_check_inter_pix_status(p_transaction_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.fc_check_inter_pix_status(p_transaction_id uuid) TO service_role;


--
-- Name: FUNCTION fc_confirm_ticket_purchase(p_transaction_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.fc_confirm_ticket_purchase(p_transaction_id uuid) TO anon;
GRANT ALL ON FUNCTION public.fc_confirm_ticket_purchase(p_transaction_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.fc_confirm_ticket_purchase(p_transaction_id uuid) TO service_role;


--
-- Name: FUNCTION fc_create_inter_pix_charge(p_transaction_id uuid, p_amount numeric, p_expiration integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.fc_create_inter_pix_charge(p_transaction_id uuid, p_amount numeric, p_expiration integer) TO anon;
GRANT ALL ON FUNCTION public.fc_create_inter_pix_charge(p_transaction_id uuid, p_amount numeric, p_expiration integer) TO authenticated;
GRANT ALL ON FUNCTION public.fc_create_inter_pix_charge(p_transaction_id uuid, p_amount numeric, p_expiration integer) TO service_role;


--
-- Name: FUNCTION fc_generate_tickets(p_transaction_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.fc_generate_tickets(p_transaction_id uuid) TO anon;
GRANT ALL ON FUNCTION public.fc_generate_tickets(p_transaction_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.fc_generate_tickets(p_transaction_id uuid) TO service_role;


--
-- Name: FUNCTION fc_generate_unique_ticket_numbers(p_max_number bigint, p_quantity integer, p_existing_numbers bigint[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.fc_generate_unique_ticket_numbers(p_max_number bigint, p_quantity integer, p_existing_numbers bigint[]) TO anon;
GRANT ALL ON FUNCTION public.fc_generate_unique_ticket_numbers(p_max_number bigint, p_quantity integer, p_existing_numbers bigint[]) TO authenticated;
GRANT ALL ON FUNCTION public.fc_generate_unique_ticket_numbers(p_max_number bigint, p_quantity integer, p_existing_numbers bigint[]) TO service_role;


--
-- Name: FUNCTION fc_get_inter_oauth_token(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.fc_get_inter_oauth_token() TO anon;
GRANT ALL ON FUNCTION public.fc_get_inter_oauth_token() TO authenticated;
GRANT ALL ON FUNCTION public.fc_get_inter_oauth_token() TO service_role;


--
-- Name: FUNCTION fc_handle_inter_pix_webhook(p_webhook_data json); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.fc_handle_inter_pix_webhook(p_webhook_data json) TO anon;
GRANT ALL ON FUNCTION public.fc_handle_inter_pix_webhook(p_webhook_data json) TO authenticated;
GRANT ALL ON FUNCTION public.fc_handle_inter_pix_webhook(p_webhook_data json) TO service_role;


--
-- Name: FUNCTION fc_pix_payment_webhook(p_transaction_data jsonb); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.fc_pix_payment_webhook(p_transaction_data jsonb) TO anon;
GRANT ALL ON FUNCTION public.fc_pix_payment_webhook(p_transaction_data jsonb) TO authenticated;
GRANT ALL ON FUNCTION public.fc_pix_payment_webhook(p_transaction_data jsonb) TO service_role;


--
-- Name: FUNCTION fc_purchase_ticket_with_pix(p_raffle_id uuid, p_user_id uuid, p_quantity integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.fc_purchase_ticket_with_pix(p_raffle_id uuid, p_user_id uuid, p_quantity integer) TO anon;
GRANT ALL ON FUNCTION public.fc_purchase_ticket_with_pix(p_raffle_id uuid, p_user_id uuid, p_quantity integer) TO authenticated;
GRANT ALL ON FUNCTION public.fc_purchase_ticket_with_pix(p_raffle_id uuid, p_user_id uuid, p_quantity integer) TO service_role;


--
-- Name: FUNCTION fc_review_details(_firm_id text, _influencer_id text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.fc_review_details(_firm_id text, _influencer_id text) TO anon;
GRANT ALL ON FUNCTION public.fc_review_details(_firm_id text, _influencer_id text) TO authenticated;
GRANT ALL ON FUNCTION public.fc_review_details(_firm_id text, _influencer_id text) TO service_role;


--
-- Name: FUNCTION fc_search_raffles(search_text text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.fc_search_raffles(search_text text) TO anon;
GRANT ALL ON FUNCTION public.fc_search_raffles(search_text text) TO authenticated;
GRANT ALL ON FUNCTION public.fc_search_raffles(search_text text) TO service_role;


--
-- Name: FUNCTION generate_inter_oauth_curl(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.generate_inter_oauth_curl() TO anon;
GRANT ALL ON FUNCTION public.generate_inter_oauth_curl() TO authenticated;
GRANT ALL ON FUNCTION public.generate_inter_oauth_curl() TO service_role;


--
-- Name: FUNCTION get_inter_token(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_inter_token() TO anon;
GRANT ALL ON FUNCTION public.get_inter_token() TO authenticated;
GRANT ALL ON FUNCTION public.get_inter_token() TO service_role;


--
-- Name: FUNCTION handle_updated_at(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.handle_updated_at() TO anon;
GRANT ALL ON FUNCTION public.handle_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.handle_updated_at() TO service_role;


--
-- Name: FUNCTION simulate_ticket_purchase(p_raffle_id uuid, p_user_id uuid, p_amount numeric, p_quantity integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.simulate_ticket_purchase(p_raffle_id uuid, p_user_id uuid, p_amount numeric, p_quantity integer) TO anon;
GRANT ALL ON FUNCTION public.simulate_ticket_purchase(p_raffle_id uuid, p_user_id uuid, p_amount numeric, p_quantity integer) TO authenticated;
GRANT ALL ON FUNCTION public.simulate_ticket_purchase(p_raffle_id uuid, p_user_id uuid, p_amount numeric, p_quantity integer) TO service_role;


--
-- Name: FUNCTION tf_generate_tickets_after_payment(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.tf_generate_tickets_after_payment() TO anon;
GRANT ALL ON FUNCTION public.tf_generate_tickets_after_payment() TO authenticated;
GRANT ALL ON FUNCTION public.tf_generate_tickets_after_payment() TO service_role;


--
-- Name: FUNCTION apply_rls(wal jsonb, max_record_bytes integer); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO postgres;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO anon;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO authenticated;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO service_role;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO supabase_realtime_admin;


--
-- Name: FUNCTION broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) TO postgres;
GRANT ALL ON FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) TO dashboard_user;


--
-- Name: FUNCTION build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO postgres;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO anon;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO authenticated;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO service_role;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO supabase_realtime_admin;


--
-- Name: FUNCTION "cast"(val text, type_ regtype); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO postgres;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO dashboard_user;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO anon;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO authenticated;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO service_role;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO supabase_realtime_admin;


--
-- Name: FUNCTION check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO postgres;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO anon;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO authenticated;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO service_role;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO supabase_realtime_admin;


--
-- Name: FUNCTION is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO postgres;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO anon;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO authenticated;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO service_role;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO supabase_realtime_admin;


--
-- Name: FUNCTION list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO postgres;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO anon;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO authenticated;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO service_role;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO supabase_realtime_admin;


--
-- Name: FUNCTION quote_wal2json(entity regclass); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO postgres;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO anon;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO authenticated;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO service_role;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO supabase_realtime_admin;


--
-- Name: FUNCTION send(payload jsonb, event text, topic text, private boolean); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) TO postgres;
GRANT ALL ON FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) TO dashboard_user;


--
-- Name: FUNCTION subscription_check_filters(); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO postgres;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO dashboard_user;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO anon;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO authenticated;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO service_role;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO supabase_realtime_admin;


--
-- Name: FUNCTION to_regrole(role_name text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO postgres;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO anon;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO authenticated;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO service_role;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO supabase_realtime_admin;


--
-- Name: FUNCTION topic(); Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON FUNCTION realtime.topic() TO postgres;
GRANT ALL ON FUNCTION realtime.topic() TO dashboard_user;


--
-- Name: FUNCTION http_request(); Type: ACL; Schema: supabase_functions; Owner: supabase_functions_admin
--

REVOKE ALL ON FUNCTION supabase_functions.http_request() FROM PUBLIC;
GRANT ALL ON FUNCTION supabase_functions.http_request() TO postgres;
GRANT ALL ON FUNCTION supabase_functions.http_request() TO anon;
GRANT ALL ON FUNCTION supabase_functions.http_request() TO authenticated;
GRANT ALL ON FUNCTION supabase_functions.http_request() TO service_role;


--
-- Name: TABLE audit_log_entries; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.audit_log_entries TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.audit_log_entries TO postgres;
GRANT SELECT ON TABLE auth.audit_log_entries TO postgres WITH GRANT OPTION;
SET SESSION AUTHORIZATION postgres;
GRANT SELECT ON TABLE auth.audit_log_entries TO postgres WITH GRANT OPTION;
RESET SESSION AUTHORIZATION;


--
-- Name: TABLE flow_state; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.flow_state TO postgres;
GRANT SELECT ON TABLE auth.flow_state TO postgres WITH GRANT OPTION;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.flow_state TO dashboard_user;
SET SESSION AUTHORIZATION postgres;
GRANT SELECT ON TABLE auth.flow_state TO postgres WITH GRANT OPTION;
RESET SESSION AUTHORIZATION;


--
-- Name: TABLE identities; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.identities TO postgres;
GRANT SELECT ON TABLE auth.identities TO postgres WITH GRANT OPTION;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.identities TO dashboard_user;
SET SESSION AUTHORIZATION postgres;
GRANT SELECT ON TABLE auth.identities TO postgres WITH GRANT OPTION;
RESET SESSION AUTHORIZATION;


--
-- Name: TABLE instances; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.instances TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.instances TO postgres;
GRANT SELECT ON TABLE auth.instances TO postgres WITH GRANT OPTION;
SET SESSION AUTHORIZATION postgres;
GRANT SELECT ON TABLE auth.instances TO postgres WITH GRANT OPTION;
RESET SESSION AUTHORIZATION;


--
-- Name: TABLE mfa_amr_claims; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_amr_claims TO postgres;
GRANT SELECT ON TABLE auth.mfa_amr_claims TO postgres WITH GRANT OPTION;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_amr_claims TO dashboard_user;
SET SESSION AUTHORIZATION postgres;
GRANT SELECT ON TABLE auth.mfa_amr_claims TO postgres WITH GRANT OPTION;
RESET SESSION AUTHORIZATION;


--
-- Name: TABLE mfa_challenges; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_challenges TO postgres;
GRANT SELECT ON TABLE auth.mfa_challenges TO postgres WITH GRANT OPTION;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_challenges TO dashboard_user;
SET SESSION AUTHORIZATION postgres;
GRANT SELECT ON TABLE auth.mfa_challenges TO postgres WITH GRANT OPTION;
RESET SESSION AUTHORIZATION;


--
-- Name: TABLE mfa_factors; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_factors TO postgres;
GRANT SELECT ON TABLE auth.mfa_factors TO postgres WITH GRANT OPTION;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_factors TO dashboard_user;
SET SESSION AUTHORIZATION postgres;
GRANT SELECT ON TABLE auth.mfa_factors TO postgres WITH GRANT OPTION;
RESET SESSION AUTHORIZATION;


--
-- Name: TABLE one_time_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.one_time_tokens TO postgres;
GRANT SELECT ON TABLE auth.one_time_tokens TO postgres WITH GRANT OPTION;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.one_time_tokens TO dashboard_user;
SET SESSION AUTHORIZATION postgres;
GRANT SELECT ON TABLE auth.one_time_tokens TO postgres WITH GRANT OPTION;
RESET SESSION AUTHORIZATION;


--
-- Name: TABLE refresh_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.refresh_tokens TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.refresh_tokens TO postgres;
GRANT SELECT ON TABLE auth.refresh_tokens TO postgres WITH GRANT OPTION;
SET SESSION AUTHORIZATION postgres;
GRANT SELECT ON TABLE auth.refresh_tokens TO postgres WITH GRANT OPTION;
RESET SESSION AUTHORIZATION;


--
-- Name: SEQUENCE refresh_tokens_id_seq; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO dashboard_user;
GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO postgres;


--
-- Name: TABLE saml_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.saml_providers TO postgres;
GRANT SELECT ON TABLE auth.saml_providers TO postgres WITH GRANT OPTION;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.saml_providers TO dashboard_user;
SET SESSION AUTHORIZATION postgres;
GRANT SELECT ON TABLE auth.saml_providers TO postgres WITH GRANT OPTION;
RESET SESSION AUTHORIZATION;


--
-- Name: TABLE saml_relay_states; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.saml_relay_states TO postgres;
GRANT SELECT ON TABLE auth.saml_relay_states TO postgres WITH GRANT OPTION;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.saml_relay_states TO dashboard_user;
SET SESSION AUTHORIZATION postgres;
GRANT SELECT ON TABLE auth.saml_relay_states TO postgres WITH GRANT OPTION;
RESET SESSION AUTHORIZATION;


--
-- Name: TABLE schema_migrations; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.schema_migrations TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.schema_migrations TO postgres;
GRANT SELECT ON TABLE auth.schema_migrations TO postgres WITH GRANT OPTION;
SET SESSION AUTHORIZATION postgres;
GRANT SELECT ON TABLE auth.schema_migrations TO postgres WITH GRANT OPTION;
RESET SESSION AUTHORIZATION;


--
-- Name: TABLE sessions; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sessions TO postgres;
GRANT SELECT ON TABLE auth.sessions TO postgres WITH GRANT OPTION;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sessions TO dashboard_user;
SET SESSION AUTHORIZATION postgres;
GRANT SELECT ON TABLE auth.sessions TO postgres WITH GRANT OPTION;
RESET SESSION AUTHORIZATION;


--
-- Name: TABLE sso_domains; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sso_domains TO postgres;
GRANT SELECT ON TABLE auth.sso_domains TO postgres WITH GRANT OPTION;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sso_domains TO dashboard_user;
SET SESSION AUTHORIZATION postgres;
GRANT SELECT ON TABLE auth.sso_domains TO postgres WITH GRANT OPTION;
RESET SESSION AUTHORIZATION;


--
-- Name: TABLE sso_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sso_providers TO postgres;
GRANT SELECT ON TABLE auth.sso_providers TO postgres WITH GRANT OPTION;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sso_providers TO dashboard_user;
SET SESSION AUTHORIZATION postgres;
GRANT SELECT ON TABLE auth.sso_providers TO postgres WITH GRANT OPTION;
RESET SESSION AUTHORIZATION;


--
-- Name: TABLE users; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.users TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.users TO postgres;
GRANT SELECT ON TABLE auth.users TO postgres WITH GRANT OPTION;
SET SESSION AUTHORIZATION postgres;
GRANT SELECT ON TABLE auth.users TO postgres WITH GRANT OPTION;
RESET SESSION AUTHORIZATION;


--
-- Name: TABLE pg_stat_statements; Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE extensions.pg_stat_statements FROM postgres;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE extensions.pg_stat_statements TO postgres WITH GRANT OPTION;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE extensions.pg_stat_statements TO dashboard_user;


--
-- Name: TABLE pg_stat_statements_info; Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE extensions.pg_stat_statements_info FROM postgres;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE extensions.pg_stat_statements_info TO postgres WITH GRANT OPTION;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE extensions.pg_stat_statements_info TO dashboard_user;


--
-- Name: TABLE decrypted_key; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE pgsodium.decrypted_key TO pgsodium_keyholder;


--
-- Name: TABLE masking_rule; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE pgsodium.masking_rule TO pgsodium_keyholder;


--
-- Name: TABLE mask_columns; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE pgsodium.mask_columns TO pgsodium_keyholder;


--
-- Name: TABLE banner; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.banner TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.banner TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.banner TO service_role;


--
-- Name: TABLE cashback; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.cashback TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.cashback TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.cashback TO service_role;


--
-- Name: TABLE contracts; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.contracts TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.contracts TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.contracts TO service_role;


--
-- Name: TABLE event; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.event TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.event TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.event TO service_role;


--
-- Name: SEQUENCE event_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.event_id_seq TO anon;
GRANT ALL ON SEQUENCE public.event_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.event_id_seq TO service_role;


--
-- Name: TABLE faq; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.faq TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.faq TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.faq TO service_role;


--
-- Name: TABLE firms; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.firms TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.firms TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.firms TO service_role;


--
-- Name: TABLE influencer_payments; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.influencer_payments TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.influencer_payments TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.influencer_payments TO service_role;


--
-- Name: TABLE inter_credentials; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.inter_credentials TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.inter_credentials TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.inter_credentials TO service_role;


--
-- Name: TABLE notification_recipients; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.notification_recipients TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.notification_recipients TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.notification_recipients TO service_role;


--
-- Name: SEQUENCE notification_recipients_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.notification_recipients_id_seq TO anon;
GRANT ALL ON SEQUENCE public.notification_recipients_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.notification_recipients_id_seq TO service_role;


--
-- Name: TABLE notifications; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.notifications TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.notifications TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.notifications TO service_role;


--
-- Name: TABLE prizes; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.prizes TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.prizes TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.prizes TO service_role;


--
-- Name: TABLE product_categories; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.product_categories TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.product_categories TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.product_categories TO service_role;


--
-- Name: TABLE products; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.products TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.products TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.products TO service_role;


--
-- Name: TABLE raffle_categories; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.raffle_categories TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.raffle_categories TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.raffle_categories TO service_role;


--
-- Name: TABLE raffle_packages; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.raffle_packages TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.raffle_packages TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.raffle_packages TO service_role;


--
-- Name: TABLE raffle_prizes; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.raffle_prizes TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.raffle_prizes TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.raffle_prizes TO service_role;


--
-- Name: TABLE raffles; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.raffles TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.raffles TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.raffles TO service_role;


--
-- Name: TABLE reviews; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.reviews TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.reviews TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.reviews TO service_role;


--
-- Name: TABLE service_plans; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.service_plans TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.service_plans TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.service_plans TO service_role;


--
-- Name: TABLE shared_raffles; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.shared_raffles TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.shared_raffles TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.shared_raffles TO service_role;


--
-- Name: TABLE specializations; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.specializations TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.specializations TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.specializations TO service_role;


--
-- Name: TABLE support_tickets; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.support_tickets TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.support_tickets TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.support_tickets TO service_role;


--
-- Name: TABLE system_config; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.system_config TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.system_config TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.system_config TO service_role;


--
-- Name: TABLE tickets; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.tickets TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.tickets TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.tickets TO service_role;


--
-- Name: TABLE transactions; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.transactions TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.transactions TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.transactions TO service_role;


--
-- Name: TABLE users; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.users TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.users TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.users TO service_role;


--
-- Name: TABLE vw_banner; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.vw_banner TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.vw_banner TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.vw_banner TO service_role;


--
-- Name: TABLE vw_firm_info; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.vw_firm_info TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.vw_firm_info TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.vw_firm_info TO service_role;


--
-- Name: TABLE vw_product_details; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.vw_product_details TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.vw_product_details TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.vw_product_details TO service_role;


--
-- Name: TABLE vw_raffles_details; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.vw_raffles_details TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.vw_raffles_details TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.vw_raffles_details TO service_role;


--
-- Name: TABLE vw_user_info; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.vw_user_info TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.vw_user_info TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.vw_user_info TO service_role;


--
-- Name: TABLE winners; Type: ACL; Schema: public; Owner: postgres
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.winners TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.winners TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.winners TO service_role;


--
-- Name: TABLE messages; Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE realtime.messages TO postgres;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE realtime.messages TO dashboard_user;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO anon;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO authenticated;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO service_role;


--
-- Name: TABLE messages_2025_01_16; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE realtime.messages_2025_01_16 TO postgres;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE realtime.messages_2025_01_16 TO dashboard_user;


--
-- Name: TABLE messages_2025_01_17; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE realtime.messages_2025_01_17 TO postgres;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE realtime.messages_2025_01_17 TO dashboard_user;


--
-- Name: TABLE messages_2025_01_18; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE realtime.messages_2025_01_18 TO postgres;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE realtime.messages_2025_01_18 TO dashboard_user;


--
-- Name: TABLE messages_2025_01_19; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE realtime.messages_2025_01_19 TO postgres;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE realtime.messages_2025_01_19 TO dashboard_user;


--
-- Name: TABLE messages_2025_01_20; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE realtime.messages_2025_01_20 TO postgres;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE realtime.messages_2025_01_20 TO dashboard_user;


--
-- Name: TABLE schema_migrations; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE realtime.schema_migrations TO postgres;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE realtime.schema_migrations TO dashboard_user;
GRANT SELECT ON TABLE realtime.schema_migrations TO anon;
GRANT SELECT ON TABLE realtime.schema_migrations TO authenticated;
GRANT SELECT ON TABLE realtime.schema_migrations TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE realtime.schema_migrations TO supabase_realtime_admin;


--
-- Name: TABLE subscription; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE realtime.subscription TO postgres;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE realtime.subscription TO dashboard_user;
GRANT SELECT ON TABLE realtime.subscription TO anon;
GRANT SELECT ON TABLE realtime.subscription TO authenticated;
GRANT SELECT ON TABLE realtime.subscription TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE realtime.subscription TO supabase_realtime_admin;


--
-- Name: SEQUENCE subscription_id_seq; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO postgres;
GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO dashboard_user;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO anon;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO authenticated;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO service_role;
GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO supabase_realtime_admin;


--
-- Name: TABLE buckets; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE storage.buckets TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE storage.buckets TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE storage.buckets TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE storage.buckets TO postgres;


--
-- Name: TABLE migrations; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE storage.migrations TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE storage.migrations TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE storage.migrations TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE storage.migrations TO postgres;


--
-- Name: TABLE objects; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE storage.objects TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE storage.objects TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE storage.objects TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE storage.objects TO postgres;


--
-- Name: TABLE s3_multipart_uploads; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE storage.s3_multipart_uploads TO service_role;
GRANT SELECT ON TABLE storage.s3_multipart_uploads TO authenticated;
GRANT SELECT ON TABLE storage.s3_multipart_uploads TO anon;


--
-- Name: TABLE s3_multipart_uploads_parts; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE storage.s3_multipart_uploads_parts TO service_role;
GRANT SELECT ON TABLE storage.s3_multipart_uploads_parts TO authenticated;
GRANT SELECT ON TABLE storage.s3_multipart_uploads_parts TO anon;


--
-- Name: TABLE hooks; Type: ACL; Schema: supabase_functions; Owner: supabase_functions_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE supabase_functions.hooks TO postgres;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE supabase_functions.hooks TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE supabase_functions.hooks TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE supabase_functions.hooks TO service_role;


--
-- Name: SEQUENCE hooks_id_seq; Type: ACL; Schema: supabase_functions; Owner: supabase_functions_admin
--

GRANT ALL ON SEQUENCE supabase_functions.hooks_id_seq TO postgres;
GRANT ALL ON SEQUENCE supabase_functions.hooks_id_seq TO anon;
GRANT ALL ON SEQUENCE supabase_functions.hooks_id_seq TO authenticated;
GRANT ALL ON SEQUENCE supabase_functions.hooks_id_seq TO service_role;


--
-- Name: TABLE migrations; Type: ACL; Schema: supabase_functions; Owner: supabase_functions_admin
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE supabase_functions.migrations TO postgres;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE supabase_functions.migrations TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE supabase_functions.migrations TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE supabase_functions.migrations TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON SEQUENCES TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON FUNCTIONS TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: pgsodium; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium GRANT ALL ON SEQUENCES TO pgsodium_keyholder;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: pgsodium; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO pgsodium_keyholder;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON SEQUENCES TO pgsodium_keyiduser;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON FUNCTIONS TO pgsodium_keyiduser;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO pgsodium_keyiduser;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: supabase_functions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA supabase_functions GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA supabase_functions GRANT ALL ON SEQUENCES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA supabase_functions GRANT ALL ON SEQUENCES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA supabase_functions GRANT ALL ON SEQUENCES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: supabase_functions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA supabase_functions GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA supabase_functions GRANT ALL ON FUNCTIONS TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA supabase_functions GRANT ALL ON FUNCTIONS TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA supabase_functions GRANT ALL ON FUNCTIONS TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: supabase_functions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA supabase_functions GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA supabase_functions GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA supabase_functions GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA supabase_functions GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO service_role;


--
-- Name: issue_graphql_placeholder; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_graphql_placeholder ON sql_drop
         WHEN TAG IN ('DROP EXTENSION')
   EXECUTE FUNCTION extensions.set_graphql_placeholder();


ALTER EVENT TRIGGER issue_graphql_placeholder OWNER TO supabase_admin;

--
-- Name: issue_pg_cron_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_cron_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_cron_access();


ALTER EVENT TRIGGER issue_pg_cron_access OWNER TO supabase_admin;

--
-- Name: issue_pg_graphql_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_graphql_access ON ddl_command_end
         WHEN TAG IN ('CREATE FUNCTION')
   EXECUTE FUNCTION extensions.grant_pg_graphql_access();


ALTER EVENT TRIGGER issue_pg_graphql_access OWNER TO supabase_admin;

--
-- Name: issue_pg_net_access; Type: EVENT TRIGGER; Schema: -; Owner: postgres
--

CREATE EVENT TRIGGER issue_pg_net_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_net_access();


ALTER EVENT TRIGGER issue_pg_net_access OWNER TO postgres;

--
-- Name: pgrst_ddl_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_ddl_watch ON ddl_command_end
   EXECUTE FUNCTION extensions.pgrst_ddl_watch();


ALTER EVENT TRIGGER pgrst_ddl_watch OWNER TO supabase_admin;

--
-- Name: pgrst_drop_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_drop_watch ON sql_drop
   EXECUTE FUNCTION extensions.pgrst_drop_watch();


ALTER EVENT TRIGGER pgrst_drop_watch OWNER TO supabase_admin;

--
-- PostgreSQL database dump complete
--

